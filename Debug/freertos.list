
freertos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000633c  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800660c  0800660c  0000760c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006738  08006738  00007738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08006740  08006740  00007740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08006744  08006744  00007744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000008c  24000000  08006748  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000041d4  2400008c  080067d4  0000808c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24004260  080067d4  00008260  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY
 10 .debug_info   000144c9  00000000  00000000  000080ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f08  00000000  00000000  0001c583  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001060  00000000  00000000  0001f490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c74  00000000  00000000  000204f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034b1e  00000000  00000000  00021164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015678  00000000  00000000  00055c82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0014bce8  00000000  00000000  0006b2fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b6fe2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000498c  00000000  00000000  001b7028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000054  00000000  00000000  001bb9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400008c 	.word	0x2400008c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080065f4 	.word	0x080065f4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000090 	.word	0x24000090
 800030c:	080065f4 	.word	0x080065f4

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80006a0:	b480      	push	{r7}
 80006a2:	b085      	sub	sp, #20
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <vApplicationGetIdleTaskMemory+0x2c>)
 80006b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	4a06      	ldr	r2, [pc, #24]	@ (80006d0 <vApplicationGetIdleTaskMemory+0x30>)
 80006b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	2280      	movs	r2, #128	@ 0x80
 80006bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80006be:	bf00      	nop
 80006c0:	3714      	adds	r7, #20
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	240000b0 	.word	0x240000b0
 80006d0:	24000104 	.word	0x24000104

080006d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006d4:	b5b0      	push	{r4, r5, r7, lr}
 80006d6:	b09c      	sub	sp, #112	@ 0x70
 80006d8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80006da:	4b27      	ldr	r3, [pc, #156]	@ (8000778 <MX_FREERTOS_Init+0xa4>)
 80006dc:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80006e0:	461d      	mov	r5, r3
 80006e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80006f2:	2100      	movs	r1, #0
 80006f4:	4618      	mov	r0, r3
 80006f6:	f003 fdec 	bl	80042d2 <osThreadCreate>
 80006fa:	4603      	mov	r3, r0
 80006fc:	4a1f      	ldr	r2, [pc, #124]	@ (800077c <MX_FREERTOS_Init+0xa8>)
 80006fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of blinkLED */
  osThreadDef(blinkGreen, StartBlinkGreen, osPriorityLow, 0, 128);
 8000700:	4b1f      	ldr	r3, [pc, #124]	@ (8000780 <MX_FREERTOS_Init+0xac>)
 8000702:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000706:	461d      	mov	r5, r3
 8000708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000710:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinkLEDHandle = osThreadCreate(osThread(blinkGreen), NULL);
 8000714:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fdd9 	bl	80042d2 <osThreadCreate>
 8000720:	4603      	mov	r3, r0
 8000722:	4a18      	ldr	r2, [pc, #96]	@ (8000784 <MX_FREERTOS_Init+0xb0>)
 8000724:	6013      	str	r3, [r2, #0]

  osThreadDef(blinkYellow, StartBlinkYellow, osPriorityLow, 0, 128);
 8000726:	4b18      	ldr	r3, [pc, #96]	@ (8000788 <MX_FREERTOS_Init+0xb4>)
 8000728:	f107 041c 	add.w	r4, r7, #28
 800072c:	461d      	mov	r5, r3
 800072e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000732:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinkLEDHandle = osThreadCreate(osThread(blinkYellow), NULL);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f003 fdc6 	bl	80042d2 <osThreadCreate>
 8000746:	4603      	mov	r3, r0
 8000748:	4a0e      	ldr	r2, [pc, #56]	@ (8000784 <MX_FREERTOS_Init+0xb0>)
 800074a:	6013      	str	r3, [r2, #0]

  osThreadDef(blinkRed, StartBlinkRed, osPriorityLow, 0, 128);
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <MX_FREERTOS_Init+0xb8>)
 800074e:	463c      	mov	r4, r7
 8000750:	461d      	mov	r5, r3
 8000752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000756:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800075a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  blinkLEDHandle = osThreadCreate(osThread(blinkRed), NULL);
 800075e:	463b      	mov	r3, r7
 8000760:	2100      	movs	r1, #0
 8000762:	4618      	mov	r0, r3
 8000764:	f003 fdb5 	bl	80042d2 <osThreadCreate>
 8000768:	4603      	mov	r3, r0
 800076a:	4a06      	ldr	r2, [pc, #24]	@ (8000784 <MX_FREERTOS_Init+0xb0>)
 800076c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800076e:	bf00      	nop
 8000770:	3770      	adds	r7, #112	@ 0x70
 8000772:	46bd      	mov	sp, r7
 8000774:	bdb0      	pop	{r4, r5, r7, pc}
 8000776:	bf00      	nop
 8000778:	08006618 	.word	0x08006618
 800077c:	240000a8 	.word	0x240000a8
 8000780:	08006640 	.word	0x08006640
 8000784:	240000ac 	.word	0x240000ac
 8000788:	08006668 	.word	0x08006668
 800078c:	08006690 	.word	0x08006690

08000790 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000798:	2001      	movs	r0, #1
 800079a:	f003 fde6 	bl	800436a <osDelay>
 800079e:	e7fb      	b.n	8000798 <StartDefaultTask+0x8>

080007a0 <StartBlinkGreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END StartBlinkGreen */
void StartBlinkGreen(void const * argument)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkGreen */
	while(1)
	{
		BSP_LED_Toggle(LED_GREEN);
 80007a8:	2000      	movs	r0, #0
 80007aa:	f000 fbbb 	bl	8000f24 <BSP_LED_Toggle>
		vTaskDelay( 250/portTICK_PERIOD_MS );
 80007ae:	20fa      	movs	r0, #250	@ 0xfa
 80007b0:	f004 f83a 	bl	8004828 <vTaskDelay>
		BSP_LED_Toggle(LED_GREEN);
 80007b4:	bf00      	nop
 80007b6:	e7f7      	b.n	80007a8 <StartBlinkGreen+0x8>

080007b8 <StartBlinkYellow>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END StartBlinkYellow */
void StartBlinkYellow(void const * argument)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkYellow */
	while(1)
	{
		BSP_LED_Toggle(LED_YELLOW);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f000 fbaf 	bl	8000f24 <BSP_LED_Toggle>
		vTaskDelay( 500/portTICK_PERIOD_MS );
 80007c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007ca:	f004 f82d 	bl	8004828 <vTaskDelay>
		BSP_LED_Toggle(LED_YELLOW);
 80007ce:	bf00      	nop
 80007d0:	e7f6      	b.n	80007c0 <StartBlinkYellow+0x8>

080007d2 <StartBlinkRed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END StartBlinkRed */
void StartBlinkRed(void const * argument)
{
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b082      	sub	sp, #8
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkRed */
	while(1)
	{
		BSP_LED_Toggle(LED_RED);
 80007da:	2002      	movs	r0, #2
 80007dc:	f000 fba2 	bl	8000f24 <BSP_LED_Toggle>
		vTaskDelay( 750/portTICK_PERIOD_MS );
 80007e0:	f240 20ee 	movw	r0, #750	@ 0x2ee
 80007e4:	f004 f820 	bl	8004828 <vTaskDelay>
		BSP_LED_Toggle(LED_RED);
 80007e8:	bf00      	nop
 80007ea:	e7f6      	b.n	80007da <StartBlinkRed+0x8>

080007ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	4b12      	ldr	r3, [pc, #72]	@ (800083c <MX_GPIO_Init+0x50>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	4a10      	ldr	r2, [pc, #64]	@ (800083c <MX_GPIO_Init+0x50>)
 80007fa:	f043 0304 	orr.w	r3, r3, #4
 80007fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <MX_GPIO_Init+0x50>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000810:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <MX_GPIO_Init+0x50>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000816:	4a09      	ldr	r2, [pc, #36]	@ (800083c <MX_GPIO_Init+0x50>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000820:	4b06      	ldr	r3, [pc, #24]	@ (800083c <MX_GPIO_Init+0x50>)
 8000822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	58024400 	.word	0x58024400

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000844:	f000 f8c4 	bl	80009d0 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000848:	f000 fcf8 	bl	800123c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084c:	f000 f850 	bl	80008f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000850:	f7ff ffcc 	bl	80007ec <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000854:	f7ff ff3e 	bl	80006d4 <MX_FREERTOS_Init>

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000858:	2000      	movs	r0, #0
 800085a:	f000 fac3 	bl	8000de4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 800085e:	2001      	movs	r0, #1
 8000860:	f000 fac0 	bl	8000de4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000864:	2002      	movs	r0, #2
 8000866:	f000 fabd 	bl	8000de4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 800086a:	2101      	movs	r1, #1
 800086c:	2000      	movs	r0, #0
 800086e:	f000 fb83 	bl	8000f78 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000872:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <main+0xa4>)
 8000874:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000878:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800087a:	4b1a      	ldr	r3, [pc, #104]	@ (80008e4 <main+0xa4>)
 800087c:	2200      	movs	r2, #0
 800087e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <main+0xa4>)
 8000882:	2200      	movs	r2, #0
 8000884:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000886:	4b17      	ldr	r3, [pc, #92]	@ (80008e4 <main+0xa4>)
 8000888:	2200      	movs	r2, #0
 800088a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800088c:	4b15      	ldr	r3, [pc, #84]	@ (80008e4 <main+0xa4>)
 800088e:	2200      	movs	r2, #0
 8000890:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000892:	4914      	ldr	r1, [pc, #80]	@ (80008e4 <main+0xa4>)
 8000894:	2000      	movs	r0, #0
 8000896:	f000 fbf3 	bl	8001080 <BSP_COM_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <main+0x64>
  {
    Error_Handler();
 80008a0:	f000 f8d6 	bl	8000a50 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */

  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80008a4:	4810      	ldr	r0, [pc, #64]	@ (80008e8 <main+0xa8>)
 80008a6:	f005 f837 	bl	8005918 <iprintf>

  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f000 fb10 	bl	8000ed0 <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 80008b0:	2001      	movs	r0, #1
 80008b2:	f000 fb0d 	bl	8000ed0 <BSP_LED_On>
  BSP_LED_On(LED_RED);
 80008b6:	2002      	movs	r0, #2
 80008b8:	f000 fb0a 	bl	8000ed0 <BSP_LED_On>

  /* USER CODE END BSP */

  /* Start scheduler */
  osKernelStart();
 80008bc:	f003 fd02 	bl	80042c4 <osKernelStart>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 80008c0:	4b0a      	ldr	r3, [pc, #40]	@ (80008ec <main+0xac>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d1fb      	bne.n	80008c0 <main+0x80>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 80008c8:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <main+0xac>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 80008ce:	2000      	movs	r0, #0
 80008d0:	f000 fb28 	bl	8000f24 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f000 fb25 	bl	8000f24 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 80008da:	2002      	movs	r0, #2
 80008dc:	f000 fb22 	bl	8000f24 <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED)
 80008e0:	e7ee      	b.n	80008c0 <main+0x80>
 80008e2:	bf00      	nop
 80008e4:	24000304 	.word	0x24000304
 80008e8:	080066ac 	.word	0x080066ac
 80008ec:	24000314 	.word	0x24000314

080008f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09c      	sub	sp, #112	@ 0x70
 80008f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fa:	224c      	movs	r2, #76	@ 0x4c
 80008fc:	2100      	movs	r1, #0
 80008fe:	4618      	mov	r0, r3
 8000900:	f005 f85f 	bl	80059c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000904:	1d3b      	adds	r3, r7, #4
 8000906:	2220      	movs	r2, #32
 8000908:	2100      	movs	r1, #0
 800090a:	4618      	mov	r0, r3
 800090c:	f005 f859 	bl	80059c2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000910:	2002      	movs	r0, #2
 8000912:	f001 f8ed 	bl	8001af0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000916:	2300      	movs	r3, #0
 8000918:	603b      	str	r3, [r7, #0]
 800091a:	4b2c      	ldr	r3, [pc, #176]	@ (80009cc <SystemClock_Config+0xdc>)
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000922:	4a2a      	ldr	r2, [pc, #168]	@ (80009cc <SystemClock_Config+0xdc>)
 8000924:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000928:	6193      	str	r3, [r2, #24]
 800092a:	4b28      	ldr	r3, [pc, #160]	@ (80009cc <SystemClock_Config+0xdc>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000936:	bf00      	nop
 8000938:	4b24      	ldr	r3, [pc, #144]	@ (80009cc <SystemClock_Config+0xdc>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000940:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000944:	d1f8      	bne.n	8000938 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000946:	2302      	movs	r3, #2
 8000948:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800094a:	2301      	movs	r3, #1
 800094c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 800094e:	2340      	movs	r3, #64	@ 0x40
 8000950:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	2302      	movs	r3, #2
 8000954:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000956:	2300      	movs	r3, #0
 8000958:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800095a:	2304      	movs	r3, #4
 800095c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800095e:	230c      	movs	r3, #12
 8000960:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000962:	2301      	movs	r3, #1
 8000964:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000966:	2304      	movs	r3, #4
 8000968:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800096e:	230c      	movs	r3, #12
 8000970:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000972:	2300      	movs	r3, #0
 8000974:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097e:	4618      	mov	r0, r3
 8000980:	f001 f8f0 	bl	8001b64 <HAL_RCC_OscConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800098a:	f000 f861 	bl	8000a50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	233f      	movs	r3, #63	@ 0x3f
 8000990:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	2303      	movs	r3, #3
 8000994:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800099a:	2308      	movs	r3, #8
 800099c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800099e:	2340      	movs	r3, #64	@ 0x40
 80009a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009a2:	2340      	movs	r3, #64	@ 0x40
 80009a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009ac:	2340      	movs	r3, #64	@ 0x40
 80009ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2101      	movs	r1, #1
 80009b4:	4618      	mov	r0, r3
 80009b6:	f001 fcaf 	bl	8002318 <HAL_RCC_ClockConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80009c0:	f000 f846 	bl	8000a50 <Error_Handler>
  }
}
 80009c4:	bf00      	nop
 80009c6:	3770      	adds	r7, #112	@ 0x70
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	58024800 	.word	0x58024800

080009d0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009d6:	463b      	mov	r3, r7
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009e2:	f000 fdcd 	bl	8001580 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009e6:	2301      	movs	r3, #1
 80009e8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80009ee:	2300      	movs	r3, #0
 80009f0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009f2:	231f      	movs	r3, #31
 80009f4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80009f6:	2387      	movs	r3, #135	@ 0x87
 80009f8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80009fe:	2300      	movs	r3, #0
 8000a00:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a06:	2301      	movs	r3, #1
 8000a08:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a12:	463b      	mov	r3, r7
 8000a14:	4618      	mov	r0, r3
 8000a16:	f000 fdeb 	bl	80015f0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a1a:	2004      	movs	r0, #4
 8000a1c:	f000 fdc8 	bl	80015b0 <HAL_MPU_Enable>

}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <BSP_PB_Callback>:
  * @brief BSP Push Button callback
  * @param Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d102      	bne.n	8000a3e <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000a38:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <BSP_PB_Callback+0x24>)
 8000a3a:	2201      	movs	r2, #1
 8000a3c:	601a      	str	r2, [r3, #0]
  }
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	24000314 	.word	0x24000314

08000a50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a54:	b672      	cpsid	i
}
 8000a56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a58:	bf00      	nop
 8000a5a:	e7fd      	b.n	8000a58 <Error_Handler+0x8>

08000a5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a62:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <HAL_MspInit+0x38>)
 8000a64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a68:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <HAL_MspInit+0x38>)
 8000a6a:	f043 0302 	orr.w	r3, r3, #2
 8000a6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a72:	4b08      	ldr	r3, [pc, #32]	@ (8000a94 <HAL_MspInit+0x38>)
 8000a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a78:	f003 0302 	and.w	r3, r3, #2
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a80:	2200      	movs	r2, #0
 8000a82:	210f      	movs	r1, #15
 8000a84:	f06f 0001 	mvn.w	r0, #1
 8000a88:	f000 fd45 	bl	8001516 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	58024400 	.word	0x58024400

08000a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <NMI_Handler+0x4>

08000aa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <MemManage_Handler+0x4>

08000ab0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <BusFault_Handler+0x4>

08000ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <UsageFault_Handler+0x4>

08000ac0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad2:	f000 fc25 	bl	8001320 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000ad6:	f004 f9d7 	bl	8004e88 <xTaskGetSchedulerState>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d001      	beq.n	8000ae4 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000ae0:	f004 fc1a 	bl	8005318 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000aec:	2000      	movs	r0, #0
 8000aee:	f000 fab5 	bl	800105c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}

08000af6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b086      	sub	sp, #24
 8000afa:	af00      	add	r7, sp, #0
 8000afc:	60f8      	str	r0, [r7, #12]
 8000afe:	60b9      	str	r1, [r7, #8]
 8000b00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
 8000b06:	e00a      	b.n	8000b1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b08:	f3af 8000 	nop.w
 8000b0c:	4601      	mov	r1, r0
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	60ba      	str	r2, [r7, #8]
 8000b14:	b2ca      	uxtb	r2, r1
 8000b16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	617b      	str	r3, [r7, #20]
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	429a      	cmp	r2, r3
 8000b24:	dbf0      	blt.n	8000b08 <_read+0x12>
  }

  return len;
 8000b26:	687b      	ldr	r3, [r7, #4]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3718      	adds	r7, #24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	e009      	b.n	8000b56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1c5a      	adds	r2, r3, #1
 8000b46:	60ba      	str	r2, [r7, #8]
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fafa 	bl	8001144 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	3301      	adds	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	697a      	ldr	r2, [r7, #20]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	429a      	cmp	r2, r3
 8000b5c:	dbf1      	blt.n	8000b42 <_write+0x12>
  }
  return len;
 8000b5e:	687b      	ldr	r3, [r7, #4]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3718      	adds	r7, #24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <_close>:

int _close(int file)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr

08000b80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b90:	605a      	str	r2, [r3, #4]
  return 0;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr

08000ba0 <_isatty>:

int _isatty(int file)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba8:	2301      	movs	r3, #1
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb6:	b480      	push	{r7}
 8000bb8:	b085      	sub	sp, #20
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	60f8      	str	r0, [r7, #12]
 8000bbe:	60b9      	str	r1, [r7, #8]
 8000bc0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc2:	2300      	movs	r3, #0
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd8:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <_sbrk+0x5c>)
 8000bda:	4b15      	ldr	r3, [pc, #84]	@ (8000c30 <_sbrk+0x60>)
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <_sbrk+0x64>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d102      	bne.n	8000bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <_sbrk+0x64>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <_sbrk+0x68>)
 8000bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d207      	bcs.n	8000c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c00:	f004 ff2e 	bl	8005a60 <__errno>
 8000c04:	4603      	mov	r3, r0
 8000c06:	220c      	movs	r2, #12
 8000c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	e009      	b.n	8000c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c10:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c16:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <_sbrk+0x64>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	4a05      	ldr	r2, [pc, #20]	@ (8000c34 <_sbrk+0x64>)
 8000c20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c22:	68fb      	ldr	r3, [r7, #12]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	24050000 	.word	0x24050000
 8000c30:	00000400 	.word	0x00000400
 8000c34:	24000318 	.word	0x24000318
 8000c38:	24004260 	.word	0x24004260

08000c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000c40:	4b3e      	ldr	r3, [pc, #248]	@ (8000d3c <SystemInit+0x100>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c46:	4a3d      	ldr	r2, [pc, #244]	@ (8000d3c <SystemInit+0x100>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c50:	4b3b      	ldr	r3, [pc, #236]	@ (8000d40 <SystemInit+0x104>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f003 030f 	and.w	r3, r3, #15
 8000c58:	2b06      	cmp	r3, #6
 8000c5a:	d807      	bhi.n	8000c6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c5c:	4b38      	ldr	r3, [pc, #224]	@ (8000d40 <SystemInit+0x104>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f023 030f 	bic.w	r3, r3, #15
 8000c64:	4a36      	ldr	r2, [pc, #216]	@ (8000d40 <SystemInit+0x104>)
 8000c66:	f043 0307 	orr.w	r3, r3, #7
 8000c6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c6c:	4b35      	ldr	r3, [pc, #212]	@ (8000d44 <SystemInit+0x108>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a34      	ldr	r2, [pc, #208]	@ (8000d44 <SystemInit+0x108>)
 8000c72:	f043 0301 	orr.w	r3, r3, #1
 8000c76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c78:	4b32      	ldr	r3, [pc, #200]	@ (8000d44 <SystemInit+0x108>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c7e:	4b31      	ldr	r3, [pc, #196]	@ (8000d44 <SystemInit+0x108>)
 8000c80:	681a      	ldr	r2, [r3, #0]
 8000c82:	4930      	ldr	r1, [pc, #192]	@ (8000d44 <SystemInit+0x108>)
 8000c84:	4b30      	ldr	r3, [pc, #192]	@ (8000d48 <SystemInit+0x10c>)
 8000c86:	4013      	ands	r3, r2
 8000c88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000d40 <SystemInit+0x104>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f003 0308 	and.w	r3, r3, #8
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d007      	beq.n	8000ca6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c96:	4b2a      	ldr	r3, [pc, #168]	@ (8000d40 <SystemInit+0x104>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f023 030f 	bic.w	r3, r3, #15
 8000c9e:	4a28      	ldr	r2, [pc, #160]	@ (8000d40 <SystemInit+0x104>)
 8000ca0:	f043 0307 	orr.w	r3, r3, #7
 8000ca4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ca6:	4b27      	ldr	r3, [pc, #156]	@ (8000d44 <SystemInit+0x108>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000cac:	4b25      	ldr	r3, [pc, #148]	@ (8000d44 <SystemInit+0x108>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000cb2:	4b24      	ldr	r3, [pc, #144]	@ (8000d44 <SystemInit+0x108>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000cb8:	4b22      	ldr	r3, [pc, #136]	@ (8000d44 <SystemInit+0x108>)
 8000cba:	4a24      	ldr	r2, [pc, #144]	@ (8000d4c <SystemInit+0x110>)
 8000cbc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <SystemInit+0x108>)
 8000cc0:	4a23      	ldr	r2, [pc, #140]	@ (8000d50 <SystemInit+0x114>)
 8000cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <SystemInit+0x108>)
 8000cc6:	4a23      	ldr	r2, [pc, #140]	@ (8000d54 <SystemInit+0x118>)
 8000cc8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000cca:	4b1e      	ldr	r3, [pc, #120]	@ (8000d44 <SystemInit+0x108>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000cd0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <SystemInit+0x108>)
 8000cd2:	4a20      	ldr	r2, [pc, #128]	@ (8000d54 <SystemInit+0x118>)
 8000cd4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d44 <SystemInit+0x108>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000cdc:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <SystemInit+0x108>)
 8000cde:	4a1d      	ldr	r2, [pc, #116]	@ (8000d54 <SystemInit+0x118>)
 8000ce0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ce2:	4b18      	ldr	r3, [pc, #96]	@ (8000d44 <SystemInit+0x108>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ce8:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <SystemInit+0x108>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a15      	ldr	r2, [pc, #84]	@ (8000d44 <SystemInit+0x108>)
 8000cee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000cf4:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <SystemInit+0x108>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000cfa:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <SystemInit+0x108>)
 8000cfc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d113      	bne.n	8000d30 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d08:	4b0e      	ldr	r3, [pc, #56]	@ (8000d44 <SystemInit+0x108>)
 8000d0a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8000d44 <SystemInit+0x108>)
 8000d10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d14:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <SystemInit+0x11c>)
 8000d1a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000d1e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000d20:	4b08      	ldr	r3, [pc, #32]	@ (8000d44 <SystemInit+0x108>)
 8000d22:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d26:	4a07      	ldr	r2, [pc, #28]	@ (8000d44 <SystemInit+0x108>)
 8000d28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000d2c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00
 8000d40:	52002000 	.word	0x52002000
 8000d44:	58024400 	.word	0x58024400
 8000d48:	eaf6ed7f 	.word	0xeaf6ed7f
 8000d4c:	02020200 	.word	0x02020200
 8000d50:	01ff0000 	.word	0x01ff0000
 8000d54:	01010280 	.word	0x01010280
 8000d58:	52004000 	.word	0x52004000

08000d5c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000d60:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <ExitRun0Mode+0x2c>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	4a08      	ldr	r2, [pc, #32]	@ (8000d88 <ExitRun0Mode+0x2c>)
 8000d66:	f043 0302 	orr.w	r3, r3, #2
 8000d6a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000d6c:	bf00      	nop
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <ExitRun0Mode+0x2c>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d0f9      	beq.n	8000d6e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000d7a:	bf00      	nop
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	58024800 	.word	0x58024800

08000d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d8c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000dc8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000d90:	f7ff ffe4 	bl	8000d5c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d94:	f7ff ff52 	bl	8000c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9a:	490d      	ldr	r1, [pc, #52]	@ (8000dd0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da0:	e002      	b.n	8000da8 <LoopCopyDataInit>

08000da2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da6:	3304      	adds	r3, #4

08000da8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000daa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dac:	d3f9      	bcc.n	8000da2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dae:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ddc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db4:	e001      	b.n	8000dba <LoopFillZerobss>

08000db6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db8:	3204      	adds	r2, #4

08000dba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dbc:	d3fb      	bcc.n	8000db6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f004 fe55 	bl	8005a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc2:	f7ff fd3d 	bl	8000840 <main>
  bx  lr
 8000dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8000dcc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dd0:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8000dd4:	08006748 	.word	0x08006748
  ldr r2, =_sbss
 8000dd8:	2400008c 	.word	0x2400008c
  ldr r4, =_ebss
 8000ddc:	24004260 	.word	0x24004260

08000de0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC3_IRQHandler>
	...

08000de4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08c      	sub	sp, #48	@ 0x30
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d009      	beq.n	8000e0c <BSP_LED_Init+0x28>
 8000df8:	79fb      	ldrb	r3, [r7, #7]
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d006      	beq.n	8000e0c <BSP_LED_Init+0x28>
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d003      	beq.n	8000e0c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000e04:	f06f 0301 	mvn.w	r3, #1
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e0a:	e055      	b.n	8000eb8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10f      	bne.n	8000e32 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000e12:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec4 <BSP_LED_Init+0xe0>)
 8000e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e18:	4a2a      	ldr	r2, [pc, #168]	@ (8000ec4 <BSP_LED_Init+0xe0>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e22:	4b28      	ldr	r3, [pc, #160]	@ (8000ec4 <BSP_LED_Init+0xe0>)
 8000e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e28:	f003 0302 	and.w	r3, r3, #2
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	e021      	b.n	8000e76 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d10f      	bne.n	8000e58 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000e38:	4b22      	ldr	r3, [pc, #136]	@ (8000ec4 <BSP_LED_Init+0xe0>)
 8000e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e3e:	4a21      	ldr	r2, [pc, #132]	@ (8000ec4 <BSP_LED_Init+0xe0>)
 8000e40:	f043 0310 	orr.w	r3, r3, #16
 8000e44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e48:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec4 <BSP_LED_Init+0xe0>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	613b      	str	r3, [r7, #16]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	e00e      	b.n	8000e76 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000e58:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec4 <BSP_LED_Init+0xe0>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5e:	4a19      	ldr	r2, [pc, #100]	@ (8000ec4 <BSP_LED_Init+0xe0>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e68:	4b16      	ldr	r3, [pc, #88]	@ (8000ec4 <BSP_LED_Init+0xe0>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60fb      	str	r3, [r7, #12]
 8000e74:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000e76:	79fb      	ldrb	r3, [r7, #7]
 8000e78:	4a13      	ldr	r2, [pc, #76]	@ (8000ec8 <BSP_LED_Init+0xe4>)
 8000e7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e7e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000e8c:	79fb      	ldrb	r3, [r7, #7]
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ecc <BSP_LED_Init+0xe8>)
 8000e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e94:	f107 0218 	add.w	r2, r7, #24
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 fc4c 	bl	8001738 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ecc <BSP_LED_Init+0xe8>)
 8000ea4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4a07      	ldr	r2, [pc, #28]	@ (8000ec8 <BSP_LED_Init+0xe4>)
 8000eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f000 fde8 	bl	8001a88 <HAL_GPIO_WritePin>
  }

  return ret;
 8000eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3730      	adds	r7, #48	@ 0x30
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	58024400 	.word	0x58024400
 8000ec8:	080066e0 	.word	0x080066e0
 8000ecc:	2400000c 	.word	0x2400000c

08000ed0 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d009      	beq.n	8000ef8 <BSP_LED_On+0x28>
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d006      	beq.n	8000ef8 <BSP_LED_On+0x28>
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d003      	beq.n	8000ef8 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000ef0:	f06f 0301 	mvn.w	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	e00b      	b.n	8000f10 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	4a08      	ldr	r2, [pc, #32]	@ (8000f1c <BSP_LED_On+0x4c>)
 8000efc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <BSP_LED_On+0x50>)
 8000f04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f08:	2201      	movs	r2, #1
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	f000 fdbc 	bl	8001a88 <HAL_GPIO_WritePin>
  }

  return ret;
 8000f10:	68fb      	ldr	r3, [r7, #12]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2400000c 	.word	0x2400000c
 8000f20:	080066e0 	.word	0x080066e0

08000f24 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d009      	beq.n	8000f4c <BSP_LED_Toggle+0x28>
 8000f38:	79fb      	ldrb	r3, [r7, #7]
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d006      	beq.n	8000f4c <BSP_LED_Toggle+0x28>
 8000f3e:	79fb      	ldrb	r3, [r7, #7]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d003      	beq.n	8000f4c <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000f44:	f06f 0301 	mvn.w	r3, #1
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	e00b      	b.n	8000f64 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	4a08      	ldr	r2, [pc, #32]	@ (8000f70 <BSP_LED_Toggle+0x4c>)
 8000f50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	4907      	ldr	r1, [pc, #28]	@ (8000f74 <BSP_LED_Toggle+0x50>)
 8000f58:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4610      	mov	r0, r2
 8000f60:	f000 fdab 	bl	8001aba <HAL_GPIO_TogglePin>
  }

  return ret;
 8000f64:	68fb      	ldr	r3, [r7, #12]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2400000c 	.word	0x2400000c
 8000f74:	080066e0 	.word	0x080066e0

08000f78 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	460a      	mov	r2, r1
 8000f82:	71fb      	strb	r3, [r7, #7]
 8000f84:	4613      	mov	r3, r2
 8000f86:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000f88:	4b2e      	ldr	r3, [pc, #184]	@ (8001044 <BSP_PB_Init+0xcc>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001044 <BSP_PB_Init+0xcc>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f98:	4b2a      	ldr	r3, [pc, #168]	@ (8001044 <BSP_PB_Init+0xcc>)
 8000f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000fa6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000faa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000fac:	2302      	movs	r3, #2
 8000fae:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000fb4:	79bb      	ldrb	r3, [r7, #6]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d10c      	bne.n	8000fd4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	4a21      	ldr	r2, [pc, #132]	@ (8001048 <BSP_PB_Init+0xd0>)
 8000fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc6:	f107 020c 	add.w	r2, r7, #12
 8000fca:	4611      	mov	r1, r2
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f000 fbb3 	bl	8001738 <HAL_GPIO_Init>
 8000fd2:	e031      	b.n	8001038 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000fd4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fd8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000fda:	79fb      	ldrb	r3, [r7, #7]
 8000fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8001048 <BSP_PB_Init+0xd0>)
 8000fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe2:	f107 020c 	add.w	r2, r7, #12
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 fba5 	bl	8001738 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	4a16      	ldr	r2, [pc, #88]	@ (800104c <BSP_PB_Init+0xd4>)
 8000ff4:	441a      	add	r2, r3
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	4915      	ldr	r1, [pc, #84]	@ (8001050 <BSP_PB_Init+0xd8>)
 8000ffa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ffe:	4619      	mov	r1, r3
 8001000:	4610      	mov	r0, r2
 8001002:	f000 fb54 	bl	80016ae <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4a10      	ldr	r2, [pc, #64]	@ (800104c <BSP_PB_Init+0xd4>)
 800100c:	1898      	adds	r0, r3, r2
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	4a10      	ldr	r2, [pc, #64]	@ (8001054 <BSP_PB_Init+0xdc>)
 8001012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001016:	461a      	mov	r2, r3
 8001018:	2100      	movs	r1, #0
 800101a:	f000 fb29 	bl	8001670 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800101e:	2028      	movs	r0, #40	@ 0x28
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	4a0d      	ldr	r2, [pc, #52]	@ (8001058 <BSP_PB_Init+0xe0>)
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	2200      	movs	r2, #0
 800102a:	4619      	mov	r1, r3
 800102c:	f000 fa73 	bl	8001516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001030:	2328      	movs	r3, #40	@ 0x28
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fa89 	bl	800154a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3720      	adds	r7, #32
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	58024400 	.word	0x58024400
 8001048:	24000018 	.word	0x24000018
 800104c:	2400031c 	.word	0x2400031c
 8001050:	080066e8 	.word	0x080066e8
 8001054:	2400001c 	.word	0x2400001c
 8001058:	24000020 	.word	0x24000020

0800105c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4a04      	ldr	r2, [pc, #16]	@ (800107c <BSP_PB_IRQHandler+0x20>)
 800106c:	4413      	add	r3, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fb32 	bl	80016d8 <HAL_EXTI_IRQHandler>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2400031c 	.word	0x2400031c

08001080 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b084      	sub	sp, #16
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	6039      	str	r1, [r7, #0]
 800108a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001096:	f06f 0301 	mvn.w	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e018      	b.n	80010d0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800109e:	79fb      	ldrb	r3, [r7, #7]
 80010a0:	2294      	movs	r2, #148	@ 0x94
 80010a2:	fb02 f303 	mul.w	r3, r2, r3
 80010a6:	4a0d      	ldr	r2, [pc, #52]	@ (80010dc <BSP_COM_Init+0x5c>)
 80010a8:	4413      	add	r3, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f000 f86e 	bl	800118c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2294      	movs	r2, #148	@ 0x94
 80010b4:	fb02 f303 	mul.w	r3, r2, r3
 80010b8:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <BSP_COM_Init+0x5c>)
 80010ba:	4413      	add	r3, r2
 80010bc:	6839      	ldr	r1, [r7, #0]
 80010be:	4618      	mov	r0, r3
 80010c0:	f000 f80e 	bl	80010e0 <MX_USART3_Init>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d002      	beq.n	80010d0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80010ca:	f06f 0303 	mvn.w	r3, #3
 80010ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80010d0:	68fb      	ldr	r3, [r7, #12]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	24000324 	.word	0x24000324

080010e0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <MX_USART3_Init+0x60>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	220c      	movs	r2, #12
 80010fe:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	895b      	ldrh	r3, [r3, #10]
 8001104:	461a      	mov	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	891b      	ldrh	r3, [r3, #8]
 8001116:	461a      	mov	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	899b      	ldrh	r3, [r3, #12]
 8001120:	461a      	mov	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800112c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f001 ff3c 	bl	8002fac <HAL_UART_Init>
 8001134:	4603      	mov	r3, r0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	24000008 	.word	0x24000008

08001144 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <__io_putchar+0x30>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	2394      	movs	r3, #148	@ 0x94
 8001154:	fb02 f303 	mul.w	r3, r2, r3
 8001158:	4a07      	ldr	r2, [pc, #28]	@ (8001178 <__io_putchar+0x34>)
 800115a:	1898      	adds	r0, r3, r2
 800115c:	1d39      	adds	r1, r7, #4
 800115e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001162:	2201      	movs	r2, #1
 8001164:	f001 ff7c 	bl	8003060 <HAL_UART_Transmit>
  return ch;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	240003b8 	.word	0x240003b8
 8001178:	24000324 	.word	0x24000324

0800117c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001180:	2000      	movs	r0, #0
 8001182:	f7ff fc51 	bl	8000a28 <BSP_PB_Callback>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b08a      	sub	sp, #40	@ 0x28
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001194:	4b27      	ldr	r3, [pc, #156]	@ (8001234 <COM1_MspInit+0xa8>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119a:	4a26      	ldr	r2, [pc, #152]	@ (8001234 <COM1_MspInit+0xa8>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <COM1_MspInit+0xa8>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80011b2:	4b20      	ldr	r3, [pc, #128]	@ (8001234 <COM1_MspInit+0xa8>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b8:	4a1e      	ldr	r2, [pc, #120]	@ (8001234 <COM1_MspInit+0xa8>)
 80011ba:	f043 0308 	orr.w	r3, r3, #8
 80011be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001234 <COM1_MspInit+0xa8>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c8:	f003 0308 	and.w	r3, r3, #8
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80011d0:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <COM1_MspInit+0xa8>)
 80011d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011d6:	4a17      	ldr	r2, [pc, #92]	@ (8001234 <COM1_MspInit+0xa8>)
 80011d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011dc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011e0:	4b14      	ldr	r3, [pc, #80]	@ (8001234 <COM1_MspInit+0xa8>)
 80011e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80011ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011f2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80011f4:	2302      	movs	r3, #2
 80011f6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80011f8:	2302      	movs	r3, #2
 80011fa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001200:	2307      	movs	r3, #7
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	480b      	ldr	r0, [pc, #44]	@ (8001238 <COM1_MspInit+0xac>)
 800120c:	f000 fa94 	bl	8001738 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001210:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001214:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800121a:	2307      	movs	r3, #7
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800121e:	f107 0314 	add.w	r3, r7, #20
 8001222:	4619      	mov	r1, r3
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <COM1_MspInit+0xac>)
 8001226:	f000 fa87 	bl	8001738 <HAL_GPIO_Init>
}
 800122a:	bf00      	nop
 800122c:	3728      	adds	r7, #40	@ 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	58024400 	.word	0x58024400
 8001238:	58020c00 	.word	0x58020c00

0800123c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001242:	2003      	movs	r0, #3
 8001244:	f000 f95c 	bl	8001500 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001248:	f001 fa1c 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 800124c:	4602      	mov	r2, r0
 800124e:	4b15      	ldr	r3, [pc, #84]	@ (80012a4 <HAL_Init+0x68>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	0a1b      	lsrs	r3, r3, #8
 8001254:	f003 030f 	and.w	r3, r3, #15
 8001258:	4913      	ldr	r1, [pc, #76]	@ (80012a8 <HAL_Init+0x6c>)
 800125a:	5ccb      	ldrb	r3, [r1, r3]
 800125c:	f003 031f 	and.w	r3, r3, #31
 8001260:	fa22 f303 	lsr.w	r3, r2, r3
 8001264:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001266:	4b0f      	ldr	r3, [pc, #60]	@ (80012a4 <HAL_Init+0x68>)
 8001268:	699b      	ldr	r3, [r3, #24]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	4a0e      	ldr	r2, [pc, #56]	@ (80012a8 <HAL_Init+0x6c>)
 8001270:	5cd3      	ldrb	r3, [r2, r3]
 8001272:	f003 031f 	and.w	r3, r3, #31
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	fa22 f303 	lsr.w	r3, r2, r3
 800127c:	4a0b      	ldr	r2, [pc, #44]	@ (80012ac <HAL_Init+0x70>)
 800127e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001280:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <HAL_Init+0x74>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001286:	200f      	movs	r0, #15
 8001288:	f000 f814 	bl	80012b4 <HAL_InitTick>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e002      	b.n	800129c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001296:	f7ff fbe1 	bl	8000a5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800129a:	2300      	movs	r3, #0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	58024400 	.word	0x58024400
 80012a8:	080066d0 	.word	0x080066d0
 80012ac:	24000004 	.word	0x24000004
 80012b0:	24000000 	.word	0x24000000

080012b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012bc:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_InitTick+0x60>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e021      	b.n	800130c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80012c8:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <HAL_InitTick+0x64>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <HAL_InitTick+0x60>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4619      	mov	r1, r3
 80012d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012da:	fbb2 f3f3 	udiv	r3, r2, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 f941 	bl	8001566 <HAL_SYSTICK_Config>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00e      	b.n	800130c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d80a      	bhi.n	800130a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f000 f90b 	bl	8001516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001300:	4a06      	ldr	r2, [pc, #24]	@ (800131c <HAL_InitTick+0x68>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001306:	2300      	movs	r3, #0
 8001308:	e000      	b.n	800130c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
}
 800130c:	4618      	mov	r0, r3
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	24000028 	.word	0x24000028
 8001318:	24000000 	.word	0x24000000
 800131c:	24000024 	.word	0x24000024

08001320 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <HAL_IncTick+0x20>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	461a      	mov	r2, r3
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <HAL_IncTick+0x24>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4413      	add	r3, r2
 8001330:	4a04      	ldr	r2, [pc, #16]	@ (8001344 <HAL_IncTick+0x24>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	24000028 	.word	0x24000028
 8001344:	240003bc 	.word	0x240003bc

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b03      	ldr	r3, [pc, #12]	@ (800135c <HAL_GetTick+0x14>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	4618      	mov	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	240003bc 	.word	0x240003bc

08001360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	f003 0307 	and.w	r3, r3, #7
 800136e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001370:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001372:	68db      	ldr	r3, [r3, #12]
 8001374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001376:	68ba      	ldr	r2, [r7, #8]
 8001378:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800137c:	4013      	ands	r3, r2
 800137e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	4313      	orrs	r3, r2
 800138c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138e:	4a04      	ldr	r2, [pc, #16]	@ (80013a0 <__NVIC_SetPriorityGrouping+0x40>)
 8001390:	68bb      	ldr	r3, [r7, #8]
 8001392:	60d3      	str	r3, [r2, #12]
}
 8001394:	bf00      	nop
 8001396:	3714      	adds	r7, #20
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr
 80013a0:	e000ed00 	.word	0xe000ed00
 80013a4:	05fa0000 	.word	0x05fa0000

080013a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013ac:	4b04      	ldr	r3, [pc, #16]	@ (80013c0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f003 0307 	and.w	r3, r3, #7
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	e000ed00 	.word	0xe000ed00

080013c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	db0b      	blt.n	80013ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d6:	88fb      	ldrh	r3, [r7, #6]
 80013d8:	f003 021f 	and.w	r2, r3, #31
 80013dc:	4907      	ldr	r1, [pc, #28]	@ (80013fc <__NVIC_EnableIRQ+0x38>)
 80013de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e2:	095b      	lsrs	r3, r3, #5
 80013e4:	2001      	movs	r0, #1
 80013e6:	fa00 f202 	lsl.w	r2, r0, r2
 80013ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000e100 	.word	0xe000e100

08001400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	6039      	str	r1, [r7, #0]
 800140a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800140c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001410:	2b00      	cmp	r3, #0
 8001412:	db0a      	blt.n	800142a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	b2da      	uxtb	r2, r3
 8001418:	490c      	ldr	r1, [pc, #48]	@ (800144c <__NVIC_SetPriority+0x4c>)
 800141a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141e:	0112      	lsls	r2, r2, #4
 8001420:	b2d2      	uxtb	r2, r2
 8001422:	440b      	add	r3, r1
 8001424:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001428:	e00a      	b.n	8001440 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	b2da      	uxtb	r2, r3
 800142e:	4908      	ldr	r1, [pc, #32]	@ (8001450 <__NVIC_SetPriority+0x50>)
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f003 030f 	and.w	r3, r3, #15
 8001436:	3b04      	subs	r3, #4
 8001438:	0112      	lsls	r2, r2, #4
 800143a:	b2d2      	uxtb	r2, r2
 800143c:	440b      	add	r3, r1
 800143e:	761a      	strb	r2, [r3, #24]
}
 8001440:	bf00      	nop
 8001442:	370c      	adds	r7, #12
 8001444:	46bd      	mov	sp, r7
 8001446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144a:	4770      	bx	lr
 800144c:	e000e100 	.word	0xe000e100
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	@ 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	60f8      	str	r0, [r7, #12]
 800145c:	60b9      	str	r1, [r7, #8]
 800145e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	f1c3 0307 	rsb	r3, r3, #7
 800146e:	2b04      	cmp	r3, #4
 8001470:	bf28      	it	cs
 8001472:	2304      	movcs	r3, #4
 8001474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3304      	adds	r3, #4
 800147a:	2b06      	cmp	r3, #6
 800147c:	d902      	bls.n	8001484 <NVIC_EncodePriority+0x30>
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3b03      	subs	r3, #3
 8001482:	e000      	b.n	8001486 <NVIC_EncodePriority+0x32>
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43da      	mvns	r2, r3
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	401a      	ands	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800149c:	f04f 31ff 	mov.w	r1, #4294967295
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	fa01 f303 	lsl.w	r3, r1, r3
 80014a6:	43d9      	mvns	r1, r3
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	4313      	orrs	r3, r2
         );
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3724      	adds	r7, #36	@ 0x24
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
	...

080014bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	3b01      	subs	r3, #1
 80014c8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014cc:	d301      	bcc.n	80014d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00f      	b.n	80014f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d2:	4a0a      	ldr	r2, [pc, #40]	@ (80014fc <SysTick_Config+0x40>)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014da:	210f      	movs	r1, #15
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295
 80014e0:	f7ff ff8e 	bl	8001400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <SysTick_Config+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ea:	4b04      	ldr	r3, [pc, #16]	@ (80014fc <SysTick_Config+0x40>)
 80014ec:	2207      	movs	r2, #7
 80014ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	e000e010 	.word	0xe000e010

08001500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001508:	6878      	ldr	r0, [r7, #4]
 800150a:	f7ff ff29 	bl	8001360 <__NVIC_SetPriorityGrouping>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b086      	sub	sp, #24
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	60b9      	str	r1, [r7, #8]
 8001520:	607a      	str	r2, [r7, #4]
 8001522:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001524:	f7ff ff40 	bl	80013a8 <__NVIC_GetPriorityGrouping>
 8001528:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	68b9      	ldr	r1, [r7, #8]
 800152e:	6978      	ldr	r0, [r7, #20]
 8001530:	f7ff ff90 	bl	8001454 <NVIC_EncodePriority>
 8001534:	4602      	mov	r2, r0
 8001536:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff ff5f 	bl	8001400 <__NVIC_SetPriority>
}
 8001542:	bf00      	nop
 8001544:	3718      	adds	r7, #24
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001554:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff33 	bl	80013c4 <__NVIC_EnableIRQ>
}
 800155e:	bf00      	nop
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ffa4 	bl	80014bc <SysTick_Config>
 8001574:	4603      	mov	r3, r0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001584:	f3bf 8f5f 	dmb	sy
}
 8001588:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800158a:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <HAL_MPU_Disable+0x28>)
 800158c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800158e:	4a06      	ldr	r2, [pc, #24]	@ (80015a8 <HAL_MPU_Disable+0x28>)
 8001590:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001594:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001596:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <HAL_MPU_Disable+0x2c>)
 8001598:	2200      	movs	r2, #0
 800159a:	605a      	str	r2, [r3, #4]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000ed00 	.word	0xe000ed00
 80015ac:	e000ed90 	.word	0xe000ed90

080015b0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015b8:	4a0b      	ldr	r2, [pc, #44]	@ (80015e8 <HAL_MPU_Enable+0x38>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015c2:	4b0a      	ldr	r3, [pc, #40]	@ (80015ec <HAL_MPU_Enable+0x3c>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c6:	4a09      	ldr	r2, [pc, #36]	@ (80015ec <HAL_MPU_Enable+0x3c>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015cc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed90 	.word	0xe000ed90
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	785a      	ldrb	r2, [r3, #1]
 80015fc:	4b1b      	ldr	r3, [pc, #108]	@ (800166c <HAL_MPU_ConfigRegion+0x7c>)
 80015fe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001600:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <HAL_MPU_ConfigRegion+0x7c>)
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	4a19      	ldr	r2, [pc, #100]	@ (800166c <HAL_MPU_ConfigRegion+0x7c>)
 8001606:	f023 0301 	bic.w	r3, r3, #1
 800160a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800160c:	4a17      	ldr	r2, [pc, #92]	@ (800166c <HAL_MPU_ConfigRegion+0x7c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7b1b      	ldrb	r3, [r3, #12]
 8001618:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	7adb      	ldrb	r3, [r3, #11]
 800161e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001620:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	7a9b      	ldrb	r3, [r3, #10]
 8001626:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001628:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7b5b      	ldrb	r3, [r3, #13]
 800162e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001630:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	7b9b      	ldrb	r3, [r3, #14]
 8001636:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001638:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7bdb      	ldrb	r3, [r3, #15]
 800163e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001640:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	7a5b      	ldrb	r3, [r3, #9]
 8001646:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001648:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	7a1b      	ldrb	r3, [r3, #8]
 800164e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001650:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001652:	687a      	ldr	r2, [r7, #4]
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001658:	4a04      	ldr	r2, [pc, #16]	@ (800166c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800165a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800165c:	6113      	str	r3, [r2, #16]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed90 	.word	0xe000ed90

08001670 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001670:	b480      	push	{r7}
 8001672:	b087      	sub	sp, #28
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	460b      	mov	r3, r1
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800167e:	2300      	movs	r3, #0
 8001680:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e00a      	b.n	80016a2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800168c:	7afb      	ldrb	r3, [r7, #11]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d103      	bne.n	800169a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	605a      	str	r2, [r3, #4]
      break;
 8001698:	e002      	b.n	80016a0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	75fb      	strb	r3, [r7, #23]
      break;
 800169e:	bf00      	nop
  }

  return status;
 80016a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e003      	b.n	80016ca <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80016c8:	2300      	movs	r3, #0
  }
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	0c1b      	lsrs	r3, r3, #16
 80016e6:	f003 0303 	and.w	r3, r3, #3
 80016ea:	617b      	str	r3, [r7, #20]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 031f 	and.w	r3, r3, #31
 80016f4:	2201      	movs	r2, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	613b      	str	r3, [r7, #16]
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
  }
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	011a      	lsls	r2, r3, #4
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <HAL_EXTI_IRQHandler+0x5c>)
 8001702:	4413      	add	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_EXTI_IRQHandler+0x52>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <HAL_EXTI_IRQHandler+0x52>
    {
      hexti->PendingCallback();
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4798      	blx	r3
    }
  }
}
 800172a:	bf00      	nop
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	58000088 	.word	0x58000088

08001738 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001738:	b480      	push	{r7}
 800173a:	b089      	sub	sp, #36	@ 0x24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001746:	4b86      	ldr	r3, [pc, #536]	@ (8001960 <HAL_GPIO_Init+0x228>)
 8001748:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800174a:	e18c      	b.n	8001a66 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	2101      	movs	r1, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa01 f303 	lsl.w	r3, r1, r3
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	2b00      	cmp	r3, #0
 8001760:	f000 817e 	beq.w	8001a60 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b01      	cmp	r3, #1
 800176e:	d005      	beq.n	800177c <HAL_GPIO_Init+0x44>
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f003 0303 	and.w	r3, r3, #3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d130      	bne.n	80017de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	68da      	ldr	r2, [r3, #12]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	fa02 f303 	lsl.w	r3, r2, r3
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017b2:	2201      	movs	r2, #1
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	4013      	ands	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	091b      	lsrs	r3, r3, #4
 80017c8:	f003 0201 	and.w	r2, r3, #1
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	2b03      	cmp	r3, #3
 80017e8:	d017      	beq.n	800181a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	2203      	movs	r2, #3
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	689a      	ldr	r2, [r3, #8]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	005b      	lsls	r3, r3, #1
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0303 	and.w	r3, r3, #3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d123      	bne.n	800186e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	08da      	lsrs	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	3208      	adds	r2, #8
 800182e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f003 0307 	and.w	r3, r3, #7
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	220f      	movs	r2, #15
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	43db      	mvns	r3, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4013      	ands	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f003 0307 	and.w	r3, r3, #7
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4313      	orrs	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	69b9      	ldr	r1, [r7, #24]
 800186a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	2203      	movs	r2, #3
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4013      	ands	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 0203 	and.w	r2, r3, #3
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 80d8 	beq.w	8001a60 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001964 <HAL_GPIO_Init+0x22c>)
 80018b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018b6:	4a2b      	ldr	r2, [pc, #172]	@ (8001964 <HAL_GPIO_Init+0x22c>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018c0:	4b28      	ldr	r3, [pc, #160]	@ (8001964 <HAL_GPIO_Init+0x22c>)
 80018c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ce:	4a26      	ldr	r2, [pc, #152]	@ (8001968 <HAL_GPIO_Init+0x230>)
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a1d      	ldr	r2, [pc, #116]	@ (800196c <HAL_GPIO_Init+0x234>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d04a      	beq.n	8001990 <HAL_GPIO_Init+0x258>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001970 <HAL_GPIO_Init+0x238>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d02b      	beq.n	800195a <HAL_GPIO_Init+0x222>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a1b      	ldr	r2, [pc, #108]	@ (8001974 <HAL_GPIO_Init+0x23c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d025      	beq.n	8001956 <HAL_GPIO_Init+0x21e>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a1a      	ldr	r2, [pc, #104]	@ (8001978 <HAL_GPIO_Init+0x240>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d01f      	beq.n	8001952 <HAL_GPIO_Init+0x21a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a19      	ldr	r2, [pc, #100]	@ (800197c <HAL_GPIO_Init+0x244>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d019      	beq.n	800194e <HAL_GPIO_Init+0x216>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a18      	ldr	r2, [pc, #96]	@ (8001980 <HAL_GPIO_Init+0x248>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d013      	beq.n	800194a <HAL_GPIO_Init+0x212>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a17      	ldr	r2, [pc, #92]	@ (8001984 <HAL_GPIO_Init+0x24c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d00d      	beq.n	8001946 <HAL_GPIO_Init+0x20e>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a16      	ldr	r2, [pc, #88]	@ (8001988 <HAL_GPIO_Init+0x250>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d007      	beq.n	8001942 <HAL_GPIO_Init+0x20a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a15      	ldr	r2, [pc, #84]	@ (800198c <HAL_GPIO_Init+0x254>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d101      	bne.n	800193e <HAL_GPIO_Init+0x206>
 800193a:	2309      	movs	r3, #9
 800193c:	e029      	b.n	8001992 <HAL_GPIO_Init+0x25a>
 800193e:	230a      	movs	r3, #10
 8001940:	e027      	b.n	8001992 <HAL_GPIO_Init+0x25a>
 8001942:	2307      	movs	r3, #7
 8001944:	e025      	b.n	8001992 <HAL_GPIO_Init+0x25a>
 8001946:	2306      	movs	r3, #6
 8001948:	e023      	b.n	8001992 <HAL_GPIO_Init+0x25a>
 800194a:	2305      	movs	r3, #5
 800194c:	e021      	b.n	8001992 <HAL_GPIO_Init+0x25a>
 800194e:	2304      	movs	r3, #4
 8001950:	e01f      	b.n	8001992 <HAL_GPIO_Init+0x25a>
 8001952:	2303      	movs	r3, #3
 8001954:	e01d      	b.n	8001992 <HAL_GPIO_Init+0x25a>
 8001956:	2302      	movs	r3, #2
 8001958:	e01b      	b.n	8001992 <HAL_GPIO_Init+0x25a>
 800195a:	2301      	movs	r3, #1
 800195c:	e019      	b.n	8001992 <HAL_GPIO_Init+0x25a>
 800195e:	bf00      	nop
 8001960:	58000080 	.word	0x58000080
 8001964:	58024400 	.word	0x58024400
 8001968:	58000400 	.word	0x58000400
 800196c:	58020000 	.word	0x58020000
 8001970:	58020400 	.word	0x58020400
 8001974:	58020800 	.word	0x58020800
 8001978:	58020c00 	.word	0x58020c00
 800197c:	58021000 	.word	0x58021000
 8001980:	58021400 	.word	0x58021400
 8001984:	58021800 	.word	0x58021800
 8001988:	58021c00 	.word	0x58021c00
 800198c:	58022400 	.word	0x58022400
 8001990:	2300      	movs	r3, #0
 8001992:	69fa      	ldr	r2, [r7, #28]
 8001994:	f002 0203 	and.w	r2, r2, #3
 8001998:	0092      	lsls	r2, r2, #2
 800199a:	4093      	lsls	r3, r2
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a2:	4938      	ldr	r1, [pc, #224]	@ (8001a84 <HAL_GPIO_Init+0x34c>)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	089b      	lsrs	r3, r3, #2
 80019a8:	3302      	adds	r3, #2
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	4013      	ands	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80019d6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80019de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001a04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	69ba      	ldr	r2, [r7, #24]
 8001a5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	3301      	adds	r3, #1
 8001a64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f47f ae6b 	bne.w	800174c <HAL_GPIO_Init+0x14>
  }
}
 8001a76:	bf00      	nop
 8001a78:	bf00      	nop
 8001a7a:	3724      	adds	r7, #36	@ 0x24
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	58000400 	.word	0x58000400

08001a88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	460b      	mov	r3, r1
 8001a92:	807b      	strh	r3, [r7, #2]
 8001a94:	4613      	mov	r3, r2
 8001a96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a98:	787b      	ldrb	r3, [r7, #1]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001aa4:	e003      	b.n	8001aae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	041a      	lsls	r2, r3, #16
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	619a      	str	r2, [r3, #24]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr

08001aba <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001acc:	887a      	ldrh	r2, [r7, #2]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	041a      	lsls	r2, r3, #16
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43d9      	mvns	r1, r3
 8001ad8:	887b      	ldrh	r3, [r7, #2]
 8001ada:	400b      	ands	r3, r1
 8001adc:	431a      	orrs	r2, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	619a      	str	r2, [r3, #24]
}
 8001ae2:	bf00      	nop
 8001ae4:	3714      	adds	r7, #20
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001af8:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <HAL_PWREx_ConfigSupply+0x70>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0304 	and.w	r3, r3, #4
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d00a      	beq.n	8001b1a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b04:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <HAL_PWREx_ConfigSupply+0x70>)
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d001      	beq.n	8001b16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e01f      	b.n	8001b56 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b16:	2300      	movs	r3, #0
 8001b18:	e01d      	b.n	8001b56 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b1a:	4b11      	ldr	r3, [pc, #68]	@ (8001b60 <HAL_PWREx_ConfigSupply+0x70>)
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	f023 0207 	bic.w	r2, r3, #7
 8001b22:	490f      	ldr	r1, [pc, #60]	@ (8001b60 <HAL_PWREx_ConfigSupply+0x70>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001b2a:	f7ff fc0d 	bl	8001348 <HAL_GetTick>
 8001b2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b30:	e009      	b.n	8001b46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b32:	f7ff fc09 	bl	8001348 <HAL_GetTick>
 8001b36:	4602      	mov	r2, r0
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b40:	d901      	bls.n	8001b46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e007      	b.n	8001b56 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b46:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_PWREx_ConfigSupply+0x70>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b4e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b52:	d1ee      	bne.n	8001b32 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3710      	adds	r7, #16
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	58024800 	.word	0x58024800

08001b64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	@ 0x30
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e3c8      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 8087 	beq.w	8001c92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b84:	4b88      	ldr	r3, [pc, #544]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b8e:	4b86      	ldr	r3, [pc, #536]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b92:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b96:	2b10      	cmp	r3, #16
 8001b98:	d007      	beq.n	8001baa <HAL_RCC_OscConfig+0x46>
 8001b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b9c:	2b18      	cmp	r3, #24
 8001b9e:	d110      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5e>
 8001ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d10b      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001baa:	4b7f      	ldr	r3, [pc, #508]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d06c      	beq.n	8001c90 <HAL_RCC_OscConfig+0x12c>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d168      	bne.n	8001c90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e3a2      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bca:	d106      	bne.n	8001bda <HAL_RCC_OscConfig+0x76>
 8001bcc:	4b76      	ldr	r3, [pc, #472]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a75      	ldr	r2, [pc, #468]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	e02e      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x98>
 8001be2:	4b71      	ldr	r3, [pc, #452]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a70      	ldr	r2, [pc, #448]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001be8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b6e      	ldr	r3, [pc, #440]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a6d      	ldr	r2, [pc, #436]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001bf4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e01d      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c04:	d10c      	bne.n	8001c20 <HAL_RCC_OscConfig+0xbc>
 8001c06:	4b68      	ldr	r3, [pc, #416]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a67      	ldr	r2, [pc, #412]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b65      	ldr	r3, [pc, #404]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a64      	ldr	r2, [pc, #400]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
 8001c1e:	e00b      	b.n	8001c38 <HAL_RCC_OscConfig+0xd4>
 8001c20:	4b61      	ldr	r3, [pc, #388]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a60      	ldr	r2, [pc, #384]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c2a:	6013      	str	r3, [r2, #0]
 8001c2c:	4b5e      	ldr	r3, [pc, #376]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a5d      	ldr	r2, [pc, #372]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d013      	beq.n	8001c68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c40:	f7ff fb82 	bl	8001348 <HAL_GetTick>
 8001c44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c48:	f7ff fb7e 	bl	8001348 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b64      	cmp	r3, #100	@ 0x64
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e356      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c5a:	4b53      	ldr	r3, [pc, #332]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0xe4>
 8001c66:	e014      	b.n	8001c92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c68:	f7ff fb6e 	bl	8001348 <HAL_GetTick>
 8001c6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c70:	f7ff fb6a 	bl	8001348 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b64      	cmp	r3, #100	@ 0x64
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e342      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c82:	4b49      	ldr	r3, [pc, #292]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d1f0      	bne.n	8001c70 <HAL_RCC_OscConfig+0x10c>
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 808c 	beq.w	8001db8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ca0:	4b41      	ldr	r3, [pc, #260]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ca8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001caa:	4b3f      	ldr	r3, [pc, #252]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d007      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x162>
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
 8001cb8:	2b18      	cmp	r3, #24
 8001cba:	d137      	bne.n	8001d2c <HAL_RCC_OscConfig+0x1c8>
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d132      	bne.n	8001d2c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc6:	4b38      	ldr	r3, [pc, #224]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d005      	beq.n	8001cde <HAL_RCC_OscConfig+0x17a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e314      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cde:	4b32      	ldr	r3, [pc, #200]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 0219 	bic.w	r2, r3, #25
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	492f      	ldr	r1, [pc, #188]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7ff fb2a 	bl	8001348 <HAL_GetTick>
 8001cf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7ff fb26 	bl	8001348 <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e2fe      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d0a:	4b27      	ldr	r3, [pc, #156]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d0f0      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d16:	4b24      	ldr	r3, [pc, #144]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	061b      	lsls	r3, r3, #24
 8001d24:	4920      	ldr	r1, [pc, #128]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2a:	e045      	b.n	8001db8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d026      	beq.n	8001d82 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d34:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 0219 	bic.w	r2, r3, #25
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4919      	ldr	r1, [pc, #100]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff faff 	bl	8001348 <HAL_GetTick>
 8001d4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4e:	f7ff fafb 	bl	8001348 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e2d3      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d60:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0304 	and.w	r3, r3, #4
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	490b      	ldr	r1, [pc, #44]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
 8001d80:	e01a      	b.n	8001db8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d82:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a08      	ldr	r2, [pc, #32]	@ (8001da8 <HAL_RCC_OscConfig+0x244>)
 8001d88:	f023 0301 	bic.w	r3, r3, #1
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8e:	f7ff fadb 	bl	8001348 <HAL_GetTick>
 8001d92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001d94:	e00a      	b.n	8001dac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d96:	f7ff fad7 	bl	8001348 <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d903      	bls.n	8001dac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e2af      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
 8001da8:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dac:	4b96      	ldr	r3, [pc, #600]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1ee      	bne.n	8001d96 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d06a      	beq.n	8001e9a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dc4:	4b90      	ldr	r3, [pc, #576]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dcc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dce:	4b8e      	ldr	r3, [pc, #568]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dd2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d007      	beq.n	8001dea <HAL_RCC_OscConfig+0x286>
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	2b18      	cmp	r3, #24
 8001dde:	d11b      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2b4>
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d116      	bne.n	8001e18 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001dea:	4b87      	ldr	r3, [pc, #540]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d005      	beq.n	8001e02 <HAL_RCC_OscConfig+0x29e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69db      	ldr	r3, [r3, #28]
 8001dfa:	2b80      	cmp	r3, #128	@ 0x80
 8001dfc:	d001      	beq.n	8001e02 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e282      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e02:	4b81      	ldr	r3, [pc, #516]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a1b      	ldr	r3, [r3, #32]
 8001e0e:	061b      	lsls	r3, r3, #24
 8001e10:	497d      	ldr	r1, [pc, #500]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001e12:	4313      	orrs	r3, r2
 8001e14:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e16:	e040      	b.n	8001e9a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69db      	ldr	r3, [r3, #28]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d023      	beq.n	8001e68 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e20:	4b79      	ldr	r3, [pc, #484]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a78      	ldr	r2, [pc, #480]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001e26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fa8c 	bl	8001348 <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e34:	f7ff fa88 	bl	8001348 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e260      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e46:	4b70      	ldr	r3, [pc, #448]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e52:	4b6d      	ldr	r3, [pc, #436]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	061b      	lsls	r3, r3, #24
 8001e60:	4969      	ldr	r1, [pc, #420]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60cb      	str	r3, [r1, #12]
 8001e66:	e018      	b.n	8001e9a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001e68:	4b67      	ldr	r3, [pc, #412]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a66      	ldr	r2, [pc, #408]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001e6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff fa68 	bl	8001348 <HAL_GetTick>
 8001e78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001e7c:	f7ff fa64 	bl	8001348 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e23c      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001e8e:	4b5e      	ldr	r3, [pc, #376]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d036      	beq.n	8001f14 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d019      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eae:	4b56      	ldr	r3, [pc, #344]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001eb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb2:	4a55      	ldr	r2, [pc, #340]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001eb4:	f043 0301 	orr.w	r3, r3, #1
 8001eb8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eba:	f7ff fa45 	bl	8001348 <HAL_GetTick>
 8001ebe:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ec2:	f7ff fa41 	bl	8001348 <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e219      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ed4:	4b4c      	ldr	r3, [pc, #304]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001ed6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x35e>
 8001ee0:	e018      	b.n	8001f14 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ee2:	4b49      	ldr	r3, [pc, #292]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ee6:	4a48      	ldr	r2, [pc, #288]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001ee8:	f023 0301 	bic.w	r3, r3, #1
 8001eec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eee:	f7ff fa2b 	bl	8001348 <HAL_GetTick>
 8001ef2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef6:	f7ff fa27 	bl	8001348 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e1ff      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f08:	4b3f      	ldr	r3, [pc, #252]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001f0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f0      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0320 	and.w	r3, r3, #32
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d036      	beq.n	8001f8e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d019      	beq.n	8001f5c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f28:	4b37      	ldr	r3, [pc, #220]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a36      	ldr	r2, [pc, #216]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001f2e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f32:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f34:	f7ff fa08 	bl	8001348 <HAL_GetTick>
 8001f38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f3c:	f7ff fa04 	bl	8001348 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e1dc      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x3d8>
 8001f5a:	e018      	b.n	8001f8e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a29      	ldr	r2, [pc, #164]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001f62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001f68:	f7ff f9ee 	bl	8001348 <HAL_GetTick>
 8001f6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f70:	f7ff f9ea 	bl	8001348 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e1c2      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001f82:	4b21      	ldr	r3, [pc, #132]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 8086 	beq.w	80020a8 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800200c <HAL_RCC_OscConfig+0x4a8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800200c <HAL_RCC_OscConfig+0x4a8>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fa8:	f7ff f9ce 	bl	8001348 <HAL_GetTick>
 8001fac:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb0:	f7ff f9ca 	bl	8001348 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b64      	cmp	r3, #100	@ 0x64
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e1a2      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001fc2:	4b12      	ldr	r3, [pc, #72]	@ (800200c <HAL_RCC_OscConfig+0x4a8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d0f0      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d106      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x480>
 8001fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fda:	4a0b      	ldr	r2, [pc, #44]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001fdc:	f043 0301 	orr.w	r3, r3, #1
 8001fe0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe2:	e032      	b.n	800204a <HAL_RCC_OscConfig+0x4e6>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d111      	bne.n	8002010 <HAL_RCC_OscConfig+0x4ac>
 8001fec:	4b06      	ldr	r3, [pc, #24]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ff0:	4a05      	ldr	r2, [pc, #20]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001ff2:	f023 0301 	bic.w	r3, r3, #1
 8001ff6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffc:	4a02      	ldr	r2, [pc, #8]	@ (8002008 <HAL_RCC_OscConfig+0x4a4>)
 8001ffe:	f023 0304 	bic.w	r3, r3, #4
 8002002:	6713      	str	r3, [r2, #112]	@ 0x70
 8002004:	e021      	b.n	800204a <HAL_RCC_OscConfig+0x4e6>
 8002006:	bf00      	nop
 8002008:	58024400 	.word	0x58024400
 800200c:	58024800 	.word	0x58024800
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2b05      	cmp	r3, #5
 8002016:	d10c      	bne.n	8002032 <HAL_RCC_OscConfig+0x4ce>
 8002018:	4b83      	ldr	r3, [pc, #524]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 800201a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800201c:	4a82      	ldr	r2, [pc, #520]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 800201e:	f043 0304 	orr.w	r3, r3, #4
 8002022:	6713      	str	r3, [r2, #112]	@ 0x70
 8002024:	4b80      	ldr	r3, [pc, #512]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 8002026:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002028:	4a7f      	ldr	r2, [pc, #508]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002030:	e00b      	b.n	800204a <HAL_RCC_OscConfig+0x4e6>
 8002032:	4b7d      	ldr	r3, [pc, #500]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 8002034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002036:	4a7c      	ldr	r2, [pc, #496]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 8002038:	f023 0301 	bic.w	r3, r3, #1
 800203c:	6713      	str	r3, [r2, #112]	@ 0x70
 800203e:	4b7a      	ldr	r3, [pc, #488]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 8002040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002042:	4a79      	ldr	r2, [pc, #484]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d015      	beq.n	800207e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002052:	f7ff f979 	bl	8001348 <HAL_GetTick>
 8002056:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002058:	e00a      	b.n	8002070 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7ff f975 	bl	8001348 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002068:	4293      	cmp	r3, r2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e14b      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002070:	4b6d      	ldr	r3, [pc, #436]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 8002072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002074:	f003 0302 	and.w	r3, r3, #2
 8002078:	2b00      	cmp	r3, #0
 800207a:	d0ee      	beq.n	800205a <HAL_RCC_OscConfig+0x4f6>
 800207c:	e014      	b.n	80020a8 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800207e:	f7ff f963 	bl	8001348 <HAL_GetTick>
 8002082:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7ff f95f 	bl	8001348 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e135      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800209c:	4b62      	ldr	r3, [pc, #392]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d1ee      	bne.n	8002086 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f000 812a 	beq.w	8002306 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80020b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020ba:	2b18      	cmp	r3, #24
 80020bc:	f000 80ba 	beq.w	8002234 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	f040 8095 	bne.w	80021f4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ca:	4b57      	ldr	r3, [pc, #348]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a56      	ldr	r2, [pc, #344]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80020d0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7ff f937 	bl	8001348 <HAL_GetTick>
 80020da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020de:	f7ff f933 	bl	8001348 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e10b      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f0      	bne.n	80020de <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80020fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002100:	4b4a      	ldr	r3, [pc, #296]	@ (800222c <HAL_RCC_OscConfig+0x6c8>)
 8002102:	4013      	ands	r3, r2
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800210c:	0112      	lsls	r2, r2, #4
 800210e:	430a      	orrs	r2, r1
 8002110:	4945      	ldr	r1, [pc, #276]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 8002112:	4313      	orrs	r3, r2
 8002114:	628b      	str	r3, [r1, #40]	@ 0x28
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	3b01      	subs	r3, #1
 800211c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002124:	3b01      	subs	r3, #1
 8002126:	025b      	lsls	r3, r3, #9
 8002128:	b29b      	uxth	r3, r3
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002130:	3b01      	subs	r3, #1
 8002132:	041b      	lsls	r3, r3, #16
 8002134:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800213e:	3b01      	subs	r3, #1
 8002140:	061b      	lsls	r3, r3, #24
 8002142:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002146:	4938      	ldr	r1, [pc, #224]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 8002148:	4313      	orrs	r3, r2
 800214a:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800214c:	4b36      	ldr	r3, [pc, #216]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 800214e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002150:	4a35      	ldr	r2, [pc, #212]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 8002152:	f023 0301 	bic.w	r3, r3, #1
 8002156:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002158:	4b33      	ldr	r3, [pc, #204]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 800215a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800215c:	4b34      	ldr	r3, [pc, #208]	@ (8002230 <HAL_RCC_OscConfig+0x6cc>)
 800215e:	4013      	ands	r3, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002164:	00d2      	lsls	r2, r2, #3
 8002166:	4930      	ldr	r1, [pc, #192]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 8002168:	4313      	orrs	r3, r2
 800216a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800216c:	4b2e      	ldr	r3, [pc, #184]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 800216e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002170:	f023 020c 	bic.w	r2, r3, #12
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002178:	492b      	ldr	r1, [pc, #172]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800217e:	4b2a      	ldr	r3, [pc, #168]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	f023 0202 	bic.w	r2, r3, #2
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800218a:	4927      	ldr	r1, [pc, #156]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 800218c:	4313      	orrs	r3, r2
 800218e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002190:	4b25      	ldr	r3, [pc, #148]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 8002192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002194:	4a24      	ldr	r2, [pc, #144]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800219c:	4b22      	ldr	r3, [pc, #136]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 800219e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021a0:	4a21      	ldr	r2, [pc, #132]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80021a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80021a8:	4b1f      	ldr	r3, [pc, #124]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80021ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80021b4:	4b1c      	ldr	r3, [pc, #112]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80021b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021c0:	4b19      	ldr	r3, [pc, #100]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a18      	ldr	r2, [pc, #96]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80021c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7ff f8bc 	bl	8001348 <HAL_GetTick>
 80021d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021d4:	f7ff f8b8 	bl	8001348 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e090      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021e6:	4b10      	ldr	r3, [pc, #64]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0f0      	beq.n	80021d4 <HAL_RCC_OscConfig+0x670>
 80021f2:	e088      	b.n	8002306 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0b      	ldr	r2, [pc, #44]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 80021fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002200:	f7ff f8a2 	bl	8001348 <HAL_GetTick>
 8002204:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002206:	e008      	b.n	800221a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002208:	f7ff f89e 	bl	8001348 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	2b02      	cmp	r3, #2
 8002214:	d901      	bls.n	800221a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e076      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800221a:	4b03      	ldr	r3, [pc, #12]	@ (8002228 <HAL_RCC_OscConfig+0x6c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d1f0      	bne.n	8002208 <HAL_RCC_OscConfig+0x6a4>
 8002226:	e06e      	b.n	8002306 <HAL_RCC_OscConfig+0x7a2>
 8002228:	58024400 	.word	0x58024400
 800222c:	fffffc0c 	.word	0xfffffc0c
 8002230:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002234:	4b36      	ldr	r3, [pc, #216]	@ (8002310 <HAL_RCC_OscConfig+0x7ac>)
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800223a:	4b35      	ldr	r3, [pc, #212]	@ (8002310 <HAL_RCC_OscConfig+0x7ac>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002244:	2b01      	cmp	r3, #1
 8002246:	d031      	beq.n	80022ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f003 0203 	and.w	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d12a      	bne.n	80022ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d122      	bne.n	80022ac <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d11a      	bne.n	80022ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	0a5b      	lsrs	r3, r3, #9
 800227a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002282:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002284:	429a      	cmp	r2, r3
 8002286:	d111      	bne.n	80022ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	0c1b      	lsrs	r3, r3, #16
 800228c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002294:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002296:	429a      	cmp	r2, r3
 8002298:	d108      	bne.n	80022ac <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	0e1b      	lsrs	r3, r3, #24
 800229e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e02b      	b.n	8002308 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80022b0:	4b17      	ldr	r3, [pc, #92]	@ (8002310 <HAL_RCC_OscConfig+0x7ac>)
 80022b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80022ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d01f      	beq.n	8002306 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80022c6:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <HAL_RCC_OscConfig+0x7ac>)
 80022c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ca:	4a11      	ldr	r2, [pc, #68]	@ (8002310 <HAL_RCC_OscConfig+0x7ac>)
 80022cc:	f023 0301 	bic.w	r3, r3, #1
 80022d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80022d2:	f7ff f839 	bl	8001348 <HAL_GetTick>
 80022d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80022d8:	bf00      	nop
 80022da:	f7ff f835 	bl	8001348 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d0f9      	beq.n	80022da <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002310 <HAL_RCC_OscConfig+0x7ac>)
 80022e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <HAL_RCC_OscConfig+0x7b0>)
 80022ec:	4013      	ands	r3, r2
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022f2:	00d2      	lsls	r2, r2, #3
 80022f4:	4906      	ldr	r1, [pc, #24]	@ (8002310 <HAL_RCC_OscConfig+0x7ac>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80022fa:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <HAL_RCC_OscConfig+0x7ac>)
 80022fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fe:	4a04      	ldr	r2, [pc, #16]	@ (8002310 <HAL_RCC_OscConfig+0x7ac>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3730      	adds	r7, #48	@ 0x30
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	58024400 	.word	0x58024400
 8002314:	ffff0007 	.word	0xffff0007

08002318 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b086      	sub	sp, #24
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e19c      	b.n	8002666 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800232c:	4b8a      	ldr	r3, [pc, #552]	@ (8002558 <HAL_RCC_ClockConfig+0x240>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 030f 	and.w	r3, r3, #15
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d910      	bls.n	800235c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233a:	4b87      	ldr	r3, [pc, #540]	@ (8002558 <HAL_RCC_ClockConfig+0x240>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 020f 	bic.w	r2, r3, #15
 8002342:	4985      	ldr	r1, [pc, #532]	@ (8002558 <HAL_RCC_ClockConfig+0x240>)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800234a:	4b83      	ldr	r3, [pc, #524]	@ (8002558 <HAL_RCC_ClockConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	683a      	ldr	r2, [r7, #0]
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e184      	b.n	8002666 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0304 	and.w	r3, r3, #4
 8002364:	2b00      	cmp	r3, #0
 8002366:	d010      	beq.n	800238a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	4b7b      	ldr	r3, [pc, #492]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002374:	429a      	cmp	r2, r3
 8002376:	d908      	bls.n	800238a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002378:	4b78      	ldr	r3, [pc, #480]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	4975      	ldr	r1, [pc, #468]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 8002386:	4313      	orrs	r3, r2
 8002388:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	2b00      	cmp	r3, #0
 8002394:	d010      	beq.n	80023b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	4b70      	ldr	r3, [pc, #448]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d908      	bls.n	80023b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80023a6:	4b6d      	ldr	r3, [pc, #436]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	496a      	ldr	r1, [pc, #424]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0310 	and.w	r3, r3, #16
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d010      	beq.n	80023e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	699a      	ldr	r2, [r3, #24]
 80023c8:	4b64      	ldr	r3, [pc, #400]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80023d0:	429a      	cmp	r2, r3
 80023d2:	d908      	bls.n	80023e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023d4:	4b61      	ldr	r3, [pc, #388]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	495e      	ldr	r1, [pc, #376]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0320 	and.w	r3, r3, #32
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d010      	beq.n	8002414 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	4b59      	ldr	r3, [pc, #356]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023fe:	429a      	cmp	r2, r3
 8002400:	d908      	bls.n	8002414 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002402:	4b56      	ldr	r3, [pc, #344]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69db      	ldr	r3, [r3, #28]
 800240e:	4953      	ldr	r1, [pc, #332]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 8002410:	4313      	orrs	r3, r2
 8002412:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0302 	and.w	r3, r3, #2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d010      	beq.n	8002442 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	4b4d      	ldr	r3, [pc, #308]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f003 030f 	and.w	r3, r3, #15
 800242c:	429a      	cmp	r2, r3
 800242e:	d908      	bls.n	8002442 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002430:	4b4a      	ldr	r3, [pc, #296]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f023 020f 	bic.w	r2, r3, #15
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4947      	ldr	r1, [pc, #284]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 800243e:	4313      	orrs	r3, r2
 8002440:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	2b00      	cmp	r3, #0
 800244c:	d055      	beq.n	80024fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800244e:	4b43      	ldr	r3, [pc, #268]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4940      	ldr	r1, [pc, #256]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 800245c:	4313      	orrs	r3, r2
 800245e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d107      	bne.n	8002478 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002468:	4b3c      	ldr	r3, [pc, #240]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d121      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0f6      	b.n	8002666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d107      	bne.n	8002490 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002480:	4b36      	ldr	r3, [pc, #216]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d115      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0ea      	b.n	8002666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d107      	bne.n	80024a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002498:	4b30      	ldr	r3, [pc, #192]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d109      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e0de      	b.n	8002666 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024a8:	4b2c      	ldr	r3, [pc, #176]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e0d6      	b.n	8002666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024b8:	4b28      	ldr	r3, [pc, #160]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f023 0207 	bic.w	r2, r3, #7
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	4925      	ldr	r1, [pc, #148]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024ca:	f7fe ff3d 	bl	8001348 <HAL_GetTick>
 80024ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d0:	e00a      	b.n	80024e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d2:	f7fe ff39 	bl	8001348 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e0be      	b.n	8002666 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e8:	4b1c      	ldr	r3, [pc, #112]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	00db      	lsls	r3, r3, #3
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d1eb      	bne.n	80024d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d010      	beq.n	8002528 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	4b14      	ldr	r3, [pc, #80]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	f003 030f 	and.w	r3, r3, #15
 8002512:	429a      	cmp	r2, r3
 8002514:	d208      	bcs.n	8002528 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002516:	4b11      	ldr	r3, [pc, #68]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 8002518:	699b      	ldr	r3, [r3, #24]
 800251a:	f023 020f 	bic.w	r2, r3, #15
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	490e      	ldr	r1, [pc, #56]	@ (800255c <HAL_RCC_ClockConfig+0x244>)
 8002524:	4313      	orrs	r3, r2
 8002526:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002528:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <HAL_RCC_ClockConfig+0x240>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	683a      	ldr	r2, [r7, #0]
 8002532:	429a      	cmp	r2, r3
 8002534:	d214      	bcs.n	8002560 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002536:	4b08      	ldr	r3, [pc, #32]	@ (8002558 <HAL_RCC_ClockConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f023 020f 	bic.w	r2, r3, #15
 800253e:	4906      	ldr	r1, [pc, #24]	@ (8002558 <HAL_RCC_ClockConfig+0x240>)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	4313      	orrs	r3, r2
 8002544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b04      	ldr	r3, [pc, #16]	@ (8002558 <HAL_RCC_ClockConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 030f 	and.w	r3, r3, #15
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d005      	beq.n	8002560 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e086      	b.n	8002666 <HAL_RCC_ClockConfig+0x34e>
 8002558:	52002000 	.word	0x52002000
 800255c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d010      	beq.n	800258e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	4b3f      	ldr	r3, [pc, #252]	@ (8002670 <HAL_RCC_ClockConfig+0x358>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002578:	429a      	cmp	r2, r3
 800257a:	d208      	bcs.n	800258e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800257c:	4b3c      	ldr	r3, [pc, #240]	@ (8002670 <HAL_RCC_ClockConfig+0x358>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	4939      	ldr	r1, [pc, #228]	@ (8002670 <HAL_RCC_ClockConfig+0x358>)
 800258a:	4313      	orrs	r3, r2
 800258c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d010      	beq.n	80025bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	695a      	ldr	r2, [r3, #20]
 800259e:	4b34      	ldr	r3, [pc, #208]	@ (8002670 <HAL_RCC_ClockConfig+0x358>)
 80025a0:	69db      	ldr	r3, [r3, #28]
 80025a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d208      	bcs.n	80025bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025aa:	4b31      	ldr	r3, [pc, #196]	@ (8002670 <HAL_RCC_ClockConfig+0x358>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	492e      	ldr	r1, [pc, #184]	@ (8002670 <HAL_RCC_ClockConfig+0x358>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0310 	and.w	r3, r3, #16
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d010      	beq.n	80025ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	699a      	ldr	r2, [r3, #24]
 80025cc:	4b28      	ldr	r3, [pc, #160]	@ (8002670 <HAL_RCC_ClockConfig+0x358>)
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d208      	bcs.n	80025ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80025d8:	4b25      	ldr	r3, [pc, #148]	@ (8002670 <HAL_RCC_ClockConfig+0x358>)
 80025da:	69db      	ldr	r3, [r3, #28]
 80025dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	699b      	ldr	r3, [r3, #24]
 80025e4:	4922      	ldr	r1, [pc, #136]	@ (8002670 <HAL_RCC_ClockConfig+0x358>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d010      	beq.n	8002618 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002670 <HAL_RCC_ClockConfig+0x358>)
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002602:	429a      	cmp	r2, r3
 8002604:	d208      	bcs.n	8002618 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002606:	4b1a      	ldr	r3, [pc, #104]	@ (8002670 <HAL_RCC_ClockConfig+0x358>)
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69db      	ldr	r3, [r3, #28]
 8002612:	4917      	ldr	r1, [pc, #92]	@ (8002670 <HAL_RCC_ClockConfig+0x358>)
 8002614:	4313      	orrs	r3, r2
 8002616:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002618:	f000 f834 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 800261c:	4602      	mov	r2, r0
 800261e:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <HAL_RCC_ClockConfig+0x358>)
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	4912      	ldr	r1, [pc, #72]	@ (8002674 <HAL_RCC_ClockConfig+0x35c>)
 800262a:	5ccb      	ldrb	r3, [r1, r3]
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
 8002634:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002636:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <HAL_RCC_ClockConfig+0x358>)
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <HAL_RCC_ClockConfig+0x35c>)
 8002640:	5cd3      	ldrb	r3, [r2, r3]
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
 800264c:	4a0a      	ldr	r2, [pc, #40]	@ (8002678 <HAL_RCC_ClockConfig+0x360>)
 800264e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002650:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <HAL_RCC_ClockConfig+0x364>)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002656:	4b0a      	ldr	r3, [pc, #40]	@ (8002680 <HAL_RCC_ClockConfig+0x368>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe fe2a 	bl	80012b4 <HAL_InitTick>
 8002660:	4603      	mov	r3, r0
 8002662:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3718      	adds	r7, #24
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	58024400 	.word	0x58024400
 8002674:	080066d0 	.word	0x080066d0
 8002678:	24000004 	.word	0x24000004
 800267c:	24000000 	.word	0x24000000
 8002680:	24000024 	.word	0x24000024

08002684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	@ 0x24
 8002688:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800268a:	4bb3      	ldr	r3, [pc, #716]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002692:	2b18      	cmp	r3, #24
 8002694:	f200 8155 	bhi.w	8002942 <HAL_RCC_GetSysClockFreq+0x2be>
 8002698:	a201      	add	r2, pc, #4	@ (adr r2, 80026a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800269a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800269e:	bf00      	nop
 80026a0:	08002705 	.word	0x08002705
 80026a4:	08002943 	.word	0x08002943
 80026a8:	08002943 	.word	0x08002943
 80026ac:	08002943 	.word	0x08002943
 80026b0:	08002943 	.word	0x08002943
 80026b4:	08002943 	.word	0x08002943
 80026b8:	08002943 	.word	0x08002943
 80026bc:	08002943 	.word	0x08002943
 80026c0:	0800272b 	.word	0x0800272b
 80026c4:	08002943 	.word	0x08002943
 80026c8:	08002943 	.word	0x08002943
 80026cc:	08002943 	.word	0x08002943
 80026d0:	08002943 	.word	0x08002943
 80026d4:	08002943 	.word	0x08002943
 80026d8:	08002943 	.word	0x08002943
 80026dc:	08002943 	.word	0x08002943
 80026e0:	08002731 	.word	0x08002731
 80026e4:	08002943 	.word	0x08002943
 80026e8:	08002943 	.word	0x08002943
 80026ec:	08002943 	.word	0x08002943
 80026f0:	08002943 	.word	0x08002943
 80026f4:	08002943 	.word	0x08002943
 80026f8:	08002943 	.word	0x08002943
 80026fc:	08002943 	.word	0x08002943
 8002700:	08002737 	.word	0x08002737
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002704:	4b94      	ldr	r3, [pc, #592]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0320 	and.w	r3, r3, #32
 800270c:	2b00      	cmp	r3, #0
 800270e:	d009      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002710:	4b91      	ldr	r3, [pc, #580]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	08db      	lsrs	r3, r3, #3
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	4a90      	ldr	r2, [pc, #576]	@ (800295c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800271c:	fa22 f303 	lsr.w	r3, r2, r3
 8002720:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002722:	e111      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002724:	4b8d      	ldr	r3, [pc, #564]	@ (800295c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002726:	61bb      	str	r3, [r7, #24]
      break;
 8002728:	e10e      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800272a:	4b8d      	ldr	r3, [pc, #564]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800272c:	61bb      	str	r3, [r7, #24]
      break;
 800272e:	e10b      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002730:	4b8c      	ldr	r3, [pc, #560]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002732:	61bb      	str	r3, [r7, #24]
      break;
 8002734:	e108      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002736:	4b88      	ldr	r3, [pc, #544]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002740:	4b85      	ldr	r3, [pc, #532]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800274a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800274c:	4b82      	ldr	r3, [pc, #520]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002756:	4b80      	ldr	r3, [pc, #512]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275a:	08db      	lsrs	r3, r3, #3
 800275c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	fb02 f303 	mul.w	r3, r2, r3
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800276e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80e1 	beq.w	800293c <HAL_RCC_GetSysClockFreq+0x2b8>
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2b02      	cmp	r3, #2
 800277e:	f000 8083 	beq.w	8002888 <HAL_RCC_GetSysClockFreq+0x204>
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	2b02      	cmp	r3, #2
 8002786:	f200 80a1 	bhi.w	80028cc <HAL_RCC_GetSysClockFreq+0x248>
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_RCC_GetSysClockFreq+0x114>
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d056      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002796:	e099      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002798:	4b6f      	ldr	r3, [pc, #444]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0320 	and.w	r3, r3, #32
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d02d      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	08db      	lsrs	r3, r3, #3
 80027aa:	f003 0303 	and.w	r3, r3, #3
 80027ae:	4a6b      	ldr	r2, [pc, #428]	@ (800295c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027b0:	fa22 f303 	lsr.w	r3, r2, r3
 80027b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	ee07 3a90 	vmov	s15, r3
 80027bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	ee07 3a90 	vmov	s15, r3
 80027c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ce:	4b62      	ldr	r3, [pc, #392]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027d6:	ee07 3a90 	vmov	s15, r3
 80027da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027de:	ed97 6a02 	vldr	s12, [r7, #8]
 80027e2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80027fe:	e087      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800296c <HAL_RCC_GetSysClockFreq+0x2e8>
 800280e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002812:	4b51      	ldr	r3, [pc, #324]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800281a:	ee07 3a90 	vmov	s15, r3
 800281e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002822:	ed97 6a02 	vldr	s12, [r7, #8]
 8002826:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002968 <HAL_RCC_GetSysClockFreq+0x2e4>
 800282a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800282e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800283a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800283e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002842:	e065      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800284e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002970 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002856:	4b40      	ldr	r3, [pc, #256]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800285e:	ee07 3a90 	vmov	s15, r3
 8002862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002866:	ed97 6a02 	vldr	s12, [r7, #8]
 800286a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002968 <HAL_RCC_GetSysClockFreq+0x2e4>
 800286e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800287a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800287e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002886:	e043      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	ee07 3a90 	vmov	s15, r3
 800288e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002892:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002974 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800289a:	4b2f      	ldr	r3, [pc, #188]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028a2:	ee07 3a90 	vmov	s15, r3
 80028a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80028ae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028ca:	e021      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	ee07 3a90 	vmov	s15, r3
 80028d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002970 <HAL_RCC_GetSysClockFreq+0x2ec>
 80028da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028de:	4b1e      	ldr	r3, [pc, #120]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e6:	ee07 3a90 	vmov	s15, r3
 80028ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80028f2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800290e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002910:	4b11      	ldr	r3, [pc, #68]	@ (8002958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002914:	0a5b      	lsrs	r3, r3, #9
 8002916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800291a:	3301      	adds	r3, #1
 800291c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	ee07 3a90 	vmov	s15, r3
 8002924:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002928:	edd7 6a07 	vldr	s13, [r7, #28]
 800292c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002934:	ee17 3a90 	vmov	r3, s15
 8002938:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800293a:	e005      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	61bb      	str	r3, [r7, #24]
      break;
 8002940:	e002      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002942:	4b07      	ldr	r3, [pc, #28]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002944:	61bb      	str	r3, [r7, #24]
      break;
 8002946:	bf00      	nop
  }

  return sysclockfreq;
 8002948:	69bb      	ldr	r3, [r7, #24]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3724      	adds	r7, #36	@ 0x24
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	58024400 	.word	0x58024400
 800295c:	03d09000 	.word	0x03d09000
 8002960:	003d0900 	.word	0x003d0900
 8002964:	007a1200 	.word	0x007a1200
 8002968:	46000000 	.word	0x46000000
 800296c:	4c742400 	.word	0x4c742400
 8002970:	4a742400 	.word	0x4a742400
 8002974:	4af42400 	.word	0x4af42400

08002978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b082      	sub	sp, #8
 800297c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800297e:	f7ff fe81 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8002982:	4602      	mov	r2, r0
 8002984:	4b10      	ldr	r3, [pc, #64]	@ (80029c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	490f      	ldr	r1, [pc, #60]	@ (80029cc <HAL_RCC_GetHCLKFreq+0x54>)
 8002990:	5ccb      	ldrb	r3, [r1, r3]
 8002992:	f003 031f 	and.w	r3, r3, #31
 8002996:	fa22 f303 	lsr.w	r3, r2, r3
 800299a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800299c:	4b0a      	ldr	r3, [pc, #40]	@ (80029c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	4a09      	ldr	r2, [pc, #36]	@ (80029cc <HAL_RCC_GetHCLKFreq+0x54>)
 80029a6:	5cd3      	ldrb	r3, [r2, r3]
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	fa22 f303 	lsr.w	r3, r2, r3
 80029b2:	4a07      	ldr	r2, [pc, #28]	@ (80029d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80029b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029b6:	4a07      	ldr	r2, [pc, #28]	@ (80029d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80029bc:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80029be:	681b      	ldr	r3, [r3, #0]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3708      	adds	r7, #8
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	58024400 	.word	0x58024400
 80029cc:	080066d0 	.word	0x080066d0
 80029d0:	24000004 	.word	0x24000004
 80029d4:	24000000 	.word	0x24000000

080029d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80029dc:	f7ff ffcc 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 80029e0:	4602      	mov	r2, r0
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	4904      	ldr	r1, [pc, #16]	@ (8002a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029ee:	5ccb      	ldrb	r3, [r1, r3]
 80029f0:	f003 031f 	and.w	r3, r3, #31
 80029f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	58024400 	.word	0x58024400
 8002a00:	080066d0 	.word	0x080066d0

08002a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002a08:	f7ff ffb6 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	0a1b      	lsrs	r3, r3, #8
 8002a14:	f003 0307 	and.w	r3, r3, #7
 8002a18:	4904      	ldr	r1, [pc, #16]	@ (8002a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a1a:	5ccb      	ldrb	r3, [r1, r3]
 8002a1c:	f003 031f 	and.w	r3, r3, #31
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	58024400 	.word	0x58024400
 8002a2c:	080066d0 	.word	0x080066d0

08002a30 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002a34:	f7ff ffa0 	bl	8002978 <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	091b      	lsrs	r3, r3, #4
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4904      	ldr	r1, [pc, #16]	@ (8002a58 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	58024400 	.word	0x58024400
 8002a58:	080066d0 	.word	0x080066d0

08002a5c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b089      	sub	sp, #36	@ 0x24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a64:	4ba1      	ldr	r3, [pc, #644]	@ (8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a68:	f003 0303 	and.w	r3, r3, #3
 8002a6c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002a6e:	4b9f      	ldr	r3, [pc, #636]	@ (8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a72:	0b1b      	lsrs	r3, r3, #12
 8002a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a78:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002a7a:	4b9c      	ldr	r3, [pc, #624]	@ (8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a7e:	091b      	lsrs	r3, r3, #4
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002a86:	4b99      	ldr	r3, [pc, #612]	@ (8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8a:	08db      	lsrs	r3, r3, #3
 8002a8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	fb02 f303 	mul.w	r3, r2, r3
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8111 	beq.w	8002ccc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	f000 8083 	beq.w	8002bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	f200 80a1 	bhi.w	8002bfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d056      	beq.n	8002b74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002ac6:	e099      	b.n	8002bfc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ac8:	4b88      	ldr	r3, [pc, #544]	@ (8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d02d      	beq.n	8002b30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ad4:	4b85      	ldr	r3, [pc, #532]	@ (8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	08db      	lsrs	r3, r3, #3
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	4a84      	ldr	r2, [pc, #528]	@ (8002cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002afe:	4b7b      	ldr	r3, [pc, #492]	@ (8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002b2e:	e087      	b.n	8002c40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b42:	4b6a      	ldr	r3, [pc, #424]	@ (8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b52:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b72:	e065      	b.n	8002c40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	ee07 3a90 	vmov	s15, r3
 8002b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002cfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b86:	4b59      	ldr	r3, [pc, #356]	@ (8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b96:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bb6:	e043      	b.n	8002c40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002d00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bca:	4b48      	ldr	r3, [pc, #288]	@ (8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bda:	ed97 6a03 	vldr	s12, [r7, #12]
 8002bde:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002bfa:	e021      	b.n	8002c40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	ee07 3a90 	vmov	s15, r3
 8002c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002cfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002c0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c0e:	4b37      	ldr	r3, [pc, #220]	@ (8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c16:	ee07 3a90 	vmov	s15, r3
 8002c1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002c26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002c40:	4b2a      	ldr	r3, [pc, #168]	@ (8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c44:	0a5b      	lsrs	r3, r3, #9
 8002c46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c4a:	ee07 3a90 	vmov	s15, r3
 8002c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002c5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c66:	ee17 2a90 	vmov	r2, s15
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002c6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c72:	0c1b      	lsrs	r3, r3, #16
 8002c74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002c88:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c94:	ee17 2a90 	vmov	r2, s15
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002c9c:	4b13      	ldr	r3, [pc, #76]	@ (8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca0:	0e1b      	lsrs	r3, r3, #24
 8002ca2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ca6:	ee07 3a90 	vmov	s15, r3
 8002caa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002cb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002cb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002cba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cc2:	ee17 2a90 	vmov	r2, s15
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002cca:	e008      	b.n	8002cde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	609a      	str	r2, [r3, #8]
}
 8002cde:	bf00      	nop
 8002ce0:	3724      	adds	r7, #36	@ 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	58024400 	.word	0x58024400
 8002cf0:	03d09000 	.word	0x03d09000
 8002cf4:	46000000 	.word	0x46000000
 8002cf8:	4c742400 	.word	0x4c742400
 8002cfc:	4a742400 	.word	0x4a742400
 8002d00:	4af42400 	.word	0x4af42400

08002d04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b089      	sub	sp, #36	@ 0x24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d0c:	4ba1      	ldr	r3, [pc, #644]	@ (8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	f003 0303 	and.w	r3, r3, #3
 8002d14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002d16:	4b9f      	ldr	r3, [pc, #636]	@ (8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1a:	0d1b      	lsrs	r3, r3, #20
 8002d1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002d22:	4b9c      	ldr	r3, [pc, #624]	@ (8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d26:	0a1b      	lsrs	r3, r3, #8
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002d2e:	4b99      	ldr	r3, [pc, #612]	@ (8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	08db      	lsrs	r3, r3, #3
 8002d34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8111 	beq.w	8002f74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	f000 8083 	beq.w	8002e60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2b02      	cmp	r3, #2
 8002d5e:	f200 80a1 	bhi.w	8002ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d056      	beq.n	8002e1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002d6e:	e099      	b.n	8002ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d70:	4b88      	ldr	r3, [pc, #544]	@ (8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d02d      	beq.n	8002dd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d7c:	4b85      	ldr	r3, [pc, #532]	@ (8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	08db      	lsrs	r3, r3, #3
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	4a84      	ldr	r2, [pc, #528]	@ (8002f98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002d88:	fa22 f303 	lsr.w	r3, r2, r3
 8002d8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	ee07 3a90 	vmov	s15, r3
 8002d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002da6:	4b7b      	ldr	r3, [pc, #492]	@ (8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dae:	ee07 3a90 	vmov	s15, r3
 8002db2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002db6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002dba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002f9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002dbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002dd6:	e087      	b.n	8002ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	ee07 3a90 	vmov	s15, r3
 8002dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002de6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dea:	4b6a      	ldr	r3, [pc, #424]	@ (8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df2:	ee07 3a90 	vmov	s15, r3
 8002df6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8002dfe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002f9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002e02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e1a:	e065      	b.n	8002ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e2e:	4b59      	ldr	r3, [pc, #356]	@ (8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e36:	ee07 3a90 	vmov	s15, r3
 8002e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002f9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002e46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e5e:	e043      	b.n	8002ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	ee07 3a90 	vmov	s15, r3
 8002e66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e72:	4b48      	ldr	r3, [pc, #288]	@ (8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7a:	ee07 3a90 	vmov	s15, r3
 8002e7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e82:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002f9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002e8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ea2:	e021      	b.n	8002ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	ee07 3a90 	vmov	s15, r3
 8002eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002fa4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002eb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eb6:	4b37      	ldr	r3, [pc, #220]	@ (8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ebe:	ee07 3a90 	vmov	s15, r3
 8002ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ec6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002eca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002f9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002ece:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ed2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ed6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ede:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ee6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002ee8:	4b2a      	ldr	r3, [pc, #168]	@ (8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eec:	0a5b      	lsrs	r3, r3, #9
 8002eee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ef2:	ee07 3a90 	vmov	s15, r3
 8002ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002efe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f02:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f0e:	ee17 2a90 	vmov	r2, s15
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002f16:	4b1f      	ldr	r3, [pc, #124]	@ (8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1a:	0c1b      	lsrs	r3, r3, #16
 8002f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f20:	ee07 3a90 	vmov	s15, r3
 8002f24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f30:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f3c:	ee17 2a90 	vmov	r2, s15
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002f44:	4b13      	ldr	r3, [pc, #76]	@ (8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	0e1b      	lsrs	r3, r3, #24
 8002f4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f6a:	ee17 2a90 	vmov	r2, s15
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002f72:	e008      	b.n	8002f86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	609a      	str	r2, [r3, #8]
}
 8002f86:	bf00      	nop
 8002f88:	3724      	adds	r7, #36	@ 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	58024400 	.word	0x58024400
 8002f98:	03d09000 	.word	0x03d09000
 8002f9c:	46000000 	.word	0x46000000
 8002fa0:	4c742400 	.word	0x4c742400
 8002fa4:	4a742400 	.word	0x4a742400
 8002fa8:	4af42400 	.word	0x4af42400

08002fac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e042      	b.n	8003044 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d106      	bne.n	8002fd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 f83b 	bl	800304c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2224      	movs	r2, #36	@ 0x24
 8002fda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	681a      	ldr	r2, [r3, #0]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0201 	bic.w	r2, r2, #1
 8002fec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d002      	beq.n	8002ffc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 ff2c 	bl	8003e54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f8bd 	bl	800317c <UART_SetConfig>
 8003002:	4603      	mov	r3, r0
 8003004:	2b01      	cmp	r3, #1
 8003006:	d101      	bne.n	800300c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e01b      	b.n	8003044 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685a      	ldr	r2, [r3, #4]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800301a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800302a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 ffab 	bl	8003f98 <UART_CheckIdleState>
 8003042:	4603      	mov	r3, r0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	@ 0x28
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	4613      	mov	r3, r2
 800306e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003076:	2b20      	cmp	r3, #32
 8003078:	d17b      	bne.n	8003172 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_UART_Transmit+0x26>
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e074      	b.n	8003174 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2221      	movs	r2, #33	@ 0x21
 8003096:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800309a:	f7fe f955 	bl	8001348 <HAL_GetTick>
 800309e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b8:	d108      	bne.n	80030cc <HAL_UART_Transmit+0x6c>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d104      	bne.n	80030cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e003      	b.n	80030d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030d4:	e030      	b.n	8003138 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	2180      	movs	r1, #128	@ 0x80
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f001 f803 	bl	80040ec <UART_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d005      	beq.n	80030f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e03d      	b.n	8003174 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d10b      	bne.n	8003116 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800310c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	3302      	adds	r3, #2
 8003112:	61bb      	str	r3, [r7, #24]
 8003114:	e007      	b.n	8003126 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	781a      	ldrb	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	3301      	adds	r3, #1
 8003124:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800313e:	b29b      	uxth	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1c8      	bne.n	80030d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2200      	movs	r2, #0
 800314c:	2140      	movs	r1, #64	@ 0x40
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 ffcc 	bl	80040ec <UART_WaitOnFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d005      	beq.n	8003166 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003162:	2303      	movs	r3, #3
 8003164:	e006      	b.n	8003174 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	e000      	b.n	8003174 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003172:	2302      	movs	r3, #2
  }
}
 8003174:	4618      	mov	r0, r3
 8003176:	3720      	adds	r7, #32
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800317c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003180:	b092      	sub	sp, #72	@ 0x48
 8003182:	af00      	add	r7, sp, #0
 8003184:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003186:	2300      	movs	r3, #0
 8003188:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	431a      	orrs	r2, r3
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	695b      	ldr	r3, [r3, #20]
 800319a:	431a      	orrs	r2, r3
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4bbe      	ldr	r3, [pc, #760]	@ (80034a4 <UART_SetConfig+0x328>)
 80031ac:	4013      	ands	r3, r2
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	6812      	ldr	r2, [r2, #0]
 80031b2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4ab3      	ldr	r2, [pc, #716]	@ (80034a8 <UART_SetConfig+0x32c>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d004      	beq.n	80031e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031e4:	4313      	orrs	r3, r2
 80031e6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	4baf      	ldr	r3, [pc, #700]	@ (80034ac <UART_SetConfig+0x330>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	6812      	ldr	r2, [r2, #0]
 80031f6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	f023 010f 	bic.w	r1, r3, #15
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4aa6      	ldr	r2, [pc, #664]	@ (80034b0 <UART_SetConfig+0x334>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d177      	bne.n	800330c <UART_SetConfig+0x190>
 800321c:	4ba5      	ldr	r3, [pc, #660]	@ (80034b4 <UART_SetConfig+0x338>)
 800321e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003220:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003224:	2b28      	cmp	r3, #40	@ 0x28
 8003226:	d86d      	bhi.n	8003304 <UART_SetConfig+0x188>
 8003228:	a201      	add	r2, pc, #4	@ (adr r2, 8003230 <UART_SetConfig+0xb4>)
 800322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800322e:	bf00      	nop
 8003230:	080032d5 	.word	0x080032d5
 8003234:	08003305 	.word	0x08003305
 8003238:	08003305 	.word	0x08003305
 800323c:	08003305 	.word	0x08003305
 8003240:	08003305 	.word	0x08003305
 8003244:	08003305 	.word	0x08003305
 8003248:	08003305 	.word	0x08003305
 800324c:	08003305 	.word	0x08003305
 8003250:	080032dd 	.word	0x080032dd
 8003254:	08003305 	.word	0x08003305
 8003258:	08003305 	.word	0x08003305
 800325c:	08003305 	.word	0x08003305
 8003260:	08003305 	.word	0x08003305
 8003264:	08003305 	.word	0x08003305
 8003268:	08003305 	.word	0x08003305
 800326c:	08003305 	.word	0x08003305
 8003270:	080032e5 	.word	0x080032e5
 8003274:	08003305 	.word	0x08003305
 8003278:	08003305 	.word	0x08003305
 800327c:	08003305 	.word	0x08003305
 8003280:	08003305 	.word	0x08003305
 8003284:	08003305 	.word	0x08003305
 8003288:	08003305 	.word	0x08003305
 800328c:	08003305 	.word	0x08003305
 8003290:	080032ed 	.word	0x080032ed
 8003294:	08003305 	.word	0x08003305
 8003298:	08003305 	.word	0x08003305
 800329c:	08003305 	.word	0x08003305
 80032a0:	08003305 	.word	0x08003305
 80032a4:	08003305 	.word	0x08003305
 80032a8:	08003305 	.word	0x08003305
 80032ac:	08003305 	.word	0x08003305
 80032b0:	080032f5 	.word	0x080032f5
 80032b4:	08003305 	.word	0x08003305
 80032b8:	08003305 	.word	0x08003305
 80032bc:	08003305 	.word	0x08003305
 80032c0:	08003305 	.word	0x08003305
 80032c4:	08003305 	.word	0x08003305
 80032c8:	08003305 	.word	0x08003305
 80032cc:	08003305 	.word	0x08003305
 80032d0:	080032fd 	.word	0x080032fd
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032da:	e326      	b.n	800392a <UART_SetConfig+0x7ae>
 80032dc:	2304      	movs	r3, #4
 80032de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032e2:	e322      	b.n	800392a <UART_SetConfig+0x7ae>
 80032e4:	2308      	movs	r3, #8
 80032e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032ea:	e31e      	b.n	800392a <UART_SetConfig+0x7ae>
 80032ec:	2310      	movs	r3, #16
 80032ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032f2:	e31a      	b.n	800392a <UART_SetConfig+0x7ae>
 80032f4:	2320      	movs	r3, #32
 80032f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80032fa:	e316      	b.n	800392a <UART_SetConfig+0x7ae>
 80032fc:	2340      	movs	r3, #64	@ 0x40
 80032fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003302:	e312      	b.n	800392a <UART_SetConfig+0x7ae>
 8003304:	2380      	movs	r3, #128	@ 0x80
 8003306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800330a:	e30e      	b.n	800392a <UART_SetConfig+0x7ae>
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a69      	ldr	r2, [pc, #420]	@ (80034b8 <UART_SetConfig+0x33c>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d130      	bne.n	8003378 <UART_SetConfig+0x1fc>
 8003316:	4b67      	ldr	r3, [pc, #412]	@ (80034b4 <UART_SetConfig+0x338>)
 8003318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	2b05      	cmp	r3, #5
 8003320:	d826      	bhi.n	8003370 <UART_SetConfig+0x1f4>
 8003322:	a201      	add	r2, pc, #4	@ (adr r2, 8003328 <UART_SetConfig+0x1ac>)
 8003324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003328:	08003341 	.word	0x08003341
 800332c:	08003349 	.word	0x08003349
 8003330:	08003351 	.word	0x08003351
 8003334:	08003359 	.word	0x08003359
 8003338:	08003361 	.word	0x08003361
 800333c:	08003369 	.word	0x08003369
 8003340:	2300      	movs	r3, #0
 8003342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003346:	e2f0      	b.n	800392a <UART_SetConfig+0x7ae>
 8003348:	2304      	movs	r3, #4
 800334a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800334e:	e2ec      	b.n	800392a <UART_SetConfig+0x7ae>
 8003350:	2308      	movs	r3, #8
 8003352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003356:	e2e8      	b.n	800392a <UART_SetConfig+0x7ae>
 8003358:	2310      	movs	r3, #16
 800335a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800335e:	e2e4      	b.n	800392a <UART_SetConfig+0x7ae>
 8003360:	2320      	movs	r3, #32
 8003362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003366:	e2e0      	b.n	800392a <UART_SetConfig+0x7ae>
 8003368:	2340      	movs	r3, #64	@ 0x40
 800336a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800336e:	e2dc      	b.n	800392a <UART_SetConfig+0x7ae>
 8003370:	2380      	movs	r3, #128	@ 0x80
 8003372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003376:	e2d8      	b.n	800392a <UART_SetConfig+0x7ae>
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a4f      	ldr	r2, [pc, #316]	@ (80034bc <UART_SetConfig+0x340>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d130      	bne.n	80033e4 <UART_SetConfig+0x268>
 8003382:	4b4c      	ldr	r3, [pc, #304]	@ (80034b4 <UART_SetConfig+0x338>)
 8003384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	2b05      	cmp	r3, #5
 800338c:	d826      	bhi.n	80033dc <UART_SetConfig+0x260>
 800338e:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <UART_SetConfig+0x218>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033ad 	.word	0x080033ad
 8003398:	080033b5 	.word	0x080033b5
 800339c:	080033bd 	.word	0x080033bd
 80033a0:	080033c5 	.word	0x080033c5
 80033a4:	080033cd 	.word	0x080033cd
 80033a8:	080033d5 	.word	0x080033d5
 80033ac:	2300      	movs	r3, #0
 80033ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033b2:	e2ba      	b.n	800392a <UART_SetConfig+0x7ae>
 80033b4:	2304      	movs	r3, #4
 80033b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033ba:	e2b6      	b.n	800392a <UART_SetConfig+0x7ae>
 80033bc:	2308      	movs	r3, #8
 80033be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033c2:	e2b2      	b.n	800392a <UART_SetConfig+0x7ae>
 80033c4:	2310      	movs	r3, #16
 80033c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033ca:	e2ae      	b.n	800392a <UART_SetConfig+0x7ae>
 80033cc:	2320      	movs	r3, #32
 80033ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033d2:	e2aa      	b.n	800392a <UART_SetConfig+0x7ae>
 80033d4:	2340      	movs	r3, #64	@ 0x40
 80033d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033da:	e2a6      	b.n	800392a <UART_SetConfig+0x7ae>
 80033dc:	2380      	movs	r3, #128	@ 0x80
 80033de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033e2:	e2a2      	b.n	800392a <UART_SetConfig+0x7ae>
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a35      	ldr	r2, [pc, #212]	@ (80034c0 <UART_SetConfig+0x344>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d130      	bne.n	8003450 <UART_SetConfig+0x2d4>
 80033ee:	4b31      	ldr	r3, [pc, #196]	@ (80034b4 <UART_SetConfig+0x338>)
 80033f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f2:	f003 0307 	and.w	r3, r3, #7
 80033f6:	2b05      	cmp	r3, #5
 80033f8:	d826      	bhi.n	8003448 <UART_SetConfig+0x2cc>
 80033fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003400 <UART_SetConfig+0x284>)
 80033fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003400:	08003419 	.word	0x08003419
 8003404:	08003421 	.word	0x08003421
 8003408:	08003429 	.word	0x08003429
 800340c:	08003431 	.word	0x08003431
 8003410:	08003439 	.word	0x08003439
 8003414:	08003441 	.word	0x08003441
 8003418:	2300      	movs	r3, #0
 800341a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800341e:	e284      	b.n	800392a <UART_SetConfig+0x7ae>
 8003420:	2304      	movs	r3, #4
 8003422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003426:	e280      	b.n	800392a <UART_SetConfig+0x7ae>
 8003428:	2308      	movs	r3, #8
 800342a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800342e:	e27c      	b.n	800392a <UART_SetConfig+0x7ae>
 8003430:	2310      	movs	r3, #16
 8003432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003436:	e278      	b.n	800392a <UART_SetConfig+0x7ae>
 8003438:	2320      	movs	r3, #32
 800343a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800343e:	e274      	b.n	800392a <UART_SetConfig+0x7ae>
 8003440:	2340      	movs	r3, #64	@ 0x40
 8003442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003446:	e270      	b.n	800392a <UART_SetConfig+0x7ae>
 8003448:	2380      	movs	r3, #128	@ 0x80
 800344a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800344e:	e26c      	b.n	800392a <UART_SetConfig+0x7ae>
 8003450:	697b      	ldr	r3, [r7, #20]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1b      	ldr	r2, [pc, #108]	@ (80034c4 <UART_SetConfig+0x348>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d142      	bne.n	80034e0 <UART_SetConfig+0x364>
 800345a:	4b16      	ldr	r3, [pc, #88]	@ (80034b4 <UART_SetConfig+0x338>)
 800345c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	2b05      	cmp	r3, #5
 8003464:	d838      	bhi.n	80034d8 <UART_SetConfig+0x35c>
 8003466:	a201      	add	r2, pc, #4	@ (adr r2, 800346c <UART_SetConfig+0x2f0>)
 8003468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346c:	08003485 	.word	0x08003485
 8003470:	0800348d 	.word	0x0800348d
 8003474:	08003495 	.word	0x08003495
 8003478:	0800349d 	.word	0x0800349d
 800347c:	080034c9 	.word	0x080034c9
 8003480:	080034d1 	.word	0x080034d1
 8003484:	2300      	movs	r3, #0
 8003486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800348a:	e24e      	b.n	800392a <UART_SetConfig+0x7ae>
 800348c:	2304      	movs	r3, #4
 800348e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003492:	e24a      	b.n	800392a <UART_SetConfig+0x7ae>
 8003494:	2308      	movs	r3, #8
 8003496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800349a:	e246      	b.n	800392a <UART_SetConfig+0x7ae>
 800349c:	2310      	movs	r3, #16
 800349e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034a2:	e242      	b.n	800392a <UART_SetConfig+0x7ae>
 80034a4:	cfff69f3 	.word	0xcfff69f3
 80034a8:	58000c00 	.word	0x58000c00
 80034ac:	11fff4ff 	.word	0x11fff4ff
 80034b0:	40011000 	.word	0x40011000
 80034b4:	58024400 	.word	0x58024400
 80034b8:	40004400 	.word	0x40004400
 80034bc:	40004800 	.word	0x40004800
 80034c0:	40004c00 	.word	0x40004c00
 80034c4:	40005000 	.word	0x40005000
 80034c8:	2320      	movs	r3, #32
 80034ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034ce:	e22c      	b.n	800392a <UART_SetConfig+0x7ae>
 80034d0:	2340      	movs	r3, #64	@ 0x40
 80034d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034d6:	e228      	b.n	800392a <UART_SetConfig+0x7ae>
 80034d8:	2380      	movs	r3, #128	@ 0x80
 80034da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80034de:	e224      	b.n	800392a <UART_SetConfig+0x7ae>
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4ab1      	ldr	r2, [pc, #708]	@ (80037ac <UART_SetConfig+0x630>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d176      	bne.n	80035d8 <UART_SetConfig+0x45c>
 80034ea:	4bb1      	ldr	r3, [pc, #708]	@ (80037b0 <UART_SetConfig+0x634>)
 80034ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ee:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80034f2:	2b28      	cmp	r3, #40	@ 0x28
 80034f4:	d86c      	bhi.n	80035d0 <UART_SetConfig+0x454>
 80034f6:	a201      	add	r2, pc, #4	@ (adr r2, 80034fc <UART_SetConfig+0x380>)
 80034f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034fc:	080035a1 	.word	0x080035a1
 8003500:	080035d1 	.word	0x080035d1
 8003504:	080035d1 	.word	0x080035d1
 8003508:	080035d1 	.word	0x080035d1
 800350c:	080035d1 	.word	0x080035d1
 8003510:	080035d1 	.word	0x080035d1
 8003514:	080035d1 	.word	0x080035d1
 8003518:	080035d1 	.word	0x080035d1
 800351c:	080035a9 	.word	0x080035a9
 8003520:	080035d1 	.word	0x080035d1
 8003524:	080035d1 	.word	0x080035d1
 8003528:	080035d1 	.word	0x080035d1
 800352c:	080035d1 	.word	0x080035d1
 8003530:	080035d1 	.word	0x080035d1
 8003534:	080035d1 	.word	0x080035d1
 8003538:	080035d1 	.word	0x080035d1
 800353c:	080035b1 	.word	0x080035b1
 8003540:	080035d1 	.word	0x080035d1
 8003544:	080035d1 	.word	0x080035d1
 8003548:	080035d1 	.word	0x080035d1
 800354c:	080035d1 	.word	0x080035d1
 8003550:	080035d1 	.word	0x080035d1
 8003554:	080035d1 	.word	0x080035d1
 8003558:	080035d1 	.word	0x080035d1
 800355c:	080035b9 	.word	0x080035b9
 8003560:	080035d1 	.word	0x080035d1
 8003564:	080035d1 	.word	0x080035d1
 8003568:	080035d1 	.word	0x080035d1
 800356c:	080035d1 	.word	0x080035d1
 8003570:	080035d1 	.word	0x080035d1
 8003574:	080035d1 	.word	0x080035d1
 8003578:	080035d1 	.word	0x080035d1
 800357c:	080035c1 	.word	0x080035c1
 8003580:	080035d1 	.word	0x080035d1
 8003584:	080035d1 	.word	0x080035d1
 8003588:	080035d1 	.word	0x080035d1
 800358c:	080035d1 	.word	0x080035d1
 8003590:	080035d1 	.word	0x080035d1
 8003594:	080035d1 	.word	0x080035d1
 8003598:	080035d1 	.word	0x080035d1
 800359c:	080035c9 	.word	0x080035c9
 80035a0:	2301      	movs	r3, #1
 80035a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035a6:	e1c0      	b.n	800392a <UART_SetConfig+0x7ae>
 80035a8:	2304      	movs	r3, #4
 80035aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035ae:	e1bc      	b.n	800392a <UART_SetConfig+0x7ae>
 80035b0:	2308      	movs	r3, #8
 80035b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035b6:	e1b8      	b.n	800392a <UART_SetConfig+0x7ae>
 80035b8:	2310      	movs	r3, #16
 80035ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035be:	e1b4      	b.n	800392a <UART_SetConfig+0x7ae>
 80035c0:	2320      	movs	r3, #32
 80035c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035c6:	e1b0      	b.n	800392a <UART_SetConfig+0x7ae>
 80035c8:	2340      	movs	r3, #64	@ 0x40
 80035ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035ce:	e1ac      	b.n	800392a <UART_SetConfig+0x7ae>
 80035d0:	2380      	movs	r3, #128	@ 0x80
 80035d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80035d6:	e1a8      	b.n	800392a <UART_SetConfig+0x7ae>
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a75      	ldr	r2, [pc, #468]	@ (80037b4 <UART_SetConfig+0x638>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d130      	bne.n	8003644 <UART_SetConfig+0x4c8>
 80035e2:	4b73      	ldr	r3, [pc, #460]	@ (80037b0 <UART_SetConfig+0x634>)
 80035e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d826      	bhi.n	800363c <UART_SetConfig+0x4c0>
 80035ee:	a201      	add	r2, pc, #4	@ (adr r2, 80035f4 <UART_SetConfig+0x478>)
 80035f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f4:	0800360d 	.word	0x0800360d
 80035f8:	08003615 	.word	0x08003615
 80035fc:	0800361d 	.word	0x0800361d
 8003600:	08003625 	.word	0x08003625
 8003604:	0800362d 	.word	0x0800362d
 8003608:	08003635 	.word	0x08003635
 800360c:	2300      	movs	r3, #0
 800360e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003612:	e18a      	b.n	800392a <UART_SetConfig+0x7ae>
 8003614:	2304      	movs	r3, #4
 8003616:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800361a:	e186      	b.n	800392a <UART_SetConfig+0x7ae>
 800361c:	2308      	movs	r3, #8
 800361e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003622:	e182      	b.n	800392a <UART_SetConfig+0x7ae>
 8003624:	2310      	movs	r3, #16
 8003626:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800362a:	e17e      	b.n	800392a <UART_SetConfig+0x7ae>
 800362c:	2320      	movs	r3, #32
 800362e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003632:	e17a      	b.n	800392a <UART_SetConfig+0x7ae>
 8003634:	2340      	movs	r3, #64	@ 0x40
 8003636:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800363a:	e176      	b.n	800392a <UART_SetConfig+0x7ae>
 800363c:	2380      	movs	r3, #128	@ 0x80
 800363e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003642:	e172      	b.n	800392a <UART_SetConfig+0x7ae>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a5b      	ldr	r2, [pc, #364]	@ (80037b8 <UART_SetConfig+0x63c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d130      	bne.n	80036b0 <UART_SetConfig+0x534>
 800364e:	4b58      	ldr	r3, [pc, #352]	@ (80037b0 <UART_SetConfig+0x634>)
 8003650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003652:	f003 0307 	and.w	r3, r3, #7
 8003656:	2b05      	cmp	r3, #5
 8003658:	d826      	bhi.n	80036a8 <UART_SetConfig+0x52c>
 800365a:	a201      	add	r2, pc, #4	@ (adr r2, 8003660 <UART_SetConfig+0x4e4>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	08003679 	.word	0x08003679
 8003664:	08003681 	.word	0x08003681
 8003668:	08003689 	.word	0x08003689
 800366c:	08003691 	.word	0x08003691
 8003670:	08003699 	.word	0x08003699
 8003674:	080036a1 	.word	0x080036a1
 8003678:	2300      	movs	r3, #0
 800367a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800367e:	e154      	b.n	800392a <UART_SetConfig+0x7ae>
 8003680:	2304      	movs	r3, #4
 8003682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003686:	e150      	b.n	800392a <UART_SetConfig+0x7ae>
 8003688:	2308      	movs	r3, #8
 800368a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800368e:	e14c      	b.n	800392a <UART_SetConfig+0x7ae>
 8003690:	2310      	movs	r3, #16
 8003692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003696:	e148      	b.n	800392a <UART_SetConfig+0x7ae>
 8003698:	2320      	movs	r3, #32
 800369a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800369e:	e144      	b.n	800392a <UART_SetConfig+0x7ae>
 80036a0:	2340      	movs	r3, #64	@ 0x40
 80036a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036a6:	e140      	b.n	800392a <UART_SetConfig+0x7ae>
 80036a8:	2380      	movs	r3, #128	@ 0x80
 80036aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036ae:	e13c      	b.n	800392a <UART_SetConfig+0x7ae>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a41      	ldr	r2, [pc, #260]	@ (80037bc <UART_SetConfig+0x640>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	f040 8082 	bne.w	80037c0 <UART_SetConfig+0x644>
 80036bc:	4b3c      	ldr	r3, [pc, #240]	@ (80037b0 <UART_SetConfig+0x634>)
 80036be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80036c4:	2b28      	cmp	r3, #40	@ 0x28
 80036c6:	d86d      	bhi.n	80037a4 <UART_SetConfig+0x628>
 80036c8:	a201      	add	r2, pc, #4	@ (adr r2, 80036d0 <UART_SetConfig+0x554>)
 80036ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036ce:	bf00      	nop
 80036d0:	08003775 	.word	0x08003775
 80036d4:	080037a5 	.word	0x080037a5
 80036d8:	080037a5 	.word	0x080037a5
 80036dc:	080037a5 	.word	0x080037a5
 80036e0:	080037a5 	.word	0x080037a5
 80036e4:	080037a5 	.word	0x080037a5
 80036e8:	080037a5 	.word	0x080037a5
 80036ec:	080037a5 	.word	0x080037a5
 80036f0:	0800377d 	.word	0x0800377d
 80036f4:	080037a5 	.word	0x080037a5
 80036f8:	080037a5 	.word	0x080037a5
 80036fc:	080037a5 	.word	0x080037a5
 8003700:	080037a5 	.word	0x080037a5
 8003704:	080037a5 	.word	0x080037a5
 8003708:	080037a5 	.word	0x080037a5
 800370c:	080037a5 	.word	0x080037a5
 8003710:	08003785 	.word	0x08003785
 8003714:	080037a5 	.word	0x080037a5
 8003718:	080037a5 	.word	0x080037a5
 800371c:	080037a5 	.word	0x080037a5
 8003720:	080037a5 	.word	0x080037a5
 8003724:	080037a5 	.word	0x080037a5
 8003728:	080037a5 	.word	0x080037a5
 800372c:	080037a5 	.word	0x080037a5
 8003730:	0800378d 	.word	0x0800378d
 8003734:	080037a5 	.word	0x080037a5
 8003738:	080037a5 	.word	0x080037a5
 800373c:	080037a5 	.word	0x080037a5
 8003740:	080037a5 	.word	0x080037a5
 8003744:	080037a5 	.word	0x080037a5
 8003748:	080037a5 	.word	0x080037a5
 800374c:	080037a5 	.word	0x080037a5
 8003750:	08003795 	.word	0x08003795
 8003754:	080037a5 	.word	0x080037a5
 8003758:	080037a5 	.word	0x080037a5
 800375c:	080037a5 	.word	0x080037a5
 8003760:	080037a5 	.word	0x080037a5
 8003764:	080037a5 	.word	0x080037a5
 8003768:	080037a5 	.word	0x080037a5
 800376c:	080037a5 	.word	0x080037a5
 8003770:	0800379d 	.word	0x0800379d
 8003774:	2301      	movs	r3, #1
 8003776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800377a:	e0d6      	b.n	800392a <UART_SetConfig+0x7ae>
 800377c:	2304      	movs	r3, #4
 800377e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003782:	e0d2      	b.n	800392a <UART_SetConfig+0x7ae>
 8003784:	2308      	movs	r3, #8
 8003786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800378a:	e0ce      	b.n	800392a <UART_SetConfig+0x7ae>
 800378c:	2310      	movs	r3, #16
 800378e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003792:	e0ca      	b.n	800392a <UART_SetConfig+0x7ae>
 8003794:	2320      	movs	r3, #32
 8003796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800379a:	e0c6      	b.n	800392a <UART_SetConfig+0x7ae>
 800379c:	2340      	movs	r3, #64	@ 0x40
 800379e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037a2:	e0c2      	b.n	800392a <UART_SetConfig+0x7ae>
 80037a4:	2380      	movs	r3, #128	@ 0x80
 80037a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037aa:	e0be      	b.n	800392a <UART_SetConfig+0x7ae>
 80037ac:	40011400 	.word	0x40011400
 80037b0:	58024400 	.word	0x58024400
 80037b4:	40007800 	.word	0x40007800
 80037b8:	40007c00 	.word	0x40007c00
 80037bc:	40011800 	.word	0x40011800
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4aad      	ldr	r2, [pc, #692]	@ (8003a7c <UART_SetConfig+0x900>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d176      	bne.n	80038b8 <UART_SetConfig+0x73c>
 80037ca:	4bad      	ldr	r3, [pc, #692]	@ (8003a80 <UART_SetConfig+0x904>)
 80037cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80037d2:	2b28      	cmp	r3, #40	@ 0x28
 80037d4:	d86c      	bhi.n	80038b0 <UART_SetConfig+0x734>
 80037d6:	a201      	add	r2, pc, #4	@ (adr r2, 80037dc <UART_SetConfig+0x660>)
 80037d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037dc:	08003881 	.word	0x08003881
 80037e0:	080038b1 	.word	0x080038b1
 80037e4:	080038b1 	.word	0x080038b1
 80037e8:	080038b1 	.word	0x080038b1
 80037ec:	080038b1 	.word	0x080038b1
 80037f0:	080038b1 	.word	0x080038b1
 80037f4:	080038b1 	.word	0x080038b1
 80037f8:	080038b1 	.word	0x080038b1
 80037fc:	08003889 	.word	0x08003889
 8003800:	080038b1 	.word	0x080038b1
 8003804:	080038b1 	.word	0x080038b1
 8003808:	080038b1 	.word	0x080038b1
 800380c:	080038b1 	.word	0x080038b1
 8003810:	080038b1 	.word	0x080038b1
 8003814:	080038b1 	.word	0x080038b1
 8003818:	080038b1 	.word	0x080038b1
 800381c:	08003891 	.word	0x08003891
 8003820:	080038b1 	.word	0x080038b1
 8003824:	080038b1 	.word	0x080038b1
 8003828:	080038b1 	.word	0x080038b1
 800382c:	080038b1 	.word	0x080038b1
 8003830:	080038b1 	.word	0x080038b1
 8003834:	080038b1 	.word	0x080038b1
 8003838:	080038b1 	.word	0x080038b1
 800383c:	08003899 	.word	0x08003899
 8003840:	080038b1 	.word	0x080038b1
 8003844:	080038b1 	.word	0x080038b1
 8003848:	080038b1 	.word	0x080038b1
 800384c:	080038b1 	.word	0x080038b1
 8003850:	080038b1 	.word	0x080038b1
 8003854:	080038b1 	.word	0x080038b1
 8003858:	080038b1 	.word	0x080038b1
 800385c:	080038a1 	.word	0x080038a1
 8003860:	080038b1 	.word	0x080038b1
 8003864:	080038b1 	.word	0x080038b1
 8003868:	080038b1 	.word	0x080038b1
 800386c:	080038b1 	.word	0x080038b1
 8003870:	080038b1 	.word	0x080038b1
 8003874:	080038b1 	.word	0x080038b1
 8003878:	080038b1 	.word	0x080038b1
 800387c:	080038a9 	.word	0x080038a9
 8003880:	2301      	movs	r3, #1
 8003882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003886:	e050      	b.n	800392a <UART_SetConfig+0x7ae>
 8003888:	2304      	movs	r3, #4
 800388a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800388e:	e04c      	b.n	800392a <UART_SetConfig+0x7ae>
 8003890:	2308      	movs	r3, #8
 8003892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003896:	e048      	b.n	800392a <UART_SetConfig+0x7ae>
 8003898:	2310      	movs	r3, #16
 800389a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800389e:	e044      	b.n	800392a <UART_SetConfig+0x7ae>
 80038a0:	2320      	movs	r3, #32
 80038a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80038a6:	e040      	b.n	800392a <UART_SetConfig+0x7ae>
 80038a8:	2340      	movs	r3, #64	@ 0x40
 80038aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80038ae:	e03c      	b.n	800392a <UART_SetConfig+0x7ae>
 80038b0:	2380      	movs	r3, #128	@ 0x80
 80038b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80038b6:	e038      	b.n	800392a <UART_SetConfig+0x7ae>
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a71      	ldr	r2, [pc, #452]	@ (8003a84 <UART_SetConfig+0x908>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d130      	bne.n	8003924 <UART_SetConfig+0x7a8>
 80038c2:	4b6f      	ldr	r3, [pc, #444]	@ (8003a80 <UART_SetConfig+0x904>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	2b05      	cmp	r3, #5
 80038cc:	d826      	bhi.n	800391c <UART_SetConfig+0x7a0>
 80038ce:	a201      	add	r2, pc, #4	@ (adr r2, 80038d4 <UART_SetConfig+0x758>)
 80038d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d4:	080038ed 	.word	0x080038ed
 80038d8:	080038f5 	.word	0x080038f5
 80038dc:	080038fd 	.word	0x080038fd
 80038e0:	08003905 	.word	0x08003905
 80038e4:	0800390d 	.word	0x0800390d
 80038e8:	08003915 	.word	0x08003915
 80038ec:	2302      	movs	r3, #2
 80038ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80038f2:	e01a      	b.n	800392a <UART_SetConfig+0x7ae>
 80038f4:	2304      	movs	r3, #4
 80038f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80038fa:	e016      	b.n	800392a <UART_SetConfig+0x7ae>
 80038fc:	2308      	movs	r3, #8
 80038fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003902:	e012      	b.n	800392a <UART_SetConfig+0x7ae>
 8003904:	2310      	movs	r3, #16
 8003906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800390a:	e00e      	b.n	800392a <UART_SetConfig+0x7ae>
 800390c:	2320      	movs	r3, #32
 800390e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003912:	e00a      	b.n	800392a <UART_SetConfig+0x7ae>
 8003914:	2340      	movs	r3, #64	@ 0x40
 8003916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800391a:	e006      	b.n	800392a <UART_SetConfig+0x7ae>
 800391c:	2380      	movs	r3, #128	@ 0x80
 800391e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003922:	e002      	b.n	800392a <UART_SetConfig+0x7ae>
 8003924:	2380      	movs	r3, #128	@ 0x80
 8003926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a55      	ldr	r2, [pc, #340]	@ (8003a84 <UART_SetConfig+0x908>)
 8003930:	4293      	cmp	r3, r2
 8003932:	f040 80f8 	bne.w	8003b26 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003936:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800393a:	2b20      	cmp	r3, #32
 800393c:	dc46      	bgt.n	80039cc <UART_SetConfig+0x850>
 800393e:	2b02      	cmp	r3, #2
 8003940:	db75      	blt.n	8003a2e <UART_SetConfig+0x8b2>
 8003942:	3b02      	subs	r3, #2
 8003944:	2b1e      	cmp	r3, #30
 8003946:	d872      	bhi.n	8003a2e <UART_SetConfig+0x8b2>
 8003948:	a201      	add	r2, pc, #4	@ (adr r2, 8003950 <UART_SetConfig+0x7d4>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	080039d3 	.word	0x080039d3
 8003954:	08003a2f 	.word	0x08003a2f
 8003958:	080039db 	.word	0x080039db
 800395c:	08003a2f 	.word	0x08003a2f
 8003960:	08003a2f 	.word	0x08003a2f
 8003964:	08003a2f 	.word	0x08003a2f
 8003968:	080039eb 	.word	0x080039eb
 800396c:	08003a2f 	.word	0x08003a2f
 8003970:	08003a2f 	.word	0x08003a2f
 8003974:	08003a2f 	.word	0x08003a2f
 8003978:	08003a2f 	.word	0x08003a2f
 800397c:	08003a2f 	.word	0x08003a2f
 8003980:	08003a2f 	.word	0x08003a2f
 8003984:	08003a2f 	.word	0x08003a2f
 8003988:	080039fb 	.word	0x080039fb
 800398c:	08003a2f 	.word	0x08003a2f
 8003990:	08003a2f 	.word	0x08003a2f
 8003994:	08003a2f 	.word	0x08003a2f
 8003998:	08003a2f 	.word	0x08003a2f
 800399c:	08003a2f 	.word	0x08003a2f
 80039a0:	08003a2f 	.word	0x08003a2f
 80039a4:	08003a2f 	.word	0x08003a2f
 80039a8:	08003a2f 	.word	0x08003a2f
 80039ac:	08003a2f 	.word	0x08003a2f
 80039b0:	08003a2f 	.word	0x08003a2f
 80039b4:	08003a2f 	.word	0x08003a2f
 80039b8:	08003a2f 	.word	0x08003a2f
 80039bc:	08003a2f 	.word	0x08003a2f
 80039c0:	08003a2f 	.word	0x08003a2f
 80039c4:	08003a2f 	.word	0x08003a2f
 80039c8:	08003a21 	.word	0x08003a21
 80039cc:	2b40      	cmp	r3, #64	@ 0x40
 80039ce:	d02a      	beq.n	8003a26 <UART_SetConfig+0x8aa>
 80039d0:	e02d      	b.n	8003a2e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80039d2:	f7ff f82d 	bl	8002a30 <HAL_RCCEx_GetD3PCLK1Freq>
 80039d6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80039d8:	e02f      	b.n	8003a3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80039da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80039de:	4618      	mov	r0, r3
 80039e0:	f7ff f83c 	bl	8002a5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80039e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80039e8:	e027      	b.n	8003a3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80039ea:	f107 0318 	add.w	r3, r7, #24
 80039ee:	4618      	mov	r0, r3
 80039f0:	f7ff f988 	bl	8002d04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80039f8:	e01f      	b.n	8003a3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039fa:	4b21      	ldr	r3, [pc, #132]	@ (8003a80 <UART_SetConfig+0x904>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0320 	and.w	r3, r3, #32
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003a06:	4b1e      	ldr	r3, [pc, #120]	@ (8003a80 <UART_SetConfig+0x904>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	08db      	lsrs	r3, r3, #3
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	4a1d      	ldr	r2, [pc, #116]	@ (8003a88 <UART_SetConfig+0x90c>)
 8003a12:	fa22 f303 	lsr.w	r3, r2, r3
 8003a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003a18:	e00f      	b.n	8003a3a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8003a1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003a88 <UART_SetConfig+0x90c>)
 8003a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a1e:	e00c      	b.n	8003a3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003a20:	4b1a      	ldr	r3, [pc, #104]	@ (8003a8c <UART_SetConfig+0x910>)
 8003a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a24:	e009      	b.n	8003a3a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003a2c:	e005      	b.n	8003a3a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003a38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 81ee 	beq.w	8003e1e <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a46:	4a12      	ldr	r2, [pc, #72]	@ (8003a90 <UART_SetConfig+0x914>)
 8003a48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a50:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a54:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	4413      	add	r3, r2
 8003a60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d305      	bcc.n	8003a72 <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003a6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d910      	bls.n	8003a94 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003a78:	e1d1      	b.n	8003e1e <UART_SetConfig+0xca2>
 8003a7a:	bf00      	nop
 8003a7c:	40011c00 	.word	0x40011c00
 8003a80:	58024400 	.word	0x58024400
 8003a84:	58000c00 	.word	0x58000c00
 8003a88:	03d09000 	.word	0x03d09000
 8003a8c:	003d0900 	.word	0x003d0900
 8003a90:	080066ec 	.word	0x080066ec
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a96:	2200      	movs	r2, #0
 8003a98:	60bb      	str	r3, [r7, #8]
 8003a9a:	60fa      	str	r2, [r7, #12]
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	4ac0      	ldr	r2, [pc, #768]	@ (8003da4 <UART_SetConfig+0xc28>)
 8003aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	607a      	str	r2, [r7, #4]
 8003aae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ab2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003ab6:	f7fc fc7b 	bl	80003b0 <__aeabi_uldivmod>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4610      	mov	r0, r2
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	f04f 0200 	mov.w	r2, #0
 8003ac6:	f04f 0300 	mov.w	r3, #0
 8003aca:	020b      	lsls	r3, r1, #8
 8003acc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ad0:	0202      	lsls	r2, r0, #8
 8003ad2:	6979      	ldr	r1, [r7, #20]
 8003ad4:	6849      	ldr	r1, [r1, #4]
 8003ad6:	0849      	lsrs	r1, r1, #1
 8003ad8:	2000      	movs	r0, #0
 8003ada:	460c      	mov	r4, r1
 8003adc:	4605      	mov	r5, r0
 8003ade:	eb12 0804 	adds.w	r8, r2, r4
 8003ae2:	eb43 0905 	adc.w	r9, r3, r5
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	469a      	mov	sl, r3
 8003aee:	4693      	mov	fp, r2
 8003af0:	4652      	mov	r2, sl
 8003af2:	465b      	mov	r3, fp
 8003af4:	4640      	mov	r0, r8
 8003af6:	4649      	mov	r1, r9
 8003af8:	f7fc fc5a 	bl	80003b0 <__aeabi_uldivmod>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4613      	mov	r3, r2
 8003b02:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b0a:	d308      	bcc.n	8003b1e <UART_SetConfig+0x9a2>
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b12:	d204      	bcs.n	8003b1e <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b1a:	60da      	str	r2, [r3, #12]
 8003b1c:	e17f      	b.n	8003e1e <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003b24:	e17b      	b.n	8003e1e <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b2e:	f040 80bd 	bne.w	8003cac <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8003b32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003b36:	2b20      	cmp	r3, #32
 8003b38:	dc48      	bgt.n	8003bcc <UART_SetConfig+0xa50>
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	db7b      	blt.n	8003c36 <UART_SetConfig+0xaba>
 8003b3e:	2b20      	cmp	r3, #32
 8003b40:	d879      	bhi.n	8003c36 <UART_SetConfig+0xaba>
 8003b42:	a201      	add	r2, pc, #4	@ (adr r2, 8003b48 <UART_SetConfig+0x9cc>)
 8003b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b48:	08003bd3 	.word	0x08003bd3
 8003b4c:	08003bdb 	.word	0x08003bdb
 8003b50:	08003c37 	.word	0x08003c37
 8003b54:	08003c37 	.word	0x08003c37
 8003b58:	08003be3 	.word	0x08003be3
 8003b5c:	08003c37 	.word	0x08003c37
 8003b60:	08003c37 	.word	0x08003c37
 8003b64:	08003c37 	.word	0x08003c37
 8003b68:	08003bf3 	.word	0x08003bf3
 8003b6c:	08003c37 	.word	0x08003c37
 8003b70:	08003c37 	.word	0x08003c37
 8003b74:	08003c37 	.word	0x08003c37
 8003b78:	08003c37 	.word	0x08003c37
 8003b7c:	08003c37 	.word	0x08003c37
 8003b80:	08003c37 	.word	0x08003c37
 8003b84:	08003c37 	.word	0x08003c37
 8003b88:	08003c03 	.word	0x08003c03
 8003b8c:	08003c37 	.word	0x08003c37
 8003b90:	08003c37 	.word	0x08003c37
 8003b94:	08003c37 	.word	0x08003c37
 8003b98:	08003c37 	.word	0x08003c37
 8003b9c:	08003c37 	.word	0x08003c37
 8003ba0:	08003c37 	.word	0x08003c37
 8003ba4:	08003c37 	.word	0x08003c37
 8003ba8:	08003c37 	.word	0x08003c37
 8003bac:	08003c37 	.word	0x08003c37
 8003bb0:	08003c37 	.word	0x08003c37
 8003bb4:	08003c37 	.word	0x08003c37
 8003bb8:	08003c37 	.word	0x08003c37
 8003bbc:	08003c37 	.word	0x08003c37
 8003bc0:	08003c37 	.word	0x08003c37
 8003bc4:	08003c37 	.word	0x08003c37
 8003bc8:	08003c29 	.word	0x08003c29
 8003bcc:	2b40      	cmp	r3, #64	@ 0x40
 8003bce:	d02e      	beq.n	8003c2e <UART_SetConfig+0xab2>
 8003bd0:	e031      	b.n	8003c36 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd2:	f7fe ff01 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003bd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003bd8:	e033      	b.n	8003c42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bda:	f7fe ff13 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 8003bde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003be0:	e02f      	b.n	8003c42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe ff38 	bl	8002a5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003bf0:	e027      	b.n	8003c42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003bf2:	f107 0318 	add.w	r3, r7, #24
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7ff f884 	bl	8002d04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c00:	e01f      	b.n	8003c42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c02:	4b69      	ldr	r3, [pc, #420]	@ (8003da8 <UART_SetConfig+0xc2c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0320 	and.w	r3, r3, #32
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d009      	beq.n	8003c22 <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003c0e:	4b66      	ldr	r3, [pc, #408]	@ (8003da8 <UART_SetConfig+0xc2c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	08db      	lsrs	r3, r3, #3
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	4a64      	ldr	r2, [pc, #400]	@ (8003dac <UART_SetConfig+0xc30>)
 8003c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c20:	e00f      	b.n	8003c42 <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 8003c22:	4b62      	ldr	r3, [pc, #392]	@ (8003dac <UART_SetConfig+0xc30>)
 8003c24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c26:	e00c      	b.n	8003c42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003c28:	4b61      	ldr	r3, [pc, #388]	@ (8003db0 <UART_SetConfig+0xc34>)
 8003c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c2c:	e009      	b.n	8003c42 <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003c34:	e005      	b.n	8003c42 <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003c40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80ea 	beq.w	8003e1e <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4e:	4a55      	ldr	r2, [pc, #340]	@ (8003da4 <UART_SetConfig+0xc28>)
 8003c50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c54:	461a      	mov	r2, r3
 8003c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c58:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c5c:	005a      	lsls	r2, r3, #1
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	085b      	lsrs	r3, r3, #1
 8003c64:	441a      	add	r2, r3
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c72:	2b0f      	cmp	r3, #15
 8003c74:	d916      	bls.n	8003ca4 <UART_SetConfig+0xb28>
 8003c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c7c:	d212      	bcs.n	8003ca4 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	f023 030f 	bic.w	r3, r3, #15
 8003c86:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c8a:	085b      	lsrs	r3, r3, #1
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003c96:	4313      	orrs	r3, r2
 8003c98:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003ca0:	60da      	str	r2, [r3, #12]
 8003ca2:	e0bc      	b.n	8003e1e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003caa:	e0b8      	b.n	8003e1e <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cac:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003cb0:	2b20      	cmp	r3, #32
 8003cb2:	dc4b      	bgt.n	8003d4c <UART_SetConfig+0xbd0>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f2c0 8087 	blt.w	8003dc8 <UART_SetConfig+0xc4c>
 8003cba:	2b20      	cmp	r3, #32
 8003cbc:	f200 8084 	bhi.w	8003dc8 <UART_SetConfig+0xc4c>
 8003cc0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cc8 <UART_SetConfig+0xb4c>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003d53 	.word	0x08003d53
 8003ccc:	08003d5b 	.word	0x08003d5b
 8003cd0:	08003dc9 	.word	0x08003dc9
 8003cd4:	08003dc9 	.word	0x08003dc9
 8003cd8:	08003d63 	.word	0x08003d63
 8003cdc:	08003dc9 	.word	0x08003dc9
 8003ce0:	08003dc9 	.word	0x08003dc9
 8003ce4:	08003dc9 	.word	0x08003dc9
 8003ce8:	08003d73 	.word	0x08003d73
 8003cec:	08003dc9 	.word	0x08003dc9
 8003cf0:	08003dc9 	.word	0x08003dc9
 8003cf4:	08003dc9 	.word	0x08003dc9
 8003cf8:	08003dc9 	.word	0x08003dc9
 8003cfc:	08003dc9 	.word	0x08003dc9
 8003d00:	08003dc9 	.word	0x08003dc9
 8003d04:	08003dc9 	.word	0x08003dc9
 8003d08:	08003d83 	.word	0x08003d83
 8003d0c:	08003dc9 	.word	0x08003dc9
 8003d10:	08003dc9 	.word	0x08003dc9
 8003d14:	08003dc9 	.word	0x08003dc9
 8003d18:	08003dc9 	.word	0x08003dc9
 8003d1c:	08003dc9 	.word	0x08003dc9
 8003d20:	08003dc9 	.word	0x08003dc9
 8003d24:	08003dc9 	.word	0x08003dc9
 8003d28:	08003dc9 	.word	0x08003dc9
 8003d2c:	08003dc9 	.word	0x08003dc9
 8003d30:	08003dc9 	.word	0x08003dc9
 8003d34:	08003dc9 	.word	0x08003dc9
 8003d38:	08003dc9 	.word	0x08003dc9
 8003d3c:	08003dc9 	.word	0x08003dc9
 8003d40:	08003dc9 	.word	0x08003dc9
 8003d44:	08003dc9 	.word	0x08003dc9
 8003d48:	08003dbb 	.word	0x08003dbb
 8003d4c:	2b40      	cmp	r3, #64	@ 0x40
 8003d4e:	d037      	beq.n	8003dc0 <UART_SetConfig+0xc44>
 8003d50:	e03a      	b.n	8003dc8 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d52:	f7fe fe41 	bl	80029d8 <HAL_RCC_GetPCLK1Freq>
 8003d56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003d58:	e03c      	b.n	8003dd4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d5a:	f7fe fe53 	bl	8002a04 <HAL_RCC_GetPCLK2Freq>
 8003d5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003d60:	e038      	b.n	8003dd4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d62:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fe fe78 	bl	8002a5c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003d70:	e030      	b.n	8003dd4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d72:	f107 0318 	add.w	r3, r7, #24
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe ffc4 	bl	8002d04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003d80:	e028      	b.n	8003dd4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d82:	4b09      	ldr	r3, [pc, #36]	@ (8003da8 <UART_SetConfig+0xc2c>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0320 	and.w	r3, r3, #32
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d012      	beq.n	8003db4 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003d8e:	4b06      	ldr	r3, [pc, #24]	@ (8003da8 <UART_SetConfig+0xc2c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	08db      	lsrs	r3, r3, #3
 8003d94:	f003 0303 	and.w	r3, r3, #3
 8003d98:	4a04      	ldr	r2, [pc, #16]	@ (8003dac <UART_SetConfig+0xc30>)
 8003d9a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003da0:	e018      	b.n	8003dd4 <UART_SetConfig+0xc58>
 8003da2:	bf00      	nop
 8003da4:	080066ec 	.word	0x080066ec
 8003da8:	58024400 	.word	0x58024400
 8003dac:	03d09000 	.word	0x03d09000
 8003db0:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8003db4:	4b24      	ldr	r3, [pc, #144]	@ (8003e48 <UART_SetConfig+0xccc>)
 8003db6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003db8:	e00c      	b.n	8003dd4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003dba:	4b24      	ldr	r3, [pc, #144]	@ (8003e4c <UART_SetConfig+0xcd0>)
 8003dbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003dbe:	e009      	b.n	8003dd4 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dc0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003dc6:	e005      	b.n	8003dd4 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003dd2:	bf00      	nop
    }

    if (pclk != 0U)
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d021      	beq.n	8003e1e <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dde:	4a1c      	ldr	r2, [pc, #112]	@ (8003e50 <UART_SetConfig+0xcd4>)
 8003de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003de4:	461a      	mov	r2, r3
 8003de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003de8:	fbb3 f2f2 	udiv	r2, r3, r2
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	085b      	lsrs	r3, r3, #1
 8003df2:	441a      	add	r2, r3
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e00:	2b0f      	cmp	r3, #15
 8003e02:	d909      	bls.n	8003e18 <UART_SetConfig+0xc9c>
 8003e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e0a:	d205      	bcs.n	8003e18 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	60da      	str	r2, [r3, #12]
 8003e16:	e002      	b.n	8003e1e <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	2200      	movs	r2, #0
 8003e32:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2200      	movs	r2, #0
 8003e38:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003e3a:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3748      	adds	r7, #72	@ 0x48
 8003e42:	46bd      	mov	sp, r7
 8003e44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e48:	03d09000 	.word	0x03d09000
 8003e4c:	003d0900 	.word	0x003d0900
 8003e50:	080066ec 	.word	0x080066ec

08003e54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00a      	beq.n	8003e7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ea4:	f003 0302 	and.w	r3, r3, #2
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00a      	beq.n	8003ec2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec6:	f003 0304 	and.w	r3, r3, #4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00a      	beq.n	8003ee4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee8:	f003 0310 	and.w	r3, r3, #16
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	430a      	orrs	r2, r1
 8003f04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0a:	f003 0320 	and.w	r3, r3, #32
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d01a      	beq.n	8003f6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	430a      	orrs	r2, r1
 8003f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f52:	d10a      	bne.n	8003f6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00a      	beq.n	8003f8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]
  }
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b098      	sub	sp, #96	@ 0x60
 8003f9c:	af02      	add	r7, sp, #8
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fa8:	f7fd f9ce 	bl	8001348 <HAL_GetTick>
 8003fac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b08      	cmp	r3, #8
 8003fba:	d12f      	bne.n	800401c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fbc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003fc0:	9300      	str	r3, [sp, #0]
 8003fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f88e 	bl	80040ec <UART_WaitOnFlagUntilTimeout>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d022      	beq.n	800401c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fde:	e853 3f00 	ldrex	r3, [r3]
 8003fe2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003fe4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fea:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ff4:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ff6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ffa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ffc:	e841 2300 	strex	r3, r2, [r1]
 8004000:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004002:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e6      	bne.n	8003fd6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2220      	movs	r2, #32
 800400c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e063      	b.n	80040e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	2b04      	cmp	r3, #4
 8004028:	d149      	bne.n	80040be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800402a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800402e:	9300      	str	r3, [sp, #0]
 8004030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004032:	2200      	movs	r2, #0
 8004034:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f000 f857 	bl	80040ec <UART_WaitOnFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d03c      	beq.n	80040be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	623b      	str	r3, [r7, #32]
   return(result);
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004058:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	461a      	mov	r2, r3
 8004060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004062:	633b      	str	r3, [r7, #48]	@ 0x30
 8004064:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004066:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800406a:	e841 2300 	strex	r3, r2, [r1]
 800406e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1e6      	bne.n	8004044 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3308      	adds	r3, #8
 800407c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	60fb      	str	r3, [r7, #12]
   return(result);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3308      	adds	r3, #8
 8004094:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004096:	61fa      	str	r2, [r7, #28]
 8004098:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	69b9      	ldr	r1, [r7, #24]
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	617b      	str	r3, [r7, #20]
   return(result);
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e5      	bne.n	8004076 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e012      	b.n	80040e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2220      	movs	r2, #32
 80040c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80040e2:	2300      	movs	r3, #0
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3758      	adds	r7, #88	@ 0x58
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040fc:	e04f      	b.n	800419e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004104:	d04b      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004106:	f7fd f91f 	bl	8001348 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	429a      	cmp	r2, r3
 8004114:	d302      	bcc.n	800411c <UART_WaitOnFlagUntilTimeout+0x30>
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e04e      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	d037      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0xb2>
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2b80      	cmp	r3, #128	@ 0x80
 8004132:	d034      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	2b40      	cmp	r3, #64	@ 0x40
 8004138:	d031      	beq.n	800419e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	69db      	ldr	r3, [r3, #28]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b08      	cmp	r3, #8
 8004146:	d110      	bne.n	800416a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	2208      	movs	r2, #8
 800414e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f839 	bl	80041c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2208      	movs	r2, #8
 800415a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e029      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004174:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004178:	d111      	bne.n	800419e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004182:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f81f 	bl	80041c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e00f      	b.n	80041be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69da      	ldr	r2, [r3, #28]
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	4013      	ands	r3, r2
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	bf0c      	ite	eq
 80041ae:	2301      	moveq	r3, #1
 80041b0:	2300      	movne	r3, #0
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	461a      	mov	r2, r3
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d0a0      	beq.n	80040fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
	...

080041c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b095      	sub	sp, #84	@ 0x54
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80041de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	461a      	mov	r2, r3
 80041ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80041f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80041f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80041fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e6      	bne.n	80041d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3308      	adds	r3, #8
 8004208:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6a3b      	ldr	r3, [r7, #32]
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	61fb      	str	r3, [r7, #28]
   return(result);
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	4b1e      	ldr	r3, [pc, #120]	@ (8004290 <UART_EndRxTransfer+0xc8>)
 8004216:	4013      	ands	r3, r2
 8004218:	64bb      	str	r3, [r7, #72]	@ 0x48
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3308      	adds	r3, #8
 8004220:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004222:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004224:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004228:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e5      	bne.n	8004202 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800423a:	2b01      	cmp	r3, #1
 800423c:	d118      	bne.n	8004270 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	e853 3f00 	ldrex	r3, [r3]
 800424a:	60bb      	str	r3, [r7, #8]
   return(result);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f023 0310 	bic.w	r3, r3, #16
 8004252:	647b      	str	r3, [r7, #68]	@ 0x44
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800425c:	61bb      	str	r3, [r7, #24]
 800425e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004260:	6979      	ldr	r1, [r7, #20]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	e841 2300 	strex	r3, r2, [r1]
 8004268:	613b      	str	r3, [r7, #16]
   return(result);
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d1e6      	bne.n	800423e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2220      	movs	r2, #32
 8004274:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004284:	bf00      	nop
 8004286:	3754      	adds	r7, #84	@ 0x54
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	effffffe 	.word	0xeffffffe

08004294 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80042a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80042a6:	2b84      	cmp	r3, #132	@ 0x84
 80042a8:	d005      	beq.n	80042b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80042aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	4413      	add	r3, r2
 80042b2:	3303      	adds	r3, #3
 80042b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80042b6:	68fb      	ldr	r3, [r7, #12]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3714      	adds	r7, #20
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80042c8:	f000 fae4 	bl	8004894 <vTaskStartScheduler>
  
  return osOK;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80042d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042d4:	b089      	sub	sp, #36	@ 0x24
 80042d6:	af04      	add	r7, sp, #16
 80042d8:	6078      	str	r0, [r7, #4]
 80042da:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d020      	beq.n	8004326 <osThreadCreate+0x54>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d01c      	beq.n	8004326 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	685c      	ldr	r4, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691e      	ldr	r6, [r3, #16]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042fe:	4618      	mov	r0, r3
 8004300:	f7ff ffc8 	bl	8004294 <makeFreeRtosPriority>
 8004304:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800430e:	9202      	str	r2, [sp, #8]
 8004310:	9301      	str	r3, [sp, #4]
 8004312:	9100      	str	r1, [sp, #0]
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4632      	mov	r2, r6
 8004318:	4629      	mov	r1, r5
 800431a:	4620      	mov	r0, r4
 800431c:	f000 f8ed 	bl	80044fa <xTaskCreateStatic>
 8004320:	4603      	mov	r3, r0
 8004322:	60fb      	str	r3, [r7, #12]
 8004324:	e01c      	b.n	8004360 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685c      	ldr	r4, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004332:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff ffaa 	bl	8004294 <makeFreeRtosPriority>
 8004340:	4602      	mov	r2, r0
 8004342:	f107 030c 	add.w	r3, r7, #12
 8004346:	9301      	str	r3, [sp, #4]
 8004348:	9200      	str	r2, [sp, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	4632      	mov	r2, r6
 800434e:	4629      	mov	r1, r5
 8004350:	4620      	mov	r0, r4
 8004352:	f000 f932 	bl	80045ba <xTaskCreate>
 8004356:	4603      	mov	r3, r0
 8004358:	2b01      	cmp	r3, #1
 800435a:	d001      	beq.n	8004360 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800435c:	2300      	movs	r3, #0
 800435e:	e000      	b.n	8004362 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004360:	68fb      	ldr	r3, [r7, #12]
}
 8004362:	4618      	mov	r0, r3
 8004364:	3714      	adds	r7, #20
 8004366:	46bd      	mov	sp, r7
 8004368:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800436a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b084      	sub	sp, #16
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d001      	beq.n	8004380 <osDelay+0x16>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	e000      	b.n	8004382 <osDelay+0x18>
 8004380:	2301      	movs	r3, #1
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fa50 	bl	8004828 <vTaskDelay>
  
  return osOK;
 8004388:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004392:	b480      	push	{r7}
 8004394:	b083      	sub	sp, #12
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f103 0208 	add.w	r2, r3, #8
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f04f 32ff 	mov.w	r2, #4294967295
 80043aa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f103 0208 	add.w	r2, r3, #8
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f103 0208 	add.w	r2, r3, #8
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80043c6:	bf00      	nop
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr

080043d2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689a      	ldr	r2, [r3, #8]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	601a      	str	r2, [r3, #0]
}
 8004428:	bf00      	nop
 800442a:	3714      	adds	r7, #20
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800444a:	d103      	bne.n	8004454 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	60fb      	str	r3, [r7, #12]
 8004452:	e00c      	b.n	800446e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	3308      	adds	r3, #8
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	e002      	b.n	8004462 <vListInsert+0x2e>
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	429a      	cmp	r2, r3
 800446c:	d2f6      	bcs.n	800445c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	685a      	ldr	r2, [r3, #4]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	601a      	str	r2, [r3, #0]
}
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80044a6:	b480      	push	{r7}
 80044a8:	b085      	sub	sp, #20
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6892      	ldr	r2, [r2, #8]
 80044bc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6852      	ldr	r2, [r2, #4]
 80044c6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d103      	bne.n	80044da <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	689a      	ldr	r2, [r3, #8]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	1e5a      	subs	r2, r3, #1
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3714      	adds	r7, #20
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044fa:	b580      	push	{r7, lr}
 80044fc:	b08e      	sub	sp, #56	@ 0x38
 80044fe:	af04      	add	r7, sp, #16
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004508:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004520:	bf00      	nop
 8004522:	bf00      	nop
 8004524:	e7fd      	b.n	8004522 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10b      	bne.n	8004544 <xTaskCreateStatic+0x4a>
	__asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	61fb      	str	r3, [r7, #28]
}
 800453e:	bf00      	nop
 8004540:	bf00      	nop
 8004542:	e7fd      	b.n	8004540 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004544:	2354      	movs	r3, #84	@ 0x54
 8004546:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b54      	cmp	r3, #84	@ 0x54
 800454c:	d00b      	beq.n	8004566 <xTaskCreateStatic+0x6c>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	61bb      	str	r3, [r7, #24]
}
 8004560:	bf00      	nop
 8004562:	bf00      	nop
 8004564:	e7fd      	b.n	8004562 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004566:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800456a:	2b00      	cmp	r3, #0
 800456c:	d01e      	beq.n	80045ac <xTaskCreateStatic+0xb2>
 800456e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004570:	2b00      	cmp	r3, #0
 8004572:	d01b      	beq.n	80045ac <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004576:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800457c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	2202      	movs	r2, #2
 8004582:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004586:	2300      	movs	r3, #0
 8004588:	9303      	str	r3, [sp, #12]
 800458a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458c:	9302      	str	r3, [sp, #8]
 800458e:	f107 0314 	add.w	r3, r7, #20
 8004592:	9301      	str	r3, [sp, #4]
 8004594:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f850 	bl	8004644 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045a6:	f000 f8d5 	bl	8004754 <prvAddNewTaskToReadyList>
 80045aa:	e001      	b.n	80045b0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045b0:	697b      	ldr	r3, [r7, #20]
	}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3728      	adds	r7, #40	@ 0x28
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b08c      	sub	sp, #48	@ 0x30
 80045be:	af04      	add	r7, sp, #16
 80045c0:	60f8      	str	r0, [r7, #12]
 80045c2:	60b9      	str	r1, [r7, #8]
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	4613      	mov	r3, r2
 80045c8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045ca:	88fb      	ldrh	r3, [r7, #6]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fef2 	bl	80053b8 <pvPortMalloc>
 80045d4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00e      	beq.n	80045fa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045dc:	2054      	movs	r0, #84	@ 0x54
 80045de:	f000 feeb 	bl	80053b8 <pvPortMalloc>
 80045e2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80045f0:	e005      	b.n	80045fe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045f2:	6978      	ldr	r0, [r7, #20]
 80045f4:	f000 ffae 	bl	8005554 <vPortFree>
 80045f8:	e001      	b.n	80045fe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80045fa:	2300      	movs	r3, #0
 80045fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d017      	beq.n	8004634 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800460c:	88fa      	ldrh	r2, [r7, #6]
 800460e:	2300      	movs	r3, #0
 8004610:	9303      	str	r3, [sp, #12]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	9302      	str	r3, [sp, #8]
 8004616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004618:	9301      	str	r3, [sp, #4]
 800461a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 f80e 	bl	8004644 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004628:	69f8      	ldr	r0, [r7, #28]
 800462a:	f000 f893 	bl	8004754 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800462e:	2301      	movs	r3, #1
 8004630:	61bb      	str	r3, [r7, #24]
 8004632:	e002      	b.n	800463a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004634:	f04f 33ff 	mov.w	r3, #4294967295
 8004638:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800463a:	69bb      	ldr	r3, [r7, #24]
	}
 800463c:	4618      	mov	r0, r3
 800463e:	3720      	adds	r7, #32
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004654:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800465c:	440b      	add	r3, r1
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	4413      	add	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	f023 0307 	bic.w	r3, r3, #7
 800466a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f003 0307 	and.w	r3, r3, #7
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00b      	beq.n	800468e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	617b      	str	r3, [r7, #20]
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	e7fd      	b.n	800468a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d01f      	beq.n	80046d4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004694:	2300      	movs	r3, #0
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	e012      	b.n	80046c0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	4413      	add	r3, r2
 80046a0:	7819      	ldrb	r1, [r3, #0]
 80046a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	4413      	add	r3, r2
 80046a8:	3334      	adds	r3, #52	@ 0x34
 80046aa:	460a      	mov	r2, r1
 80046ac:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	4413      	add	r3, r2
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d006      	beq.n	80046c8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	3301      	adds	r3, #1
 80046be:	61fb      	str	r3, [r7, #28]
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	2b0f      	cmp	r3, #15
 80046c4:	d9e9      	bls.n	800469a <prvInitialiseNewTask+0x56>
 80046c6:	e000      	b.n	80046ca <prvInitialiseNewTask+0x86>
			{
				break;
 80046c8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046d2:	e003      	b.n	80046dc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80046d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d6:	2200      	movs	r2, #0
 80046d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046de:	2b06      	cmp	r3, #6
 80046e0:	d901      	bls.n	80046e6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046e2:	2306      	movs	r3, #6
 80046e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046f0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80046f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046f4:	2200      	movs	r2, #0
 80046f6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fa:	3304      	adds	r3, #4
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fe68 	bl	80043d2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004704:	3318      	adds	r3, #24
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff fe63 	bl	80043d2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800470c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004710:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004714:	f1c3 0207 	rsb	r2, r3, #7
 8004718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800471c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800471e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004720:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004724:	2200      	movs	r2, #0
 8004726:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	69b8      	ldr	r0, [r7, #24]
 8004736:	f000 fc2b 	bl	8004f90 <pxPortInitialiseStack>
 800473a:	4602      	mov	r2, r0
 800473c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004746:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800474a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800474c:	bf00      	nop
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800475c:	f000 fd4c 	bl	80051f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004760:	4b2a      	ldr	r3, [pc, #168]	@ (800480c <prvAddNewTaskToReadyList+0xb8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	3301      	adds	r3, #1
 8004766:	4a29      	ldr	r2, [pc, #164]	@ (800480c <prvAddNewTaskToReadyList+0xb8>)
 8004768:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800476a:	4b29      	ldr	r3, [pc, #164]	@ (8004810 <prvAddNewTaskToReadyList+0xbc>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d109      	bne.n	8004786 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004772:	4a27      	ldr	r2, [pc, #156]	@ (8004810 <prvAddNewTaskToReadyList+0xbc>)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004778:	4b24      	ldr	r3, [pc, #144]	@ (800480c <prvAddNewTaskToReadyList+0xb8>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d110      	bne.n	80047a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004780:	f000 fac4 	bl	8004d0c <prvInitialiseTaskLists>
 8004784:	e00d      	b.n	80047a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004786:	4b23      	ldr	r3, [pc, #140]	@ (8004814 <prvAddNewTaskToReadyList+0xc0>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800478e:	4b20      	ldr	r3, [pc, #128]	@ (8004810 <prvAddNewTaskToReadyList+0xbc>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004798:	429a      	cmp	r2, r3
 800479a:	d802      	bhi.n	80047a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800479c:	4a1c      	ldr	r2, [pc, #112]	@ (8004810 <prvAddNewTaskToReadyList+0xbc>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80047a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004818 <prvAddNewTaskToReadyList+0xc4>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3301      	adds	r3, #1
 80047a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004818 <prvAddNewTaskToReadyList+0xc4>)
 80047aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b0:	2201      	movs	r2, #1
 80047b2:	409a      	lsls	r2, r3
 80047b4:	4b19      	ldr	r3, [pc, #100]	@ (800481c <prvAddNewTaskToReadyList+0xc8>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	4a18      	ldr	r2, [pc, #96]	@ (800481c <prvAddNewTaskToReadyList+0xc8>)
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047c2:	4613      	mov	r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4a15      	ldr	r2, [pc, #84]	@ (8004820 <prvAddNewTaskToReadyList+0xcc>)
 80047cc:	441a      	add	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3304      	adds	r3, #4
 80047d2:	4619      	mov	r1, r3
 80047d4:	4610      	mov	r0, r2
 80047d6:	f7ff fe09 	bl	80043ec <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047da:	f000 fd3f 	bl	800525c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047de:	4b0d      	ldr	r3, [pc, #52]	@ (8004814 <prvAddNewTaskToReadyList+0xc0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00e      	beq.n	8004804 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004810 <prvAddNewTaskToReadyList+0xbc>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d207      	bcs.n	8004804 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004824 <prvAddNewTaskToReadyList+0xd0>)
 80047f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004804:	bf00      	nop
 8004806:	3708      	adds	r7, #8
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	240004c0 	.word	0x240004c0
 8004810:	240003c0 	.word	0x240003c0
 8004814:	240004cc 	.word	0x240004cc
 8004818:	240004dc 	.word	0x240004dc
 800481c:	240004c8 	.word	0x240004c8
 8004820:	240003c4 	.word	0x240003c4
 8004824:	e000ed04 	.word	0xe000ed04

08004828 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004830:	2300      	movs	r3, #0
 8004832:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d018      	beq.n	800486c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800483a:	4b14      	ldr	r3, [pc, #80]	@ (800488c <vTaskDelay+0x64>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00b      	beq.n	800485a <vTaskDelay+0x32>
	__asm volatile
 8004842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004846:	f383 8811 	msr	BASEPRI, r3
 800484a:	f3bf 8f6f 	isb	sy
 800484e:	f3bf 8f4f 	dsb	sy
 8004852:	60bb      	str	r3, [r7, #8]
}
 8004854:	bf00      	nop
 8004856:	bf00      	nop
 8004858:	e7fd      	b.n	8004856 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800485a:	f000 f87d 	bl	8004958 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800485e:	2100      	movs	r1, #0
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fb2f 	bl	8004ec4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004866:	f000 f885 	bl	8004974 <xTaskResumeAll>
 800486a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d107      	bne.n	8004882 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004872:	4b07      	ldr	r3, [pc, #28]	@ (8004890 <vTaskDelay+0x68>)
 8004874:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004882:	bf00      	nop
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	240004e8 	.word	0x240004e8
 8004890:	e000ed04 	.word	0xe000ed04

08004894 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b08a      	sub	sp, #40	@ 0x28
 8004898:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800489a:	2300      	movs	r3, #0
 800489c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800489e:	2300      	movs	r3, #0
 80048a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80048a2:	463a      	mov	r2, r7
 80048a4:	1d39      	adds	r1, r7, #4
 80048a6:	f107 0308 	add.w	r3, r7, #8
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fb fef8 	bl	80006a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80048b0:	6839      	ldr	r1, [r7, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68ba      	ldr	r2, [r7, #8]
 80048b6:	9202      	str	r2, [sp, #8]
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	2300      	movs	r3, #0
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	2300      	movs	r3, #0
 80048c0:	460a      	mov	r2, r1
 80048c2:	491f      	ldr	r1, [pc, #124]	@ (8004940 <vTaskStartScheduler+0xac>)
 80048c4:	481f      	ldr	r0, [pc, #124]	@ (8004944 <vTaskStartScheduler+0xb0>)
 80048c6:	f7ff fe18 	bl	80044fa <xTaskCreateStatic>
 80048ca:	4603      	mov	r3, r0
 80048cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004948 <vTaskStartScheduler+0xb4>)
 80048ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80048d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004948 <vTaskStartScheduler+0xb4>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80048d8:	2301      	movs	r3, #1
 80048da:	617b      	str	r3, [r7, #20]
 80048dc:	e001      	b.n	80048e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80048de:	2300      	movs	r3, #0
 80048e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d116      	bne.n	8004916 <vTaskStartScheduler+0x82>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	613b      	str	r3, [r7, #16]
}
 80048fa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80048fc:	4b13      	ldr	r3, [pc, #76]	@ (800494c <vTaskStartScheduler+0xb8>)
 80048fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004902:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004904:	4b12      	ldr	r3, [pc, #72]	@ (8004950 <vTaskStartScheduler+0xbc>)
 8004906:	2201      	movs	r2, #1
 8004908:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800490a:	4b12      	ldr	r3, [pc, #72]	@ (8004954 <vTaskStartScheduler+0xc0>)
 800490c:	2200      	movs	r2, #0
 800490e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004910:	f000 fbce 	bl	80050b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004914:	e00f      	b.n	8004936 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800491c:	d10b      	bne.n	8004936 <vTaskStartScheduler+0xa2>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	60fb      	str	r3, [r7, #12]
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	e7fd      	b.n	8004932 <vTaskStartScheduler+0x9e>
}
 8004936:	bf00      	nop
 8004938:	3718      	adds	r7, #24
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	080066c8 	.word	0x080066c8
 8004944:	08004cdd 	.word	0x08004cdd
 8004948:	240004e4 	.word	0x240004e4
 800494c:	240004e0 	.word	0x240004e0
 8004950:	240004cc 	.word	0x240004cc
 8004954:	240004c4 	.word	0x240004c4

08004958 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800495c:	4b04      	ldr	r3, [pc, #16]	@ (8004970 <vTaskSuspendAll+0x18>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3301      	adds	r3, #1
 8004962:	4a03      	ldr	r2, [pc, #12]	@ (8004970 <vTaskSuspendAll+0x18>)
 8004964:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004966:	bf00      	nop
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	240004e8 	.word	0x240004e8

08004974 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800497a:	2300      	movs	r3, #0
 800497c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800497e:	2300      	movs	r3, #0
 8004980:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004982:	4b42      	ldr	r3, [pc, #264]	@ (8004a8c <xTaskResumeAll+0x118>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10b      	bne.n	80049a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498e:	f383 8811 	msr	BASEPRI, r3
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	f3bf 8f4f 	dsb	sy
 800499a:	603b      	str	r3, [r7, #0]
}
 800499c:	bf00      	nop
 800499e:	bf00      	nop
 80049a0:	e7fd      	b.n	800499e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80049a2:	f000 fc29 	bl	80051f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80049a6:	4b39      	ldr	r3, [pc, #228]	@ (8004a8c <xTaskResumeAll+0x118>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	4a37      	ldr	r2, [pc, #220]	@ (8004a8c <xTaskResumeAll+0x118>)
 80049ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049b0:	4b36      	ldr	r3, [pc, #216]	@ (8004a8c <xTaskResumeAll+0x118>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d161      	bne.n	8004a7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80049b8:	4b35      	ldr	r3, [pc, #212]	@ (8004a90 <xTaskResumeAll+0x11c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d05d      	beq.n	8004a7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80049c0:	e02e      	b.n	8004a20 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c2:	4b34      	ldr	r3, [pc, #208]	@ (8004a94 <xTaskResumeAll+0x120>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3318      	adds	r3, #24
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff fd69 	bl	80044a6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	3304      	adds	r3, #4
 80049d8:	4618      	mov	r0, r3
 80049da:	f7ff fd64 	bl	80044a6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e2:	2201      	movs	r2, #1
 80049e4:	409a      	lsls	r2, r3
 80049e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004a98 <xTaskResumeAll+0x124>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	4a2a      	ldr	r2, [pc, #168]	@ (8004a98 <xTaskResumeAll+0x124>)
 80049ee:	6013      	str	r3, [r2, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049f4:	4613      	mov	r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	4a27      	ldr	r2, [pc, #156]	@ (8004a9c <xTaskResumeAll+0x128>)
 80049fe:	441a      	add	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3304      	adds	r3, #4
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f7ff fcf0 	bl	80043ec <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a10:	4b23      	ldr	r3, [pc, #140]	@ (8004aa0 <xTaskResumeAll+0x12c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d302      	bcc.n	8004a20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004a1a:	4b22      	ldr	r3, [pc, #136]	@ (8004aa4 <xTaskResumeAll+0x130>)
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a20:	4b1c      	ldr	r3, [pc, #112]	@ (8004a94 <xTaskResumeAll+0x120>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1cc      	bne.n	80049c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004a2e:	f000 fa0b 	bl	8004e48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004a32:	4b1d      	ldr	r3, [pc, #116]	@ (8004aa8 <xTaskResumeAll+0x134>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d010      	beq.n	8004a60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004a3e:	f000 f837 	bl	8004ab0 <xTaskIncrementTick>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d002      	beq.n	8004a4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004a48:	4b16      	ldr	r3, [pc, #88]	@ (8004aa4 <xTaskResumeAll+0x130>)
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d1f1      	bne.n	8004a3e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004a5a:	4b13      	ldr	r3, [pc, #76]	@ (8004aa8 <xTaskResumeAll+0x134>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004a60:	4b10      	ldr	r3, [pc, #64]	@ (8004aa4 <xTaskResumeAll+0x130>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d009      	beq.n	8004a7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004aac <xTaskResumeAll+0x138>)
 8004a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a72:	601a      	str	r2, [r3, #0]
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a7c:	f000 fbee 	bl	800525c <vPortExitCritical>

	return xAlreadyYielded;
 8004a80:	68bb      	ldr	r3, [r7, #8]
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	240004e8 	.word	0x240004e8
 8004a90:	240004c0 	.word	0x240004c0
 8004a94:	24000480 	.word	0x24000480
 8004a98:	240004c8 	.word	0x240004c8
 8004a9c:	240003c4 	.word	0x240003c4
 8004aa0:	240003c0 	.word	0x240003c0
 8004aa4:	240004d4 	.word	0x240004d4
 8004aa8:	240004d0 	.word	0x240004d0
 8004aac:	e000ed04 	.word	0xe000ed04

08004ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004aba:	4b4f      	ldr	r3, [pc, #316]	@ (8004bf8 <xTaskIncrementTick+0x148>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f040 808f 	bne.w	8004be2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ac4:	4b4d      	ldr	r3, [pc, #308]	@ (8004bfc <xTaskIncrementTick+0x14c>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3301      	adds	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004acc:	4a4b      	ldr	r2, [pc, #300]	@ (8004bfc <xTaskIncrementTick+0x14c>)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d121      	bne.n	8004b1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ad8:	4b49      	ldr	r3, [pc, #292]	@ (8004c00 <xTaskIncrementTick+0x150>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00b      	beq.n	8004afa <xTaskIncrementTick+0x4a>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	603b      	str	r3, [r7, #0]
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	e7fd      	b.n	8004af6 <xTaskIncrementTick+0x46>
 8004afa:	4b41      	ldr	r3, [pc, #260]	@ (8004c00 <xTaskIncrementTick+0x150>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	4b40      	ldr	r3, [pc, #256]	@ (8004c04 <xTaskIncrementTick+0x154>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a3e      	ldr	r2, [pc, #248]	@ (8004c00 <xTaskIncrementTick+0x150>)
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	4a3e      	ldr	r2, [pc, #248]	@ (8004c04 <xTaskIncrementTick+0x154>)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004c08 <xTaskIncrementTick+0x158>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	3301      	adds	r3, #1
 8004b14:	4a3c      	ldr	r2, [pc, #240]	@ (8004c08 <xTaskIncrementTick+0x158>)
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	f000 f996 	bl	8004e48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b1c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c0c <xTaskIncrementTick+0x15c>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	693a      	ldr	r2, [r7, #16]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d348      	bcc.n	8004bb8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b26:	4b36      	ldr	r3, [pc, #216]	@ (8004c00 <xTaskIncrementTick+0x150>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d104      	bne.n	8004b3a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b30:	4b36      	ldr	r3, [pc, #216]	@ (8004c0c <xTaskIncrementTick+0x15c>)
 8004b32:	f04f 32ff 	mov.w	r2, #4294967295
 8004b36:	601a      	str	r2, [r3, #0]
					break;
 8004b38:	e03e      	b.n	8004bb8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b3a:	4b31      	ldr	r3, [pc, #196]	@ (8004c00 <xTaskIncrementTick+0x150>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d203      	bcs.n	8004b5a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b52:	4a2e      	ldr	r2, [pc, #184]	@ (8004c0c <xTaskIncrementTick+0x15c>)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b58:	e02e      	b.n	8004bb8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	3304      	adds	r3, #4
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff fca1 	bl	80044a6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d004      	beq.n	8004b76 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	3318      	adds	r3, #24
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7ff fc98 	bl	80044a6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	409a      	lsls	r2, r3
 8004b7e:	4b24      	ldr	r3, [pc, #144]	@ (8004c10 <xTaskIncrementTick+0x160>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	4a22      	ldr	r2, [pc, #136]	@ (8004c10 <xTaskIncrementTick+0x160>)
 8004b86:	6013      	str	r3, [r2, #0]
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	4413      	add	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4a1f      	ldr	r2, [pc, #124]	@ (8004c14 <xTaskIncrementTick+0x164>)
 8004b96:	441a      	add	r2, r3
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f7ff fc24 	bl	80043ec <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c18 <xTaskIncrementTick+0x168>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d3b9      	bcc.n	8004b26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bb6:	e7b6      	b.n	8004b26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bb8:	4b17      	ldr	r3, [pc, #92]	@ (8004c18 <xTaskIncrementTick+0x168>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bbe:	4915      	ldr	r1, [pc, #84]	@ (8004c14 <xTaskIncrementTick+0x164>)
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d901      	bls.n	8004bd4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004bd4:	4b11      	ldr	r3, [pc, #68]	@ (8004c1c <xTaskIncrementTick+0x16c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	e004      	b.n	8004bec <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004be2:	4b0f      	ldr	r3, [pc, #60]	@ (8004c20 <xTaskIncrementTick+0x170>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3301      	adds	r3, #1
 8004be8:	4a0d      	ldr	r2, [pc, #52]	@ (8004c20 <xTaskIncrementTick+0x170>)
 8004bea:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004bec:	697b      	ldr	r3, [r7, #20]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3718      	adds	r7, #24
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	240004e8 	.word	0x240004e8
 8004bfc:	240004c4 	.word	0x240004c4
 8004c00:	24000478 	.word	0x24000478
 8004c04:	2400047c 	.word	0x2400047c
 8004c08:	240004d8 	.word	0x240004d8
 8004c0c:	240004e0 	.word	0x240004e0
 8004c10:	240004c8 	.word	0x240004c8
 8004c14:	240003c4 	.word	0x240003c4
 8004c18:	240003c0 	.word	0x240003c0
 8004c1c:	240004d4 	.word	0x240004d4
 8004c20:	240004d0 	.word	0x240004d0

08004c24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c24:	b480      	push	{r7}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c2a:	4b27      	ldr	r3, [pc, #156]	@ (8004cc8 <vTaskSwitchContext+0xa4>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d003      	beq.n	8004c3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c32:	4b26      	ldr	r3, [pc, #152]	@ (8004ccc <vTaskSwitchContext+0xa8>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c38:	e040      	b.n	8004cbc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004c3a:	4b24      	ldr	r3, [pc, #144]	@ (8004ccc <vTaskSwitchContext+0xa8>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c40:	4b23      	ldr	r3, [pc, #140]	@ (8004cd0 <vTaskSwitchContext+0xac>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	fab3 f383 	clz	r3, r3
 8004c4c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c4e:	7afb      	ldrb	r3, [r7, #11]
 8004c50:	f1c3 031f 	rsb	r3, r3, #31
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	491f      	ldr	r1, [pc, #124]	@ (8004cd4 <vTaskSwitchContext+0xb0>)
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10b      	bne.n	8004c82 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	607b      	str	r3, [r7, #4]
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	e7fd      	b.n	8004c7e <vTaskSwitchContext+0x5a>
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	4a11      	ldr	r2, [pc, #68]	@ (8004cd4 <vTaskSwitchContext+0xb0>)
 8004c8e:	4413      	add	r3, r2
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	605a      	str	r2, [r3, #4]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d104      	bne.n	8004cb2 <vTaskSwitchContext+0x8e>
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	605a      	str	r2, [r3, #4]
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4a07      	ldr	r2, [pc, #28]	@ (8004cd8 <vTaskSwitchContext+0xb4>)
 8004cba:	6013      	str	r3, [r2, #0]
}
 8004cbc:	bf00      	nop
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	240004e8 	.word	0x240004e8
 8004ccc:	240004d4 	.word	0x240004d4
 8004cd0:	240004c8 	.word	0x240004c8
 8004cd4:	240003c4 	.word	0x240003c4
 8004cd8:	240003c0 	.word	0x240003c0

08004cdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ce4:	f000 f852 	bl	8004d8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ce8:	4b06      	ldr	r3, [pc, #24]	@ (8004d04 <prvIdleTask+0x28>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d9f9      	bls.n	8004ce4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004cf0:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <prvIdleTask+0x2c>)
 8004cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cf6:	601a      	str	r2, [r3, #0]
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004d00:	e7f0      	b.n	8004ce4 <prvIdleTask+0x8>
 8004d02:	bf00      	nop
 8004d04:	240003c4 	.word	0x240003c4
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d12:	2300      	movs	r3, #0
 8004d14:	607b      	str	r3, [r7, #4]
 8004d16:	e00c      	b.n	8004d32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	009b      	lsls	r3, r3, #2
 8004d1e:	4413      	add	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4a12      	ldr	r2, [pc, #72]	@ (8004d6c <prvInitialiseTaskLists+0x60>)
 8004d24:	4413      	add	r3, r2
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7ff fb33 	bl	8004392 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	3301      	adds	r3, #1
 8004d30:	607b      	str	r3, [r7, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b06      	cmp	r3, #6
 8004d36:	d9ef      	bls.n	8004d18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004d38:	480d      	ldr	r0, [pc, #52]	@ (8004d70 <prvInitialiseTaskLists+0x64>)
 8004d3a:	f7ff fb2a 	bl	8004392 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004d3e:	480d      	ldr	r0, [pc, #52]	@ (8004d74 <prvInitialiseTaskLists+0x68>)
 8004d40:	f7ff fb27 	bl	8004392 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004d44:	480c      	ldr	r0, [pc, #48]	@ (8004d78 <prvInitialiseTaskLists+0x6c>)
 8004d46:	f7ff fb24 	bl	8004392 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004d4a:	480c      	ldr	r0, [pc, #48]	@ (8004d7c <prvInitialiseTaskLists+0x70>)
 8004d4c:	f7ff fb21 	bl	8004392 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004d50:	480b      	ldr	r0, [pc, #44]	@ (8004d80 <prvInitialiseTaskLists+0x74>)
 8004d52:	f7ff fb1e 	bl	8004392 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004d56:	4b0b      	ldr	r3, [pc, #44]	@ (8004d84 <prvInitialiseTaskLists+0x78>)
 8004d58:	4a05      	ldr	r2, [pc, #20]	@ (8004d70 <prvInitialiseTaskLists+0x64>)
 8004d5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8004d88 <prvInitialiseTaskLists+0x7c>)
 8004d5e:	4a05      	ldr	r2, [pc, #20]	@ (8004d74 <prvInitialiseTaskLists+0x68>)
 8004d60:	601a      	str	r2, [r3, #0]
}
 8004d62:	bf00      	nop
 8004d64:	3708      	adds	r7, #8
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	240003c4 	.word	0x240003c4
 8004d70:	24000450 	.word	0x24000450
 8004d74:	24000464 	.word	0x24000464
 8004d78:	24000480 	.word	0x24000480
 8004d7c:	24000494 	.word	0x24000494
 8004d80:	240004ac 	.word	0x240004ac
 8004d84:	24000478 	.word	0x24000478
 8004d88:	2400047c 	.word	0x2400047c

08004d8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d92:	e019      	b.n	8004dc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d94:	f000 fa30 	bl	80051f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d98:	4b10      	ldr	r3, [pc, #64]	@ (8004ddc <prvCheckTasksWaitingTermination+0x50>)
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4618      	mov	r0, r3
 8004da6:	f7ff fb7e 	bl	80044a6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004daa:	4b0d      	ldr	r3, [pc, #52]	@ (8004de0 <prvCheckTasksWaitingTermination+0x54>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	4a0b      	ldr	r2, [pc, #44]	@ (8004de0 <prvCheckTasksWaitingTermination+0x54>)
 8004db2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004db4:	4b0b      	ldr	r3, [pc, #44]	@ (8004de4 <prvCheckTasksWaitingTermination+0x58>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	4a0a      	ldr	r2, [pc, #40]	@ (8004de4 <prvCheckTasksWaitingTermination+0x58>)
 8004dbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004dbe:	f000 fa4d 	bl	800525c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f810 	bl	8004de8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004dc8:	4b06      	ldr	r3, [pc, #24]	@ (8004de4 <prvCheckTasksWaitingTermination+0x58>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e1      	bne.n	8004d94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004dd0:	bf00      	nop
 8004dd2:	bf00      	nop
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	24000494 	.word	0x24000494
 8004de0:	240004c0 	.word	0x240004c0
 8004de4:	240004a8 	.word	0x240004a8

08004de8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d108      	bne.n	8004e0c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 fba8 	bl	8005554 <vPortFree>
				vPortFree( pxTCB );
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fba5 	bl	8005554 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004e0a:	e019      	b.n	8004e40 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d103      	bne.n	8004e1e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fb9c 	bl	8005554 <vPortFree>
	}
 8004e1c:	e010      	b.n	8004e40 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d00b      	beq.n	8004e40 <prvDeleteTCB+0x58>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	60fb      	str	r3, [r7, #12]
}
 8004e3a:	bf00      	nop
 8004e3c:	bf00      	nop
 8004e3e:	e7fd      	b.n	8004e3c <prvDeleteTCB+0x54>
	}
 8004e40:	bf00      	nop
 8004e42:	3710      	adds	r7, #16
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004e80 <prvResetNextTaskUnblockTime+0x38>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d104      	bne.n	8004e62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004e58:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <prvResetNextTaskUnblockTime+0x3c>)
 8004e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004e60:	e008      	b.n	8004e74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e62:	4b07      	ldr	r3, [pc, #28]	@ (8004e80 <prvResetNextTaskUnblockTime+0x38>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	4a04      	ldr	r2, [pc, #16]	@ (8004e84 <prvResetNextTaskUnblockTime+0x3c>)
 8004e72:	6013      	str	r3, [r2, #0]
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	24000478 	.word	0x24000478
 8004e84:	240004e0 	.word	0x240004e0

08004e88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004ebc <xTaskGetSchedulerState+0x34>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d102      	bne.n	8004e9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004e96:	2301      	movs	r3, #1
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	e008      	b.n	8004eae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e9c:	4b08      	ldr	r3, [pc, #32]	@ (8004ec0 <xTaskGetSchedulerState+0x38>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d102      	bne.n	8004eaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004ea4:	2302      	movs	r3, #2
 8004ea6:	607b      	str	r3, [r7, #4]
 8004ea8:	e001      	b.n	8004eae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004eae:	687b      	ldr	r3, [r7, #4]
	}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr
 8004ebc:	240004cc 	.word	0x240004cc
 8004ec0:	240004e8 	.word	0x240004e8

08004ec4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004ece:	4b29      	ldr	r3, [pc, #164]	@ (8004f74 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004ed4:	4b28      	ldr	r3, [pc, #160]	@ (8004f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4618      	mov	r0, r3
 8004edc:	f7ff fae3 	bl	80044a6 <uxListRemove>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d10b      	bne.n	8004efe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004ee6:	4b24      	ldr	r3, [pc, #144]	@ (8004f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eec:	2201      	movs	r2, #1
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43da      	mvns	r2, r3
 8004ef4:	4b21      	ldr	r3, [pc, #132]	@ (8004f7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	4a20      	ldr	r2, [pc, #128]	@ (8004f7c <prvAddCurrentTaskToDelayedList+0xb8>)
 8004efc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f04:	d10a      	bne.n	8004f1c <prvAddCurrentTaskToDelayedList+0x58>
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	3304      	adds	r3, #4
 8004f12:	4619      	mov	r1, r3
 8004f14:	481a      	ldr	r0, [pc, #104]	@ (8004f80 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004f16:	f7ff fa69 	bl	80043ec <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004f1a:	e026      	b.n	8004f6a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4413      	add	r3, r2
 8004f22:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004f24:	4b14      	ldr	r3, [pc, #80]	@ (8004f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004f2c:	68ba      	ldr	r2, [r7, #8]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d209      	bcs.n	8004f48 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f34:	4b13      	ldr	r3, [pc, #76]	@ (8004f84 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	4b0f      	ldr	r3, [pc, #60]	@ (8004f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	3304      	adds	r3, #4
 8004f3e:	4619      	mov	r1, r3
 8004f40:	4610      	mov	r0, r2
 8004f42:	f7ff fa77 	bl	8004434 <vListInsert>
}
 8004f46:	e010      	b.n	8004f6a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004f48:	4b0f      	ldr	r3, [pc, #60]	@ (8004f88 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3304      	adds	r3, #4
 8004f52:	4619      	mov	r1, r3
 8004f54:	4610      	mov	r0, r2
 8004f56:	f7ff fa6d 	bl	8004434 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68ba      	ldr	r2, [r7, #8]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d202      	bcs.n	8004f6a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004f64:	4a09      	ldr	r2, [pc, #36]	@ (8004f8c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	6013      	str	r3, [r2, #0]
}
 8004f6a:	bf00      	nop
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	240004c4 	.word	0x240004c4
 8004f78:	240003c0 	.word	0x240003c0
 8004f7c:	240004c8 	.word	0x240004c8
 8004f80:	240004ac 	.word	0x240004ac
 8004f84:	2400047c 	.word	0x2400047c
 8004f88:	24000478 	.word	0x24000478
 8004f8c:	240004e0 	.word	0x240004e0

08004f90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	3b04      	subs	r3, #4
 8004fa0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3b04      	subs	r3, #4
 8004fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f023 0201 	bic.w	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	3b04      	subs	r3, #4
 8004fbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004fc0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ff4 <pxPortInitialiseStack+0x64>)
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	3b14      	subs	r3, #20
 8004fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	3b04      	subs	r3, #4
 8004fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f06f 0202 	mvn.w	r2, #2
 8004fde:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	3b20      	subs	r3, #32
 8004fe4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	08004ff9 	.word	0x08004ff9

08004ff8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ffe:	2300      	movs	r3, #0
 8005000:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005002:	4b13      	ldr	r3, [pc, #76]	@ (8005050 <prvTaskExitError+0x58>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500a:	d00b      	beq.n	8005024 <prvTaskExitError+0x2c>
	__asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	60fb      	str	r3, [r7, #12]
}
 800501e:	bf00      	nop
 8005020:	bf00      	nop
 8005022:	e7fd      	b.n	8005020 <prvTaskExitError+0x28>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	60bb      	str	r3, [r7, #8]
}
 8005036:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005038:	bf00      	nop
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0fc      	beq.n	800503a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005040:	bf00      	nop
 8005042:	bf00      	nop
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	2400002c 	.word	0x2400002c
	...

08005060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005060:	4b07      	ldr	r3, [pc, #28]	@ (8005080 <pxCurrentTCBConst2>)
 8005062:	6819      	ldr	r1, [r3, #0]
 8005064:	6808      	ldr	r0, [r1, #0]
 8005066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800506a:	f380 8809 	msr	PSP, r0
 800506e:	f3bf 8f6f 	isb	sy
 8005072:	f04f 0000 	mov.w	r0, #0
 8005076:	f380 8811 	msr	BASEPRI, r0
 800507a:	4770      	bx	lr
 800507c:	f3af 8000 	nop.w

08005080 <pxCurrentTCBConst2>:
 8005080:	240003c0 	.word	0x240003c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop

08005088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005088:	4808      	ldr	r0, [pc, #32]	@ (80050ac <prvPortStartFirstTask+0x24>)
 800508a:	6800      	ldr	r0, [r0, #0]
 800508c:	6800      	ldr	r0, [r0, #0]
 800508e:	f380 8808 	msr	MSP, r0
 8005092:	f04f 0000 	mov.w	r0, #0
 8005096:	f380 8814 	msr	CONTROL, r0
 800509a:	b662      	cpsie	i
 800509c:	b661      	cpsie	f
 800509e:	f3bf 8f4f 	dsb	sy
 80050a2:	f3bf 8f6f 	isb	sy
 80050a6:	df00      	svc	0
 80050a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80050aa:	bf00      	nop
 80050ac:	e000ed08 	.word	0xe000ed08

080050b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80050b6:	4b47      	ldr	r3, [pc, #284]	@ (80051d4 <xPortStartScheduler+0x124>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a47      	ldr	r2, [pc, #284]	@ (80051d8 <xPortStartScheduler+0x128>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d10b      	bne.n	80050d8 <xPortStartScheduler+0x28>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	613b      	str	r3, [r7, #16]
}
 80050d2:	bf00      	nop
 80050d4:	bf00      	nop
 80050d6:	e7fd      	b.n	80050d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80050d8:	4b3e      	ldr	r3, [pc, #248]	@ (80051d4 <xPortStartScheduler+0x124>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a3f      	ldr	r2, [pc, #252]	@ (80051dc <xPortStartScheduler+0x12c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d10b      	bne.n	80050fa <xPortStartScheduler+0x4a>
	__asm volatile
 80050e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	60fb      	str	r3, [r7, #12]
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	e7fd      	b.n	80050f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80050fa:	4b39      	ldr	r3, [pc, #228]	@ (80051e0 <xPortStartScheduler+0x130>)
 80050fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	b2db      	uxtb	r3, r3
 8005104:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	22ff      	movs	r2, #255	@ 0xff
 800510a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005114:	78fb      	ldrb	r3, [r7, #3]
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800511c:	b2da      	uxtb	r2, r3
 800511e:	4b31      	ldr	r3, [pc, #196]	@ (80051e4 <xPortStartScheduler+0x134>)
 8005120:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005122:	4b31      	ldr	r3, [pc, #196]	@ (80051e8 <xPortStartScheduler+0x138>)
 8005124:	2207      	movs	r2, #7
 8005126:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005128:	e009      	b.n	800513e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800512a:	4b2f      	ldr	r3, [pc, #188]	@ (80051e8 <xPortStartScheduler+0x138>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3b01      	subs	r3, #1
 8005130:	4a2d      	ldr	r2, [pc, #180]	@ (80051e8 <xPortStartScheduler+0x138>)
 8005132:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	b2db      	uxtb	r3, r3
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	b2db      	uxtb	r3, r3
 800513c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005146:	2b80      	cmp	r3, #128	@ 0x80
 8005148:	d0ef      	beq.n	800512a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800514a:	4b27      	ldr	r3, [pc, #156]	@ (80051e8 <xPortStartScheduler+0x138>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f1c3 0307 	rsb	r3, r3, #7
 8005152:	2b04      	cmp	r3, #4
 8005154:	d00b      	beq.n	800516e <xPortStartScheduler+0xbe>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	60bb      	str	r3, [r7, #8]
}
 8005168:	bf00      	nop
 800516a:	bf00      	nop
 800516c:	e7fd      	b.n	800516a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800516e:	4b1e      	ldr	r3, [pc, #120]	@ (80051e8 <xPortStartScheduler+0x138>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	021b      	lsls	r3, r3, #8
 8005174:	4a1c      	ldr	r2, [pc, #112]	@ (80051e8 <xPortStartScheduler+0x138>)
 8005176:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005178:	4b1b      	ldr	r3, [pc, #108]	@ (80051e8 <xPortStartScheduler+0x138>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005180:	4a19      	ldr	r2, [pc, #100]	@ (80051e8 <xPortStartScheduler+0x138>)
 8005182:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	b2da      	uxtb	r2, r3
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800518c:	4b17      	ldr	r3, [pc, #92]	@ (80051ec <xPortStartScheduler+0x13c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a16      	ldr	r2, [pc, #88]	@ (80051ec <xPortStartScheduler+0x13c>)
 8005192:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005196:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005198:	4b14      	ldr	r3, [pc, #80]	@ (80051ec <xPortStartScheduler+0x13c>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a13      	ldr	r2, [pc, #76]	@ (80051ec <xPortStartScheduler+0x13c>)
 800519e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80051a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80051a4:	f000 f8da 	bl	800535c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051a8:	4b11      	ldr	r3, [pc, #68]	@ (80051f0 <xPortStartScheduler+0x140>)
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80051ae:	f000 f8f9 	bl	80053a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80051b2:	4b10      	ldr	r3, [pc, #64]	@ (80051f4 <xPortStartScheduler+0x144>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a0f      	ldr	r2, [pc, #60]	@ (80051f4 <xPortStartScheduler+0x144>)
 80051b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80051bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80051be:	f7ff ff63 	bl	8005088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051c2:	f7ff fd2f 	bl	8004c24 <vTaskSwitchContext>
	prvTaskExitError();
 80051c6:	f7ff ff17 	bl	8004ff8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	e000ed00 	.word	0xe000ed00
 80051d8:	410fc271 	.word	0x410fc271
 80051dc:	410fc270 	.word	0x410fc270
 80051e0:	e000e400 	.word	0xe000e400
 80051e4:	240004ec 	.word	0x240004ec
 80051e8:	240004f0 	.word	0x240004f0
 80051ec:	e000ed20 	.word	0xe000ed20
 80051f0:	2400002c 	.word	0x2400002c
 80051f4:	e000ef34 	.word	0xe000ef34

080051f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
	__asm volatile
 80051fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005202:	f383 8811 	msr	BASEPRI, r3
 8005206:	f3bf 8f6f 	isb	sy
 800520a:	f3bf 8f4f 	dsb	sy
 800520e:	607b      	str	r3, [r7, #4]
}
 8005210:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005212:	4b10      	ldr	r3, [pc, #64]	@ (8005254 <vPortEnterCritical+0x5c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3301      	adds	r3, #1
 8005218:	4a0e      	ldr	r2, [pc, #56]	@ (8005254 <vPortEnterCritical+0x5c>)
 800521a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800521c:	4b0d      	ldr	r3, [pc, #52]	@ (8005254 <vPortEnterCritical+0x5c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2b01      	cmp	r3, #1
 8005222:	d110      	bne.n	8005246 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005224:	4b0c      	ldr	r3, [pc, #48]	@ (8005258 <vPortEnterCritical+0x60>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d00b      	beq.n	8005246 <vPortEnterCritical+0x4e>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	603b      	str	r3, [r7, #0]
}
 8005240:	bf00      	nop
 8005242:	bf00      	nop
 8005244:	e7fd      	b.n	8005242 <vPortEnterCritical+0x4a>
	}
}
 8005246:	bf00      	nop
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	2400002c 	.word	0x2400002c
 8005258:	e000ed04 	.word	0xe000ed04

0800525c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005262:	4b12      	ldr	r3, [pc, #72]	@ (80052ac <vPortExitCritical+0x50>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10b      	bne.n	8005282 <vPortExitCritical+0x26>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800526e:	f383 8811 	msr	BASEPRI, r3
 8005272:	f3bf 8f6f 	isb	sy
 8005276:	f3bf 8f4f 	dsb	sy
 800527a:	607b      	str	r3, [r7, #4]
}
 800527c:	bf00      	nop
 800527e:	bf00      	nop
 8005280:	e7fd      	b.n	800527e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005282:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <vPortExitCritical+0x50>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	3b01      	subs	r3, #1
 8005288:	4a08      	ldr	r2, [pc, #32]	@ (80052ac <vPortExitCritical+0x50>)
 800528a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800528c:	4b07      	ldr	r3, [pc, #28]	@ (80052ac <vPortExitCritical+0x50>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <vPortExitCritical+0x44>
 8005294:	2300      	movs	r3, #0
 8005296:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800529e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	2400002c 	.word	0x2400002c

080052b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80052b0:	f3ef 8009 	mrs	r0, PSP
 80052b4:	f3bf 8f6f 	isb	sy
 80052b8:	4b15      	ldr	r3, [pc, #84]	@ (8005310 <pxCurrentTCBConst>)
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	f01e 0f10 	tst.w	lr, #16
 80052c0:	bf08      	it	eq
 80052c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80052c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052ca:	6010      	str	r0, [r2, #0]
 80052cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80052d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80052d4:	f380 8811 	msr	BASEPRI, r0
 80052d8:	f3bf 8f4f 	dsb	sy
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f7ff fca0 	bl	8004c24 <vTaskSwitchContext>
 80052e4:	f04f 0000 	mov.w	r0, #0
 80052e8:	f380 8811 	msr	BASEPRI, r0
 80052ec:	bc09      	pop	{r0, r3}
 80052ee:	6819      	ldr	r1, [r3, #0]
 80052f0:	6808      	ldr	r0, [r1, #0]
 80052f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052f6:	f01e 0f10 	tst.w	lr, #16
 80052fa:	bf08      	it	eq
 80052fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005300:	f380 8809 	msr	PSP, r0
 8005304:	f3bf 8f6f 	isb	sy
 8005308:	4770      	bx	lr
 800530a:	bf00      	nop
 800530c:	f3af 8000 	nop.w

08005310 <pxCurrentTCBConst>:
 8005310:	240003c0 	.word	0x240003c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop

08005318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	607b      	str	r3, [r7, #4]
}
 8005330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005332:	f7ff fbbd 	bl	8004ab0 <xTaskIncrementTick>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d003      	beq.n	8005344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800533c:	4b06      	ldr	r3, [pc, #24]	@ (8005358 <xPortSysTickHandler+0x40>)
 800533e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	2300      	movs	r3, #0
 8005346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	f383 8811 	msr	BASEPRI, r3
}
 800534e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005360:	4b0b      	ldr	r3, [pc, #44]	@ (8005390 <vPortSetupTimerInterrupt+0x34>)
 8005362:	2200      	movs	r2, #0
 8005364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005366:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <vPortSetupTimerInterrupt+0x38>)
 8005368:	2200      	movs	r2, #0
 800536a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800536c:	4b0a      	ldr	r3, [pc, #40]	@ (8005398 <vPortSetupTimerInterrupt+0x3c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a0a      	ldr	r2, [pc, #40]	@ (800539c <vPortSetupTimerInterrupt+0x40>)
 8005372:	fba2 2303 	umull	r2, r3, r2, r3
 8005376:	099b      	lsrs	r3, r3, #6
 8005378:	4a09      	ldr	r2, [pc, #36]	@ (80053a0 <vPortSetupTimerInterrupt+0x44>)
 800537a:	3b01      	subs	r3, #1
 800537c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800537e:	4b04      	ldr	r3, [pc, #16]	@ (8005390 <vPortSetupTimerInterrupt+0x34>)
 8005380:	2207      	movs	r2, #7
 8005382:	601a      	str	r2, [r3, #0]
}
 8005384:	bf00      	nop
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	e000e010 	.word	0xe000e010
 8005394:	e000e018 	.word	0xe000e018
 8005398:	24000000 	.word	0x24000000
 800539c:	10624dd3 	.word	0x10624dd3
 80053a0:	e000e014 	.word	0xe000e014

080053a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80053a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80053b4 <vPortEnableVFP+0x10>
 80053a8:	6801      	ldr	r1, [r0, #0]
 80053aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80053ae:	6001      	str	r1, [r0, #0]
 80053b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80053b2:	bf00      	nop
 80053b4:	e000ed88 	.word	0xe000ed88

080053b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08a      	sub	sp, #40	@ 0x28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80053c4:	f7ff fac8 	bl	8004958 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80053c8:	4b5c      	ldr	r3, [pc, #368]	@ (800553c <pvPortMalloc+0x184>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d101      	bne.n	80053d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80053d0:	f000 f924 	bl	800561c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80053d4:	4b5a      	ldr	r3, [pc, #360]	@ (8005540 <pvPortMalloc+0x188>)
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4013      	ands	r3, r2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f040 8095 	bne.w	800550c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d01e      	beq.n	8005426 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80053e8:	2208      	movs	r2, #8
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4413      	add	r3, r2
 80053ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f003 0307 	and.w	r3, r3, #7
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d015      	beq.n	8005426 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f023 0307 	bic.w	r3, r3, #7
 8005400:	3308      	adds	r3, #8
 8005402:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00b      	beq.n	8005426 <pvPortMalloc+0x6e>
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	617b      	str	r3, [r7, #20]
}
 8005420:	bf00      	nop
 8005422:	bf00      	nop
 8005424:	e7fd      	b.n	8005422 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d06f      	beq.n	800550c <pvPortMalloc+0x154>
 800542c:	4b45      	ldr	r3, [pc, #276]	@ (8005544 <pvPortMalloc+0x18c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d86a      	bhi.n	800550c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005436:	4b44      	ldr	r3, [pc, #272]	@ (8005548 <pvPortMalloc+0x190>)
 8005438:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800543a:	4b43      	ldr	r3, [pc, #268]	@ (8005548 <pvPortMalloc+0x190>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005440:	e004      	b.n	800544c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005444:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	429a      	cmp	r2, r3
 8005454:	d903      	bls.n	800545e <pvPortMalloc+0xa6>
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f1      	bne.n	8005442 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800545e:	4b37      	ldr	r3, [pc, #220]	@ (800553c <pvPortMalloc+0x184>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005464:	429a      	cmp	r2, r3
 8005466:	d051      	beq.n	800550c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2208      	movs	r2, #8
 800546e:	4413      	add	r3, r2
 8005470:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	685a      	ldr	r2, [r3, #4]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	1ad2      	subs	r2, r2, r3
 8005482:	2308      	movs	r3, #8
 8005484:	005b      	lsls	r3, r3, #1
 8005486:	429a      	cmp	r2, r3
 8005488:	d920      	bls.n	80054cc <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800548a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4413      	add	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00b      	beq.n	80054b4 <pvPortMalloc+0xfc>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	613b      	str	r3, [r7, #16]
}
 80054ae:	bf00      	nop
 80054b0:	bf00      	nop
 80054b2:	e7fd      	b.n	80054b0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80054b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	1ad2      	subs	r2, r2, r3
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80054c6:	69b8      	ldr	r0, [r7, #24]
 80054c8:	f000 f90a 	bl	80056e0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80054cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005544 <pvPortMalloc+0x18c>)
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	4a1b      	ldr	r2, [pc, #108]	@ (8005544 <pvPortMalloc+0x18c>)
 80054d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80054da:	4b1a      	ldr	r3, [pc, #104]	@ (8005544 <pvPortMalloc+0x18c>)
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	4b1b      	ldr	r3, [pc, #108]	@ (800554c <pvPortMalloc+0x194>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d203      	bcs.n	80054ee <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80054e6:	4b17      	ldr	r3, [pc, #92]	@ (8005544 <pvPortMalloc+0x18c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a18      	ldr	r2, [pc, #96]	@ (800554c <pvPortMalloc+0x194>)
 80054ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	4b13      	ldr	r3, [pc, #76]	@ (8005540 <pvPortMalloc+0x188>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	431a      	orrs	r2, r3
 80054f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80054fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005502:	4b13      	ldr	r3, [pc, #76]	@ (8005550 <pvPortMalloc+0x198>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3301      	adds	r3, #1
 8005508:	4a11      	ldr	r2, [pc, #68]	@ (8005550 <pvPortMalloc+0x198>)
 800550a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800550c:	f7ff fa32 	bl	8004974 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f003 0307 	and.w	r3, r3, #7
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00b      	beq.n	8005532 <pvPortMalloc+0x17a>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	60fb      	str	r3, [r7, #12]
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	e7fd      	b.n	800552e <pvPortMalloc+0x176>
	return pvReturn;
 8005532:	69fb      	ldr	r3, [r7, #28]
}
 8005534:	4618      	mov	r0, r3
 8005536:	3728      	adds	r7, #40	@ 0x28
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	240040fc 	.word	0x240040fc
 8005540:	24004110 	.word	0x24004110
 8005544:	24004100 	.word	0x24004100
 8005548:	240040f4 	.word	0x240040f4
 800554c:	24004104 	.word	0x24004104
 8005550:	24004108 	.word	0x24004108

08005554 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b086      	sub	sp, #24
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d04f      	beq.n	8005606 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005566:	2308      	movs	r3, #8
 8005568:	425b      	negs	r3, r3
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4413      	add	r3, r2
 800556e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	685a      	ldr	r2, [r3, #4]
 8005578:	4b25      	ldr	r3, [pc, #148]	@ (8005610 <vPortFree+0xbc>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4013      	ands	r3, r2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d10b      	bne.n	800559a <vPortFree+0x46>
	__asm volatile
 8005582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005586:	f383 8811 	msr	BASEPRI, r3
 800558a:	f3bf 8f6f 	isb	sy
 800558e:	f3bf 8f4f 	dsb	sy
 8005592:	60fb      	str	r3, [r7, #12]
}
 8005594:	bf00      	nop
 8005596:	bf00      	nop
 8005598:	e7fd      	b.n	8005596 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00b      	beq.n	80055ba <vPortFree+0x66>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	60bb      	str	r3, [r7, #8]
}
 80055b4:	bf00      	nop
 80055b6:	bf00      	nop
 80055b8:	e7fd      	b.n	80055b6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	4b14      	ldr	r3, [pc, #80]	@ (8005610 <vPortFree+0xbc>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01e      	beq.n	8005606 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d11a      	bne.n	8005606 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005610 <vPortFree+0xbc>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	43db      	mvns	r3, r3
 80055da:	401a      	ands	r2, r3
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80055e0:	f7ff f9ba 	bl	8004958 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	4b0a      	ldr	r3, [pc, #40]	@ (8005614 <vPortFree+0xc0>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4413      	add	r3, r2
 80055ee:	4a09      	ldr	r2, [pc, #36]	@ (8005614 <vPortFree+0xc0>)
 80055f0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80055f2:	6938      	ldr	r0, [r7, #16]
 80055f4:	f000 f874 	bl	80056e0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80055f8:	4b07      	ldr	r3, [pc, #28]	@ (8005618 <vPortFree+0xc4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3301      	adds	r3, #1
 80055fe:	4a06      	ldr	r2, [pc, #24]	@ (8005618 <vPortFree+0xc4>)
 8005600:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005602:	f7ff f9b7 	bl	8004974 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005606:	bf00      	nop
 8005608:	3718      	adds	r7, #24
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	24004110 	.word	0x24004110
 8005614:	24004100 	.word	0x24004100
 8005618:	2400410c 	.word	0x2400410c

0800561c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005622:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005626:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005628:	4b27      	ldr	r3, [pc, #156]	@ (80056c8 <prvHeapInit+0xac>)
 800562a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f003 0307 	and.w	r3, r3, #7
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00c      	beq.n	8005650 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	3307      	adds	r3, #7
 800563a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0307 	bic.w	r3, r3, #7
 8005642:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	4a1f      	ldr	r2, [pc, #124]	@ (80056c8 <prvHeapInit+0xac>)
 800564c:	4413      	add	r3, r2
 800564e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005654:	4a1d      	ldr	r2, [pc, #116]	@ (80056cc <prvHeapInit+0xb0>)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800565a:	4b1c      	ldr	r3, [pc, #112]	@ (80056cc <prvHeapInit+0xb0>)
 800565c:	2200      	movs	r2, #0
 800565e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	4413      	add	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005668:	2208      	movs	r2, #8
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1a9b      	subs	r3, r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f023 0307 	bic.w	r3, r3, #7
 8005676:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	4a15      	ldr	r2, [pc, #84]	@ (80056d0 <prvHeapInit+0xb4>)
 800567c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800567e:	4b14      	ldr	r3, [pc, #80]	@ (80056d0 <prvHeapInit+0xb4>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2200      	movs	r2, #0
 8005684:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005686:	4b12      	ldr	r3, [pc, #72]	@ (80056d0 <prvHeapInit+0xb4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2200      	movs	r2, #0
 800568c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	1ad2      	subs	r2, r2, r3
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800569c:	4b0c      	ldr	r3, [pc, #48]	@ (80056d0 <prvHeapInit+0xb4>)
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	4a0a      	ldr	r2, [pc, #40]	@ (80056d4 <prvHeapInit+0xb8>)
 80056aa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	4a09      	ldr	r2, [pc, #36]	@ (80056d8 <prvHeapInit+0xbc>)
 80056b2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80056b4:	4b09      	ldr	r3, [pc, #36]	@ (80056dc <prvHeapInit+0xc0>)
 80056b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80056ba:	601a      	str	r2, [r3, #0]
}
 80056bc:	bf00      	nop
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	240004f4 	.word	0x240004f4
 80056cc:	240040f4 	.word	0x240040f4
 80056d0:	240040fc 	.word	0x240040fc
 80056d4:	24004104 	.word	0x24004104
 80056d8:	24004100 	.word	0x24004100
 80056dc:	24004110 	.word	0x24004110

080056e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80056e8:	4b28      	ldr	r3, [pc, #160]	@ (800578c <prvInsertBlockIntoFreeList+0xac>)
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	e002      	b.n	80056f4 <prvInsertBlockIntoFreeList+0x14>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	60fb      	str	r3, [r7, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	687a      	ldr	r2, [r7, #4]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d8f7      	bhi.n	80056ee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	4413      	add	r3, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	429a      	cmp	r2, r3
 800570e:	d108      	bne.n	8005722 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	441a      	add	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	441a      	add	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	429a      	cmp	r2, r3
 8005734:	d118      	bne.n	8005768 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	4b15      	ldr	r3, [pc, #84]	@ (8005790 <prvInsertBlockIntoFreeList+0xb0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	429a      	cmp	r2, r3
 8005740:	d00d      	beq.n	800575e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	441a      	add	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e008      	b.n	8005770 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800575e:	4b0c      	ldr	r3, [pc, #48]	@ (8005790 <prvInsertBlockIntoFreeList+0xb0>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	601a      	str	r2, [r3, #0]
 8005766:	e003      	b.n	8005770 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	429a      	cmp	r2, r3
 8005776:	d002      	beq.n	800577e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800577e:	bf00      	nop
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	240040f4 	.word	0x240040f4
 8005790:	240040fc 	.word	0x240040fc

08005794 <std>:
 8005794:	2300      	movs	r3, #0
 8005796:	b510      	push	{r4, lr}
 8005798:	4604      	mov	r4, r0
 800579a:	e9c0 3300 	strd	r3, r3, [r0]
 800579e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80057a2:	6083      	str	r3, [r0, #8]
 80057a4:	8181      	strh	r1, [r0, #12]
 80057a6:	6643      	str	r3, [r0, #100]	@ 0x64
 80057a8:	81c2      	strh	r2, [r0, #14]
 80057aa:	6183      	str	r3, [r0, #24]
 80057ac:	4619      	mov	r1, r3
 80057ae:	2208      	movs	r2, #8
 80057b0:	305c      	adds	r0, #92	@ 0x5c
 80057b2:	f000 f906 	bl	80059c2 <memset>
 80057b6:	4b0d      	ldr	r3, [pc, #52]	@ (80057ec <std+0x58>)
 80057b8:	6263      	str	r3, [r4, #36]	@ 0x24
 80057ba:	4b0d      	ldr	r3, [pc, #52]	@ (80057f0 <std+0x5c>)
 80057bc:	62a3      	str	r3, [r4, #40]	@ 0x28
 80057be:	4b0d      	ldr	r3, [pc, #52]	@ (80057f4 <std+0x60>)
 80057c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80057c2:	4b0d      	ldr	r3, [pc, #52]	@ (80057f8 <std+0x64>)
 80057c4:	6323      	str	r3, [r4, #48]	@ 0x30
 80057c6:	4b0d      	ldr	r3, [pc, #52]	@ (80057fc <std+0x68>)
 80057c8:	6224      	str	r4, [r4, #32]
 80057ca:	429c      	cmp	r4, r3
 80057cc:	d006      	beq.n	80057dc <std+0x48>
 80057ce:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057d2:	4294      	cmp	r4, r2
 80057d4:	d002      	beq.n	80057dc <std+0x48>
 80057d6:	33d0      	adds	r3, #208	@ 0xd0
 80057d8:	429c      	cmp	r4, r3
 80057da:	d105      	bne.n	80057e8 <std+0x54>
 80057dc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057e4:	f000 b966 	b.w	8005ab4 <__retarget_lock_init_recursive>
 80057e8:	bd10      	pop	{r4, pc}
 80057ea:	bf00      	nop
 80057ec:	0800593d 	.word	0x0800593d
 80057f0:	0800595f 	.word	0x0800595f
 80057f4:	08005997 	.word	0x08005997
 80057f8:	080059bb 	.word	0x080059bb
 80057fc:	24004114 	.word	0x24004114

08005800 <stdio_exit_handler>:
 8005800:	4a02      	ldr	r2, [pc, #8]	@ (800580c <stdio_exit_handler+0xc>)
 8005802:	4903      	ldr	r1, [pc, #12]	@ (8005810 <stdio_exit_handler+0x10>)
 8005804:	4803      	ldr	r0, [pc, #12]	@ (8005814 <stdio_exit_handler+0x14>)
 8005806:	f000 b869 	b.w	80058dc <_fwalk_sglue>
 800580a:	bf00      	nop
 800580c:	24000030 	.word	0x24000030
 8005810:	08006355 	.word	0x08006355
 8005814:	24000040 	.word	0x24000040

08005818 <cleanup_stdio>:
 8005818:	6841      	ldr	r1, [r0, #4]
 800581a:	4b0c      	ldr	r3, [pc, #48]	@ (800584c <cleanup_stdio+0x34>)
 800581c:	4299      	cmp	r1, r3
 800581e:	b510      	push	{r4, lr}
 8005820:	4604      	mov	r4, r0
 8005822:	d001      	beq.n	8005828 <cleanup_stdio+0x10>
 8005824:	f000 fd96 	bl	8006354 <_fflush_r>
 8005828:	68a1      	ldr	r1, [r4, #8]
 800582a:	4b09      	ldr	r3, [pc, #36]	@ (8005850 <cleanup_stdio+0x38>)
 800582c:	4299      	cmp	r1, r3
 800582e:	d002      	beq.n	8005836 <cleanup_stdio+0x1e>
 8005830:	4620      	mov	r0, r4
 8005832:	f000 fd8f 	bl	8006354 <_fflush_r>
 8005836:	68e1      	ldr	r1, [r4, #12]
 8005838:	4b06      	ldr	r3, [pc, #24]	@ (8005854 <cleanup_stdio+0x3c>)
 800583a:	4299      	cmp	r1, r3
 800583c:	d004      	beq.n	8005848 <cleanup_stdio+0x30>
 800583e:	4620      	mov	r0, r4
 8005840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005844:	f000 bd86 	b.w	8006354 <_fflush_r>
 8005848:	bd10      	pop	{r4, pc}
 800584a:	bf00      	nop
 800584c:	24004114 	.word	0x24004114
 8005850:	2400417c 	.word	0x2400417c
 8005854:	240041e4 	.word	0x240041e4

08005858 <global_stdio_init.part.0>:
 8005858:	b510      	push	{r4, lr}
 800585a:	4b0b      	ldr	r3, [pc, #44]	@ (8005888 <global_stdio_init.part.0+0x30>)
 800585c:	4c0b      	ldr	r4, [pc, #44]	@ (800588c <global_stdio_init.part.0+0x34>)
 800585e:	4a0c      	ldr	r2, [pc, #48]	@ (8005890 <global_stdio_init.part.0+0x38>)
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	4620      	mov	r0, r4
 8005864:	2200      	movs	r2, #0
 8005866:	2104      	movs	r1, #4
 8005868:	f7ff ff94 	bl	8005794 <std>
 800586c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005870:	2201      	movs	r2, #1
 8005872:	2109      	movs	r1, #9
 8005874:	f7ff ff8e 	bl	8005794 <std>
 8005878:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800587c:	2202      	movs	r2, #2
 800587e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005882:	2112      	movs	r1, #18
 8005884:	f7ff bf86 	b.w	8005794 <std>
 8005888:	2400424c 	.word	0x2400424c
 800588c:	24004114 	.word	0x24004114
 8005890:	08005801 	.word	0x08005801

08005894 <__sfp_lock_acquire>:
 8005894:	4801      	ldr	r0, [pc, #4]	@ (800589c <__sfp_lock_acquire+0x8>)
 8005896:	f000 b90e 	b.w	8005ab6 <__retarget_lock_acquire_recursive>
 800589a:	bf00      	nop
 800589c:	24004255 	.word	0x24004255

080058a0 <__sfp_lock_release>:
 80058a0:	4801      	ldr	r0, [pc, #4]	@ (80058a8 <__sfp_lock_release+0x8>)
 80058a2:	f000 b909 	b.w	8005ab8 <__retarget_lock_release_recursive>
 80058a6:	bf00      	nop
 80058a8:	24004255 	.word	0x24004255

080058ac <__sinit>:
 80058ac:	b510      	push	{r4, lr}
 80058ae:	4604      	mov	r4, r0
 80058b0:	f7ff fff0 	bl	8005894 <__sfp_lock_acquire>
 80058b4:	6a23      	ldr	r3, [r4, #32]
 80058b6:	b11b      	cbz	r3, 80058c0 <__sinit+0x14>
 80058b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058bc:	f7ff bff0 	b.w	80058a0 <__sfp_lock_release>
 80058c0:	4b04      	ldr	r3, [pc, #16]	@ (80058d4 <__sinit+0x28>)
 80058c2:	6223      	str	r3, [r4, #32]
 80058c4:	4b04      	ldr	r3, [pc, #16]	@ (80058d8 <__sinit+0x2c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f5      	bne.n	80058b8 <__sinit+0xc>
 80058cc:	f7ff ffc4 	bl	8005858 <global_stdio_init.part.0>
 80058d0:	e7f2      	b.n	80058b8 <__sinit+0xc>
 80058d2:	bf00      	nop
 80058d4:	08005819 	.word	0x08005819
 80058d8:	2400424c 	.word	0x2400424c

080058dc <_fwalk_sglue>:
 80058dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058e0:	4607      	mov	r7, r0
 80058e2:	4688      	mov	r8, r1
 80058e4:	4614      	mov	r4, r2
 80058e6:	2600      	movs	r6, #0
 80058e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058ec:	f1b9 0901 	subs.w	r9, r9, #1
 80058f0:	d505      	bpl.n	80058fe <_fwalk_sglue+0x22>
 80058f2:	6824      	ldr	r4, [r4, #0]
 80058f4:	2c00      	cmp	r4, #0
 80058f6:	d1f7      	bne.n	80058e8 <_fwalk_sglue+0xc>
 80058f8:	4630      	mov	r0, r6
 80058fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058fe:	89ab      	ldrh	r3, [r5, #12]
 8005900:	2b01      	cmp	r3, #1
 8005902:	d907      	bls.n	8005914 <_fwalk_sglue+0x38>
 8005904:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005908:	3301      	adds	r3, #1
 800590a:	d003      	beq.n	8005914 <_fwalk_sglue+0x38>
 800590c:	4629      	mov	r1, r5
 800590e:	4638      	mov	r0, r7
 8005910:	47c0      	blx	r8
 8005912:	4306      	orrs	r6, r0
 8005914:	3568      	adds	r5, #104	@ 0x68
 8005916:	e7e9      	b.n	80058ec <_fwalk_sglue+0x10>

08005918 <iprintf>:
 8005918:	b40f      	push	{r0, r1, r2, r3}
 800591a:	b507      	push	{r0, r1, r2, lr}
 800591c:	4906      	ldr	r1, [pc, #24]	@ (8005938 <iprintf+0x20>)
 800591e:	ab04      	add	r3, sp, #16
 8005920:	6808      	ldr	r0, [r1, #0]
 8005922:	f853 2b04 	ldr.w	r2, [r3], #4
 8005926:	6881      	ldr	r1, [r0, #8]
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	f000 f9e9 	bl	8005d00 <_vfiprintf_r>
 800592e:	b003      	add	sp, #12
 8005930:	f85d eb04 	ldr.w	lr, [sp], #4
 8005934:	b004      	add	sp, #16
 8005936:	4770      	bx	lr
 8005938:	2400003c 	.word	0x2400003c

0800593c <__sread>:
 800593c:	b510      	push	{r4, lr}
 800593e:	460c      	mov	r4, r1
 8005940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005944:	f000 f868 	bl	8005a18 <_read_r>
 8005948:	2800      	cmp	r0, #0
 800594a:	bfab      	itete	ge
 800594c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800594e:	89a3      	ldrhlt	r3, [r4, #12]
 8005950:	181b      	addge	r3, r3, r0
 8005952:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005956:	bfac      	ite	ge
 8005958:	6563      	strge	r3, [r4, #84]	@ 0x54
 800595a:	81a3      	strhlt	r3, [r4, #12]
 800595c:	bd10      	pop	{r4, pc}

0800595e <__swrite>:
 800595e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005962:	461f      	mov	r7, r3
 8005964:	898b      	ldrh	r3, [r1, #12]
 8005966:	05db      	lsls	r3, r3, #23
 8005968:	4605      	mov	r5, r0
 800596a:	460c      	mov	r4, r1
 800596c:	4616      	mov	r6, r2
 800596e:	d505      	bpl.n	800597c <__swrite+0x1e>
 8005970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005974:	2302      	movs	r3, #2
 8005976:	2200      	movs	r2, #0
 8005978:	f000 f83c 	bl	80059f4 <_lseek_r>
 800597c:	89a3      	ldrh	r3, [r4, #12]
 800597e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005982:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005986:	81a3      	strh	r3, [r4, #12]
 8005988:	4632      	mov	r2, r6
 800598a:	463b      	mov	r3, r7
 800598c:	4628      	mov	r0, r5
 800598e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005992:	f000 b853 	b.w	8005a3c <_write_r>

08005996 <__sseek>:
 8005996:	b510      	push	{r4, lr}
 8005998:	460c      	mov	r4, r1
 800599a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800599e:	f000 f829 	bl	80059f4 <_lseek_r>
 80059a2:	1c43      	adds	r3, r0, #1
 80059a4:	89a3      	ldrh	r3, [r4, #12]
 80059a6:	bf15      	itete	ne
 80059a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80059aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80059ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80059b2:	81a3      	strheq	r3, [r4, #12]
 80059b4:	bf18      	it	ne
 80059b6:	81a3      	strhne	r3, [r4, #12]
 80059b8:	bd10      	pop	{r4, pc}

080059ba <__sclose>:
 80059ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80059be:	f000 b809 	b.w	80059d4 <_close_r>

080059c2 <memset>:
 80059c2:	4402      	add	r2, r0
 80059c4:	4603      	mov	r3, r0
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d100      	bne.n	80059cc <memset+0xa>
 80059ca:	4770      	bx	lr
 80059cc:	f803 1b01 	strb.w	r1, [r3], #1
 80059d0:	e7f9      	b.n	80059c6 <memset+0x4>
	...

080059d4 <_close_r>:
 80059d4:	b538      	push	{r3, r4, r5, lr}
 80059d6:	4d06      	ldr	r5, [pc, #24]	@ (80059f0 <_close_r+0x1c>)
 80059d8:	2300      	movs	r3, #0
 80059da:	4604      	mov	r4, r0
 80059dc:	4608      	mov	r0, r1
 80059de:	602b      	str	r3, [r5, #0]
 80059e0:	f7fb f8c2 	bl	8000b68 <_close>
 80059e4:	1c43      	adds	r3, r0, #1
 80059e6:	d102      	bne.n	80059ee <_close_r+0x1a>
 80059e8:	682b      	ldr	r3, [r5, #0]
 80059ea:	b103      	cbz	r3, 80059ee <_close_r+0x1a>
 80059ec:	6023      	str	r3, [r4, #0]
 80059ee:	bd38      	pop	{r3, r4, r5, pc}
 80059f0:	24004250 	.word	0x24004250

080059f4 <_lseek_r>:
 80059f4:	b538      	push	{r3, r4, r5, lr}
 80059f6:	4d07      	ldr	r5, [pc, #28]	@ (8005a14 <_lseek_r+0x20>)
 80059f8:	4604      	mov	r4, r0
 80059fa:	4608      	mov	r0, r1
 80059fc:	4611      	mov	r1, r2
 80059fe:	2200      	movs	r2, #0
 8005a00:	602a      	str	r2, [r5, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	f7fb f8d7 	bl	8000bb6 <_lseek>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d102      	bne.n	8005a12 <_lseek_r+0x1e>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	b103      	cbz	r3, 8005a12 <_lseek_r+0x1e>
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	bd38      	pop	{r3, r4, r5, pc}
 8005a14:	24004250 	.word	0x24004250

08005a18 <_read_r>:
 8005a18:	b538      	push	{r3, r4, r5, lr}
 8005a1a:	4d07      	ldr	r5, [pc, #28]	@ (8005a38 <_read_r+0x20>)
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	4608      	mov	r0, r1
 8005a20:	4611      	mov	r1, r2
 8005a22:	2200      	movs	r2, #0
 8005a24:	602a      	str	r2, [r5, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	f7fb f865 	bl	8000af6 <_read>
 8005a2c:	1c43      	adds	r3, r0, #1
 8005a2e:	d102      	bne.n	8005a36 <_read_r+0x1e>
 8005a30:	682b      	ldr	r3, [r5, #0]
 8005a32:	b103      	cbz	r3, 8005a36 <_read_r+0x1e>
 8005a34:	6023      	str	r3, [r4, #0]
 8005a36:	bd38      	pop	{r3, r4, r5, pc}
 8005a38:	24004250 	.word	0x24004250

08005a3c <_write_r>:
 8005a3c:	b538      	push	{r3, r4, r5, lr}
 8005a3e:	4d07      	ldr	r5, [pc, #28]	@ (8005a5c <_write_r+0x20>)
 8005a40:	4604      	mov	r4, r0
 8005a42:	4608      	mov	r0, r1
 8005a44:	4611      	mov	r1, r2
 8005a46:	2200      	movs	r2, #0
 8005a48:	602a      	str	r2, [r5, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	f7fb f870 	bl	8000b30 <_write>
 8005a50:	1c43      	adds	r3, r0, #1
 8005a52:	d102      	bne.n	8005a5a <_write_r+0x1e>
 8005a54:	682b      	ldr	r3, [r5, #0]
 8005a56:	b103      	cbz	r3, 8005a5a <_write_r+0x1e>
 8005a58:	6023      	str	r3, [r4, #0]
 8005a5a:	bd38      	pop	{r3, r4, r5, pc}
 8005a5c:	24004250 	.word	0x24004250

08005a60 <__errno>:
 8005a60:	4b01      	ldr	r3, [pc, #4]	@ (8005a68 <__errno+0x8>)
 8005a62:	6818      	ldr	r0, [r3, #0]
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	2400003c 	.word	0x2400003c

08005a6c <__libc_init_array>:
 8005a6c:	b570      	push	{r4, r5, r6, lr}
 8005a6e:	4d0d      	ldr	r5, [pc, #52]	@ (8005aa4 <__libc_init_array+0x38>)
 8005a70:	4c0d      	ldr	r4, [pc, #52]	@ (8005aa8 <__libc_init_array+0x3c>)
 8005a72:	1b64      	subs	r4, r4, r5
 8005a74:	10a4      	asrs	r4, r4, #2
 8005a76:	2600      	movs	r6, #0
 8005a78:	42a6      	cmp	r6, r4
 8005a7a:	d109      	bne.n	8005a90 <__libc_init_array+0x24>
 8005a7c:	4d0b      	ldr	r5, [pc, #44]	@ (8005aac <__libc_init_array+0x40>)
 8005a7e:	4c0c      	ldr	r4, [pc, #48]	@ (8005ab0 <__libc_init_array+0x44>)
 8005a80:	f000 fdb8 	bl	80065f4 <_init>
 8005a84:	1b64      	subs	r4, r4, r5
 8005a86:	10a4      	asrs	r4, r4, #2
 8005a88:	2600      	movs	r6, #0
 8005a8a:	42a6      	cmp	r6, r4
 8005a8c:	d105      	bne.n	8005a9a <__libc_init_array+0x2e>
 8005a8e:	bd70      	pop	{r4, r5, r6, pc}
 8005a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a94:	4798      	blx	r3
 8005a96:	3601      	adds	r6, #1
 8005a98:	e7ee      	b.n	8005a78 <__libc_init_array+0xc>
 8005a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a9e:	4798      	blx	r3
 8005aa0:	3601      	adds	r6, #1
 8005aa2:	e7f2      	b.n	8005a8a <__libc_init_array+0x1e>
 8005aa4:	08006740 	.word	0x08006740
 8005aa8:	08006740 	.word	0x08006740
 8005aac:	08006740 	.word	0x08006740
 8005ab0:	08006744 	.word	0x08006744

08005ab4 <__retarget_lock_init_recursive>:
 8005ab4:	4770      	bx	lr

08005ab6 <__retarget_lock_acquire_recursive>:
 8005ab6:	4770      	bx	lr

08005ab8 <__retarget_lock_release_recursive>:
 8005ab8:	4770      	bx	lr
	...

08005abc <_free_r>:
 8005abc:	b538      	push	{r3, r4, r5, lr}
 8005abe:	4605      	mov	r5, r0
 8005ac0:	2900      	cmp	r1, #0
 8005ac2:	d041      	beq.n	8005b48 <_free_r+0x8c>
 8005ac4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ac8:	1f0c      	subs	r4, r1, #4
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	bfb8      	it	lt
 8005ace:	18e4      	addlt	r4, r4, r3
 8005ad0:	f000 f8e0 	bl	8005c94 <__malloc_lock>
 8005ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b4c <_free_r+0x90>)
 8005ad6:	6813      	ldr	r3, [r2, #0]
 8005ad8:	b933      	cbnz	r3, 8005ae8 <_free_r+0x2c>
 8005ada:	6063      	str	r3, [r4, #4]
 8005adc:	6014      	str	r4, [r2, #0]
 8005ade:	4628      	mov	r0, r5
 8005ae0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ae4:	f000 b8dc 	b.w	8005ca0 <__malloc_unlock>
 8005ae8:	42a3      	cmp	r3, r4
 8005aea:	d908      	bls.n	8005afe <_free_r+0x42>
 8005aec:	6820      	ldr	r0, [r4, #0]
 8005aee:	1821      	adds	r1, r4, r0
 8005af0:	428b      	cmp	r3, r1
 8005af2:	bf01      	itttt	eq
 8005af4:	6819      	ldreq	r1, [r3, #0]
 8005af6:	685b      	ldreq	r3, [r3, #4]
 8005af8:	1809      	addeq	r1, r1, r0
 8005afa:	6021      	streq	r1, [r4, #0]
 8005afc:	e7ed      	b.n	8005ada <_free_r+0x1e>
 8005afe:	461a      	mov	r2, r3
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	b10b      	cbz	r3, 8005b08 <_free_r+0x4c>
 8005b04:	42a3      	cmp	r3, r4
 8005b06:	d9fa      	bls.n	8005afe <_free_r+0x42>
 8005b08:	6811      	ldr	r1, [r2, #0]
 8005b0a:	1850      	adds	r0, r2, r1
 8005b0c:	42a0      	cmp	r0, r4
 8005b0e:	d10b      	bne.n	8005b28 <_free_r+0x6c>
 8005b10:	6820      	ldr	r0, [r4, #0]
 8005b12:	4401      	add	r1, r0
 8005b14:	1850      	adds	r0, r2, r1
 8005b16:	4283      	cmp	r3, r0
 8005b18:	6011      	str	r1, [r2, #0]
 8005b1a:	d1e0      	bne.n	8005ade <_free_r+0x22>
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	6053      	str	r3, [r2, #4]
 8005b22:	4408      	add	r0, r1
 8005b24:	6010      	str	r0, [r2, #0]
 8005b26:	e7da      	b.n	8005ade <_free_r+0x22>
 8005b28:	d902      	bls.n	8005b30 <_free_r+0x74>
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	602b      	str	r3, [r5, #0]
 8005b2e:	e7d6      	b.n	8005ade <_free_r+0x22>
 8005b30:	6820      	ldr	r0, [r4, #0]
 8005b32:	1821      	adds	r1, r4, r0
 8005b34:	428b      	cmp	r3, r1
 8005b36:	bf04      	itt	eq
 8005b38:	6819      	ldreq	r1, [r3, #0]
 8005b3a:	685b      	ldreq	r3, [r3, #4]
 8005b3c:	6063      	str	r3, [r4, #4]
 8005b3e:	bf04      	itt	eq
 8005b40:	1809      	addeq	r1, r1, r0
 8005b42:	6021      	streq	r1, [r4, #0]
 8005b44:	6054      	str	r4, [r2, #4]
 8005b46:	e7ca      	b.n	8005ade <_free_r+0x22>
 8005b48:	bd38      	pop	{r3, r4, r5, pc}
 8005b4a:	bf00      	nop
 8005b4c:	2400425c 	.word	0x2400425c

08005b50 <sbrk_aligned>:
 8005b50:	b570      	push	{r4, r5, r6, lr}
 8005b52:	4e0f      	ldr	r6, [pc, #60]	@ (8005b90 <sbrk_aligned+0x40>)
 8005b54:	460c      	mov	r4, r1
 8005b56:	6831      	ldr	r1, [r6, #0]
 8005b58:	4605      	mov	r5, r0
 8005b5a:	b911      	cbnz	r1, 8005b62 <sbrk_aligned+0x12>
 8005b5c:	f000 fcb6 	bl	80064cc <_sbrk_r>
 8005b60:	6030      	str	r0, [r6, #0]
 8005b62:	4621      	mov	r1, r4
 8005b64:	4628      	mov	r0, r5
 8005b66:	f000 fcb1 	bl	80064cc <_sbrk_r>
 8005b6a:	1c43      	adds	r3, r0, #1
 8005b6c:	d103      	bne.n	8005b76 <sbrk_aligned+0x26>
 8005b6e:	f04f 34ff 	mov.w	r4, #4294967295
 8005b72:	4620      	mov	r0, r4
 8005b74:	bd70      	pop	{r4, r5, r6, pc}
 8005b76:	1cc4      	adds	r4, r0, #3
 8005b78:	f024 0403 	bic.w	r4, r4, #3
 8005b7c:	42a0      	cmp	r0, r4
 8005b7e:	d0f8      	beq.n	8005b72 <sbrk_aligned+0x22>
 8005b80:	1a21      	subs	r1, r4, r0
 8005b82:	4628      	mov	r0, r5
 8005b84:	f000 fca2 	bl	80064cc <_sbrk_r>
 8005b88:	3001      	adds	r0, #1
 8005b8a:	d1f2      	bne.n	8005b72 <sbrk_aligned+0x22>
 8005b8c:	e7ef      	b.n	8005b6e <sbrk_aligned+0x1e>
 8005b8e:	bf00      	nop
 8005b90:	24004258 	.word	0x24004258

08005b94 <_malloc_r>:
 8005b94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b98:	1ccd      	adds	r5, r1, #3
 8005b9a:	f025 0503 	bic.w	r5, r5, #3
 8005b9e:	3508      	adds	r5, #8
 8005ba0:	2d0c      	cmp	r5, #12
 8005ba2:	bf38      	it	cc
 8005ba4:	250c      	movcc	r5, #12
 8005ba6:	2d00      	cmp	r5, #0
 8005ba8:	4606      	mov	r6, r0
 8005baa:	db01      	blt.n	8005bb0 <_malloc_r+0x1c>
 8005bac:	42a9      	cmp	r1, r5
 8005bae:	d904      	bls.n	8005bba <_malloc_r+0x26>
 8005bb0:	230c      	movs	r3, #12
 8005bb2:	6033      	str	r3, [r6, #0]
 8005bb4:	2000      	movs	r0, #0
 8005bb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c90 <_malloc_r+0xfc>
 8005bbe:	f000 f869 	bl	8005c94 <__malloc_lock>
 8005bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8005bc6:	461c      	mov	r4, r3
 8005bc8:	bb44      	cbnz	r4, 8005c1c <_malloc_r+0x88>
 8005bca:	4629      	mov	r1, r5
 8005bcc:	4630      	mov	r0, r6
 8005bce:	f7ff ffbf 	bl	8005b50 <sbrk_aligned>
 8005bd2:	1c43      	adds	r3, r0, #1
 8005bd4:	4604      	mov	r4, r0
 8005bd6:	d158      	bne.n	8005c8a <_malloc_r+0xf6>
 8005bd8:	f8d8 4000 	ldr.w	r4, [r8]
 8005bdc:	4627      	mov	r7, r4
 8005bde:	2f00      	cmp	r7, #0
 8005be0:	d143      	bne.n	8005c6a <_malloc_r+0xd6>
 8005be2:	2c00      	cmp	r4, #0
 8005be4:	d04b      	beq.n	8005c7e <_malloc_r+0xea>
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	4639      	mov	r1, r7
 8005bea:	4630      	mov	r0, r6
 8005bec:	eb04 0903 	add.w	r9, r4, r3
 8005bf0:	f000 fc6c 	bl	80064cc <_sbrk_r>
 8005bf4:	4581      	cmp	r9, r0
 8005bf6:	d142      	bne.n	8005c7e <_malloc_r+0xea>
 8005bf8:	6821      	ldr	r1, [r4, #0]
 8005bfa:	1a6d      	subs	r5, r5, r1
 8005bfc:	4629      	mov	r1, r5
 8005bfe:	4630      	mov	r0, r6
 8005c00:	f7ff ffa6 	bl	8005b50 <sbrk_aligned>
 8005c04:	3001      	adds	r0, #1
 8005c06:	d03a      	beq.n	8005c7e <_malloc_r+0xea>
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	442b      	add	r3, r5
 8005c0c:	6023      	str	r3, [r4, #0]
 8005c0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005c12:	685a      	ldr	r2, [r3, #4]
 8005c14:	bb62      	cbnz	r2, 8005c70 <_malloc_r+0xdc>
 8005c16:	f8c8 7000 	str.w	r7, [r8]
 8005c1a:	e00f      	b.n	8005c3c <_malloc_r+0xa8>
 8005c1c:	6822      	ldr	r2, [r4, #0]
 8005c1e:	1b52      	subs	r2, r2, r5
 8005c20:	d420      	bmi.n	8005c64 <_malloc_r+0xd0>
 8005c22:	2a0b      	cmp	r2, #11
 8005c24:	d917      	bls.n	8005c56 <_malloc_r+0xc2>
 8005c26:	1961      	adds	r1, r4, r5
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	6025      	str	r5, [r4, #0]
 8005c2c:	bf18      	it	ne
 8005c2e:	6059      	strne	r1, [r3, #4]
 8005c30:	6863      	ldr	r3, [r4, #4]
 8005c32:	bf08      	it	eq
 8005c34:	f8c8 1000 	streq.w	r1, [r8]
 8005c38:	5162      	str	r2, [r4, r5]
 8005c3a:	604b      	str	r3, [r1, #4]
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f000 f82f 	bl	8005ca0 <__malloc_unlock>
 8005c42:	f104 000b 	add.w	r0, r4, #11
 8005c46:	1d23      	adds	r3, r4, #4
 8005c48:	f020 0007 	bic.w	r0, r0, #7
 8005c4c:	1ac2      	subs	r2, r0, r3
 8005c4e:	bf1c      	itt	ne
 8005c50:	1a1b      	subne	r3, r3, r0
 8005c52:	50a3      	strne	r3, [r4, r2]
 8005c54:	e7af      	b.n	8005bb6 <_malloc_r+0x22>
 8005c56:	6862      	ldr	r2, [r4, #4]
 8005c58:	42a3      	cmp	r3, r4
 8005c5a:	bf0c      	ite	eq
 8005c5c:	f8c8 2000 	streq.w	r2, [r8]
 8005c60:	605a      	strne	r2, [r3, #4]
 8005c62:	e7eb      	b.n	8005c3c <_malloc_r+0xa8>
 8005c64:	4623      	mov	r3, r4
 8005c66:	6864      	ldr	r4, [r4, #4]
 8005c68:	e7ae      	b.n	8005bc8 <_malloc_r+0x34>
 8005c6a:	463c      	mov	r4, r7
 8005c6c:	687f      	ldr	r7, [r7, #4]
 8005c6e:	e7b6      	b.n	8005bde <_malloc_r+0x4a>
 8005c70:	461a      	mov	r2, r3
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	42a3      	cmp	r3, r4
 8005c76:	d1fb      	bne.n	8005c70 <_malloc_r+0xdc>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	6053      	str	r3, [r2, #4]
 8005c7c:	e7de      	b.n	8005c3c <_malloc_r+0xa8>
 8005c7e:	230c      	movs	r3, #12
 8005c80:	6033      	str	r3, [r6, #0]
 8005c82:	4630      	mov	r0, r6
 8005c84:	f000 f80c 	bl	8005ca0 <__malloc_unlock>
 8005c88:	e794      	b.n	8005bb4 <_malloc_r+0x20>
 8005c8a:	6005      	str	r5, [r0, #0]
 8005c8c:	e7d6      	b.n	8005c3c <_malloc_r+0xa8>
 8005c8e:	bf00      	nop
 8005c90:	2400425c 	.word	0x2400425c

08005c94 <__malloc_lock>:
 8005c94:	4801      	ldr	r0, [pc, #4]	@ (8005c9c <__malloc_lock+0x8>)
 8005c96:	f7ff bf0e 	b.w	8005ab6 <__retarget_lock_acquire_recursive>
 8005c9a:	bf00      	nop
 8005c9c:	24004254 	.word	0x24004254

08005ca0 <__malloc_unlock>:
 8005ca0:	4801      	ldr	r0, [pc, #4]	@ (8005ca8 <__malloc_unlock+0x8>)
 8005ca2:	f7ff bf09 	b.w	8005ab8 <__retarget_lock_release_recursive>
 8005ca6:	bf00      	nop
 8005ca8:	24004254 	.word	0x24004254

08005cac <__sfputc_r>:
 8005cac:	6893      	ldr	r3, [r2, #8]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	b410      	push	{r4}
 8005cb4:	6093      	str	r3, [r2, #8]
 8005cb6:	da08      	bge.n	8005cca <__sfputc_r+0x1e>
 8005cb8:	6994      	ldr	r4, [r2, #24]
 8005cba:	42a3      	cmp	r3, r4
 8005cbc:	db01      	blt.n	8005cc2 <__sfputc_r+0x16>
 8005cbe:	290a      	cmp	r1, #10
 8005cc0:	d103      	bne.n	8005cca <__sfputc_r+0x1e>
 8005cc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cc6:	f000 bb6d 	b.w	80063a4 <__swbuf_r>
 8005cca:	6813      	ldr	r3, [r2, #0]
 8005ccc:	1c58      	adds	r0, r3, #1
 8005cce:	6010      	str	r0, [r2, #0]
 8005cd0:	7019      	strb	r1, [r3, #0]
 8005cd2:	4608      	mov	r0, r1
 8005cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <__sfputs_r>:
 8005cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cdc:	4606      	mov	r6, r0
 8005cde:	460f      	mov	r7, r1
 8005ce0:	4614      	mov	r4, r2
 8005ce2:	18d5      	adds	r5, r2, r3
 8005ce4:	42ac      	cmp	r4, r5
 8005ce6:	d101      	bne.n	8005cec <__sfputs_r+0x12>
 8005ce8:	2000      	movs	r0, #0
 8005cea:	e007      	b.n	8005cfc <__sfputs_r+0x22>
 8005cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cf0:	463a      	mov	r2, r7
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	f7ff ffda 	bl	8005cac <__sfputc_r>
 8005cf8:	1c43      	adds	r3, r0, #1
 8005cfa:	d1f3      	bne.n	8005ce4 <__sfputs_r+0xa>
 8005cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005d00 <_vfiprintf_r>:
 8005d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d04:	460d      	mov	r5, r1
 8005d06:	b09d      	sub	sp, #116	@ 0x74
 8005d08:	4614      	mov	r4, r2
 8005d0a:	4698      	mov	r8, r3
 8005d0c:	4606      	mov	r6, r0
 8005d0e:	b118      	cbz	r0, 8005d18 <_vfiprintf_r+0x18>
 8005d10:	6a03      	ldr	r3, [r0, #32]
 8005d12:	b90b      	cbnz	r3, 8005d18 <_vfiprintf_r+0x18>
 8005d14:	f7ff fdca 	bl	80058ac <__sinit>
 8005d18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d1a:	07d9      	lsls	r1, r3, #31
 8005d1c:	d405      	bmi.n	8005d2a <_vfiprintf_r+0x2a>
 8005d1e:	89ab      	ldrh	r3, [r5, #12]
 8005d20:	059a      	lsls	r2, r3, #22
 8005d22:	d402      	bmi.n	8005d2a <_vfiprintf_r+0x2a>
 8005d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d26:	f7ff fec6 	bl	8005ab6 <__retarget_lock_acquire_recursive>
 8005d2a:	89ab      	ldrh	r3, [r5, #12]
 8005d2c:	071b      	lsls	r3, r3, #28
 8005d2e:	d501      	bpl.n	8005d34 <_vfiprintf_r+0x34>
 8005d30:	692b      	ldr	r3, [r5, #16]
 8005d32:	b99b      	cbnz	r3, 8005d5c <_vfiprintf_r+0x5c>
 8005d34:	4629      	mov	r1, r5
 8005d36:	4630      	mov	r0, r6
 8005d38:	f000 fb72 	bl	8006420 <__swsetup_r>
 8005d3c:	b170      	cbz	r0, 8005d5c <_vfiprintf_r+0x5c>
 8005d3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d40:	07dc      	lsls	r4, r3, #31
 8005d42:	d504      	bpl.n	8005d4e <_vfiprintf_r+0x4e>
 8005d44:	f04f 30ff 	mov.w	r0, #4294967295
 8005d48:	b01d      	add	sp, #116	@ 0x74
 8005d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d4e:	89ab      	ldrh	r3, [r5, #12]
 8005d50:	0598      	lsls	r0, r3, #22
 8005d52:	d4f7      	bmi.n	8005d44 <_vfiprintf_r+0x44>
 8005d54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d56:	f7ff feaf 	bl	8005ab8 <__retarget_lock_release_recursive>
 8005d5a:	e7f3      	b.n	8005d44 <_vfiprintf_r+0x44>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d60:	2320      	movs	r3, #32
 8005d62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d66:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d6a:	2330      	movs	r3, #48	@ 0x30
 8005d6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005f1c <_vfiprintf_r+0x21c>
 8005d70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d74:	f04f 0901 	mov.w	r9, #1
 8005d78:	4623      	mov	r3, r4
 8005d7a:	469a      	mov	sl, r3
 8005d7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d80:	b10a      	cbz	r2, 8005d86 <_vfiprintf_r+0x86>
 8005d82:	2a25      	cmp	r2, #37	@ 0x25
 8005d84:	d1f9      	bne.n	8005d7a <_vfiprintf_r+0x7a>
 8005d86:	ebba 0b04 	subs.w	fp, sl, r4
 8005d8a:	d00b      	beq.n	8005da4 <_vfiprintf_r+0xa4>
 8005d8c:	465b      	mov	r3, fp
 8005d8e:	4622      	mov	r2, r4
 8005d90:	4629      	mov	r1, r5
 8005d92:	4630      	mov	r0, r6
 8005d94:	f7ff ffa1 	bl	8005cda <__sfputs_r>
 8005d98:	3001      	adds	r0, #1
 8005d9a:	f000 80a7 	beq.w	8005eec <_vfiprintf_r+0x1ec>
 8005d9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005da0:	445a      	add	r2, fp
 8005da2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005da4:	f89a 3000 	ldrb.w	r3, [sl]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 809f 	beq.w	8005eec <_vfiprintf_r+0x1ec>
 8005dae:	2300      	movs	r3, #0
 8005db0:	f04f 32ff 	mov.w	r2, #4294967295
 8005db4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005db8:	f10a 0a01 	add.w	sl, sl, #1
 8005dbc:	9304      	str	r3, [sp, #16]
 8005dbe:	9307      	str	r3, [sp, #28]
 8005dc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005dc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005dc6:	4654      	mov	r4, sl
 8005dc8:	2205      	movs	r2, #5
 8005dca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005dce:	4853      	ldr	r0, [pc, #332]	@ (8005f1c <_vfiprintf_r+0x21c>)
 8005dd0:	f7fa fa9e 	bl	8000310 <memchr>
 8005dd4:	9a04      	ldr	r2, [sp, #16]
 8005dd6:	b9d8      	cbnz	r0, 8005e10 <_vfiprintf_r+0x110>
 8005dd8:	06d1      	lsls	r1, r2, #27
 8005dda:	bf44      	itt	mi
 8005ddc:	2320      	movmi	r3, #32
 8005dde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005de2:	0713      	lsls	r3, r2, #28
 8005de4:	bf44      	itt	mi
 8005de6:	232b      	movmi	r3, #43	@ 0x2b
 8005de8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dec:	f89a 3000 	ldrb.w	r3, [sl]
 8005df0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005df2:	d015      	beq.n	8005e20 <_vfiprintf_r+0x120>
 8005df4:	9a07      	ldr	r2, [sp, #28]
 8005df6:	4654      	mov	r4, sl
 8005df8:	2000      	movs	r0, #0
 8005dfa:	f04f 0c0a 	mov.w	ip, #10
 8005dfe:	4621      	mov	r1, r4
 8005e00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e04:	3b30      	subs	r3, #48	@ 0x30
 8005e06:	2b09      	cmp	r3, #9
 8005e08:	d94b      	bls.n	8005ea2 <_vfiprintf_r+0x1a2>
 8005e0a:	b1b0      	cbz	r0, 8005e3a <_vfiprintf_r+0x13a>
 8005e0c:	9207      	str	r2, [sp, #28]
 8005e0e:	e014      	b.n	8005e3a <_vfiprintf_r+0x13a>
 8005e10:	eba0 0308 	sub.w	r3, r0, r8
 8005e14:	fa09 f303 	lsl.w	r3, r9, r3
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	9304      	str	r3, [sp, #16]
 8005e1c:	46a2      	mov	sl, r4
 8005e1e:	e7d2      	b.n	8005dc6 <_vfiprintf_r+0xc6>
 8005e20:	9b03      	ldr	r3, [sp, #12]
 8005e22:	1d19      	adds	r1, r3, #4
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	9103      	str	r1, [sp, #12]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	bfbb      	ittet	lt
 8005e2c:	425b      	neglt	r3, r3
 8005e2e:	f042 0202 	orrlt.w	r2, r2, #2
 8005e32:	9307      	strge	r3, [sp, #28]
 8005e34:	9307      	strlt	r3, [sp, #28]
 8005e36:	bfb8      	it	lt
 8005e38:	9204      	strlt	r2, [sp, #16]
 8005e3a:	7823      	ldrb	r3, [r4, #0]
 8005e3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e3e:	d10a      	bne.n	8005e56 <_vfiprintf_r+0x156>
 8005e40:	7863      	ldrb	r3, [r4, #1]
 8005e42:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e44:	d132      	bne.n	8005eac <_vfiprintf_r+0x1ac>
 8005e46:	9b03      	ldr	r3, [sp, #12]
 8005e48:	1d1a      	adds	r2, r3, #4
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	9203      	str	r2, [sp, #12]
 8005e4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e52:	3402      	adds	r4, #2
 8005e54:	9305      	str	r3, [sp, #20]
 8005e56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005f2c <_vfiprintf_r+0x22c>
 8005e5a:	7821      	ldrb	r1, [r4, #0]
 8005e5c:	2203      	movs	r2, #3
 8005e5e:	4650      	mov	r0, sl
 8005e60:	f7fa fa56 	bl	8000310 <memchr>
 8005e64:	b138      	cbz	r0, 8005e76 <_vfiprintf_r+0x176>
 8005e66:	9b04      	ldr	r3, [sp, #16]
 8005e68:	eba0 000a 	sub.w	r0, r0, sl
 8005e6c:	2240      	movs	r2, #64	@ 0x40
 8005e6e:	4082      	lsls	r2, r0
 8005e70:	4313      	orrs	r3, r2
 8005e72:	3401      	adds	r4, #1
 8005e74:	9304      	str	r3, [sp, #16]
 8005e76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e7a:	4829      	ldr	r0, [pc, #164]	@ (8005f20 <_vfiprintf_r+0x220>)
 8005e7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e80:	2206      	movs	r2, #6
 8005e82:	f7fa fa45 	bl	8000310 <memchr>
 8005e86:	2800      	cmp	r0, #0
 8005e88:	d03f      	beq.n	8005f0a <_vfiprintf_r+0x20a>
 8005e8a:	4b26      	ldr	r3, [pc, #152]	@ (8005f24 <_vfiprintf_r+0x224>)
 8005e8c:	bb1b      	cbnz	r3, 8005ed6 <_vfiprintf_r+0x1d6>
 8005e8e:	9b03      	ldr	r3, [sp, #12]
 8005e90:	3307      	adds	r3, #7
 8005e92:	f023 0307 	bic.w	r3, r3, #7
 8005e96:	3308      	adds	r3, #8
 8005e98:	9303      	str	r3, [sp, #12]
 8005e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e9c:	443b      	add	r3, r7
 8005e9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ea0:	e76a      	b.n	8005d78 <_vfiprintf_r+0x78>
 8005ea2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005ea6:	460c      	mov	r4, r1
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	e7a8      	b.n	8005dfe <_vfiprintf_r+0xfe>
 8005eac:	2300      	movs	r3, #0
 8005eae:	3401      	adds	r4, #1
 8005eb0:	9305      	str	r3, [sp, #20]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	f04f 0c0a 	mov.w	ip, #10
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ebe:	3a30      	subs	r2, #48	@ 0x30
 8005ec0:	2a09      	cmp	r2, #9
 8005ec2:	d903      	bls.n	8005ecc <_vfiprintf_r+0x1cc>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d0c6      	beq.n	8005e56 <_vfiprintf_r+0x156>
 8005ec8:	9105      	str	r1, [sp, #20]
 8005eca:	e7c4      	b.n	8005e56 <_vfiprintf_r+0x156>
 8005ecc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ed0:	4604      	mov	r4, r0
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e7f0      	b.n	8005eb8 <_vfiprintf_r+0x1b8>
 8005ed6:	ab03      	add	r3, sp, #12
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	462a      	mov	r2, r5
 8005edc:	4b12      	ldr	r3, [pc, #72]	@ (8005f28 <_vfiprintf_r+0x228>)
 8005ede:	a904      	add	r1, sp, #16
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	f3af 8000 	nop.w
 8005ee6:	4607      	mov	r7, r0
 8005ee8:	1c78      	adds	r0, r7, #1
 8005eea:	d1d6      	bne.n	8005e9a <_vfiprintf_r+0x19a>
 8005eec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005eee:	07d9      	lsls	r1, r3, #31
 8005ef0:	d405      	bmi.n	8005efe <_vfiprintf_r+0x1fe>
 8005ef2:	89ab      	ldrh	r3, [r5, #12]
 8005ef4:	059a      	lsls	r2, r3, #22
 8005ef6:	d402      	bmi.n	8005efe <_vfiprintf_r+0x1fe>
 8005ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005efa:	f7ff fddd 	bl	8005ab8 <__retarget_lock_release_recursive>
 8005efe:	89ab      	ldrh	r3, [r5, #12]
 8005f00:	065b      	lsls	r3, r3, #25
 8005f02:	f53f af1f 	bmi.w	8005d44 <_vfiprintf_r+0x44>
 8005f06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005f08:	e71e      	b.n	8005d48 <_vfiprintf_r+0x48>
 8005f0a:	ab03      	add	r3, sp, #12
 8005f0c:	9300      	str	r3, [sp, #0]
 8005f0e:	462a      	mov	r2, r5
 8005f10:	4b05      	ldr	r3, [pc, #20]	@ (8005f28 <_vfiprintf_r+0x228>)
 8005f12:	a904      	add	r1, sp, #16
 8005f14:	4630      	mov	r0, r6
 8005f16:	f000 f879 	bl	800600c <_printf_i>
 8005f1a:	e7e4      	b.n	8005ee6 <_vfiprintf_r+0x1e6>
 8005f1c:	08006704 	.word	0x08006704
 8005f20:	0800670e 	.word	0x0800670e
 8005f24:	00000000 	.word	0x00000000
 8005f28:	08005cdb 	.word	0x08005cdb
 8005f2c:	0800670a 	.word	0x0800670a

08005f30 <_printf_common>:
 8005f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	4616      	mov	r6, r2
 8005f36:	4698      	mov	r8, r3
 8005f38:	688a      	ldr	r2, [r1, #8]
 8005f3a:	690b      	ldr	r3, [r1, #16]
 8005f3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f40:	4293      	cmp	r3, r2
 8005f42:	bfb8      	it	lt
 8005f44:	4613      	movlt	r3, r2
 8005f46:	6033      	str	r3, [r6, #0]
 8005f48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f4c:	4607      	mov	r7, r0
 8005f4e:	460c      	mov	r4, r1
 8005f50:	b10a      	cbz	r2, 8005f56 <_printf_common+0x26>
 8005f52:	3301      	adds	r3, #1
 8005f54:	6033      	str	r3, [r6, #0]
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	0699      	lsls	r1, r3, #26
 8005f5a:	bf42      	ittt	mi
 8005f5c:	6833      	ldrmi	r3, [r6, #0]
 8005f5e:	3302      	addmi	r3, #2
 8005f60:	6033      	strmi	r3, [r6, #0]
 8005f62:	6825      	ldr	r5, [r4, #0]
 8005f64:	f015 0506 	ands.w	r5, r5, #6
 8005f68:	d106      	bne.n	8005f78 <_printf_common+0x48>
 8005f6a:	f104 0a19 	add.w	sl, r4, #25
 8005f6e:	68e3      	ldr	r3, [r4, #12]
 8005f70:	6832      	ldr	r2, [r6, #0]
 8005f72:	1a9b      	subs	r3, r3, r2
 8005f74:	42ab      	cmp	r3, r5
 8005f76:	dc26      	bgt.n	8005fc6 <_printf_common+0x96>
 8005f78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f7c:	6822      	ldr	r2, [r4, #0]
 8005f7e:	3b00      	subs	r3, #0
 8005f80:	bf18      	it	ne
 8005f82:	2301      	movne	r3, #1
 8005f84:	0692      	lsls	r2, r2, #26
 8005f86:	d42b      	bmi.n	8005fe0 <_printf_common+0xb0>
 8005f88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f8c:	4641      	mov	r1, r8
 8005f8e:	4638      	mov	r0, r7
 8005f90:	47c8      	blx	r9
 8005f92:	3001      	adds	r0, #1
 8005f94:	d01e      	beq.n	8005fd4 <_printf_common+0xa4>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	6922      	ldr	r2, [r4, #16]
 8005f9a:	f003 0306 	and.w	r3, r3, #6
 8005f9e:	2b04      	cmp	r3, #4
 8005fa0:	bf02      	ittt	eq
 8005fa2:	68e5      	ldreq	r5, [r4, #12]
 8005fa4:	6833      	ldreq	r3, [r6, #0]
 8005fa6:	1aed      	subeq	r5, r5, r3
 8005fa8:	68a3      	ldr	r3, [r4, #8]
 8005faa:	bf0c      	ite	eq
 8005fac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005fb0:	2500      	movne	r5, #0
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	bfc4      	itt	gt
 8005fb6:	1a9b      	subgt	r3, r3, r2
 8005fb8:	18ed      	addgt	r5, r5, r3
 8005fba:	2600      	movs	r6, #0
 8005fbc:	341a      	adds	r4, #26
 8005fbe:	42b5      	cmp	r5, r6
 8005fc0:	d11a      	bne.n	8005ff8 <_printf_common+0xc8>
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	e008      	b.n	8005fd8 <_printf_common+0xa8>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	4652      	mov	r2, sl
 8005fca:	4641      	mov	r1, r8
 8005fcc:	4638      	mov	r0, r7
 8005fce:	47c8      	blx	r9
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	d103      	bne.n	8005fdc <_printf_common+0xac>
 8005fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fdc:	3501      	adds	r5, #1
 8005fde:	e7c6      	b.n	8005f6e <_printf_common+0x3e>
 8005fe0:	18e1      	adds	r1, r4, r3
 8005fe2:	1c5a      	adds	r2, r3, #1
 8005fe4:	2030      	movs	r0, #48	@ 0x30
 8005fe6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fea:	4422      	add	r2, r4
 8005fec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ff0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ff4:	3302      	adds	r3, #2
 8005ff6:	e7c7      	b.n	8005f88 <_printf_common+0x58>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	4641      	mov	r1, r8
 8005ffe:	4638      	mov	r0, r7
 8006000:	47c8      	blx	r9
 8006002:	3001      	adds	r0, #1
 8006004:	d0e6      	beq.n	8005fd4 <_printf_common+0xa4>
 8006006:	3601      	adds	r6, #1
 8006008:	e7d9      	b.n	8005fbe <_printf_common+0x8e>
	...

0800600c <_printf_i>:
 800600c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006010:	7e0f      	ldrb	r7, [r1, #24]
 8006012:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006014:	2f78      	cmp	r7, #120	@ 0x78
 8006016:	4691      	mov	r9, r2
 8006018:	4680      	mov	r8, r0
 800601a:	460c      	mov	r4, r1
 800601c:	469a      	mov	sl, r3
 800601e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006022:	d807      	bhi.n	8006034 <_printf_i+0x28>
 8006024:	2f62      	cmp	r7, #98	@ 0x62
 8006026:	d80a      	bhi.n	800603e <_printf_i+0x32>
 8006028:	2f00      	cmp	r7, #0
 800602a:	f000 80d2 	beq.w	80061d2 <_printf_i+0x1c6>
 800602e:	2f58      	cmp	r7, #88	@ 0x58
 8006030:	f000 80b9 	beq.w	80061a6 <_printf_i+0x19a>
 8006034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006038:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800603c:	e03a      	b.n	80060b4 <_printf_i+0xa8>
 800603e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006042:	2b15      	cmp	r3, #21
 8006044:	d8f6      	bhi.n	8006034 <_printf_i+0x28>
 8006046:	a101      	add	r1, pc, #4	@ (adr r1, 800604c <_printf_i+0x40>)
 8006048:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800604c:	080060a5 	.word	0x080060a5
 8006050:	080060b9 	.word	0x080060b9
 8006054:	08006035 	.word	0x08006035
 8006058:	08006035 	.word	0x08006035
 800605c:	08006035 	.word	0x08006035
 8006060:	08006035 	.word	0x08006035
 8006064:	080060b9 	.word	0x080060b9
 8006068:	08006035 	.word	0x08006035
 800606c:	08006035 	.word	0x08006035
 8006070:	08006035 	.word	0x08006035
 8006074:	08006035 	.word	0x08006035
 8006078:	080061b9 	.word	0x080061b9
 800607c:	080060e3 	.word	0x080060e3
 8006080:	08006173 	.word	0x08006173
 8006084:	08006035 	.word	0x08006035
 8006088:	08006035 	.word	0x08006035
 800608c:	080061db 	.word	0x080061db
 8006090:	08006035 	.word	0x08006035
 8006094:	080060e3 	.word	0x080060e3
 8006098:	08006035 	.word	0x08006035
 800609c:	08006035 	.word	0x08006035
 80060a0:	0800617b 	.word	0x0800617b
 80060a4:	6833      	ldr	r3, [r6, #0]
 80060a6:	1d1a      	adds	r2, r3, #4
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	6032      	str	r2, [r6, #0]
 80060ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80060b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80060b4:	2301      	movs	r3, #1
 80060b6:	e09d      	b.n	80061f4 <_printf_i+0x1e8>
 80060b8:	6833      	ldr	r3, [r6, #0]
 80060ba:	6820      	ldr	r0, [r4, #0]
 80060bc:	1d19      	adds	r1, r3, #4
 80060be:	6031      	str	r1, [r6, #0]
 80060c0:	0606      	lsls	r6, r0, #24
 80060c2:	d501      	bpl.n	80060c8 <_printf_i+0xbc>
 80060c4:	681d      	ldr	r5, [r3, #0]
 80060c6:	e003      	b.n	80060d0 <_printf_i+0xc4>
 80060c8:	0645      	lsls	r5, r0, #25
 80060ca:	d5fb      	bpl.n	80060c4 <_printf_i+0xb8>
 80060cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060d0:	2d00      	cmp	r5, #0
 80060d2:	da03      	bge.n	80060dc <_printf_i+0xd0>
 80060d4:	232d      	movs	r3, #45	@ 0x2d
 80060d6:	426d      	negs	r5, r5
 80060d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060dc:	4859      	ldr	r0, [pc, #356]	@ (8006244 <_printf_i+0x238>)
 80060de:	230a      	movs	r3, #10
 80060e0:	e011      	b.n	8006106 <_printf_i+0xfa>
 80060e2:	6821      	ldr	r1, [r4, #0]
 80060e4:	6833      	ldr	r3, [r6, #0]
 80060e6:	0608      	lsls	r0, r1, #24
 80060e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80060ec:	d402      	bmi.n	80060f4 <_printf_i+0xe8>
 80060ee:	0649      	lsls	r1, r1, #25
 80060f0:	bf48      	it	mi
 80060f2:	b2ad      	uxthmi	r5, r5
 80060f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80060f6:	4853      	ldr	r0, [pc, #332]	@ (8006244 <_printf_i+0x238>)
 80060f8:	6033      	str	r3, [r6, #0]
 80060fa:	bf14      	ite	ne
 80060fc:	230a      	movne	r3, #10
 80060fe:	2308      	moveq	r3, #8
 8006100:	2100      	movs	r1, #0
 8006102:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006106:	6866      	ldr	r6, [r4, #4]
 8006108:	60a6      	str	r6, [r4, #8]
 800610a:	2e00      	cmp	r6, #0
 800610c:	bfa2      	ittt	ge
 800610e:	6821      	ldrge	r1, [r4, #0]
 8006110:	f021 0104 	bicge.w	r1, r1, #4
 8006114:	6021      	strge	r1, [r4, #0]
 8006116:	b90d      	cbnz	r5, 800611c <_printf_i+0x110>
 8006118:	2e00      	cmp	r6, #0
 800611a:	d04b      	beq.n	80061b4 <_printf_i+0x1a8>
 800611c:	4616      	mov	r6, r2
 800611e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006122:	fb03 5711 	mls	r7, r3, r1, r5
 8006126:	5dc7      	ldrb	r7, [r0, r7]
 8006128:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800612c:	462f      	mov	r7, r5
 800612e:	42bb      	cmp	r3, r7
 8006130:	460d      	mov	r5, r1
 8006132:	d9f4      	bls.n	800611e <_printf_i+0x112>
 8006134:	2b08      	cmp	r3, #8
 8006136:	d10b      	bne.n	8006150 <_printf_i+0x144>
 8006138:	6823      	ldr	r3, [r4, #0]
 800613a:	07df      	lsls	r7, r3, #31
 800613c:	d508      	bpl.n	8006150 <_printf_i+0x144>
 800613e:	6923      	ldr	r3, [r4, #16]
 8006140:	6861      	ldr	r1, [r4, #4]
 8006142:	4299      	cmp	r1, r3
 8006144:	bfde      	ittt	le
 8006146:	2330      	movle	r3, #48	@ 0x30
 8006148:	f806 3c01 	strble.w	r3, [r6, #-1]
 800614c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006150:	1b92      	subs	r2, r2, r6
 8006152:	6122      	str	r2, [r4, #16]
 8006154:	f8cd a000 	str.w	sl, [sp]
 8006158:	464b      	mov	r3, r9
 800615a:	aa03      	add	r2, sp, #12
 800615c:	4621      	mov	r1, r4
 800615e:	4640      	mov	r0, r8
 8006160:	f7ff fee6 	bl	8005f30 <_printf_common>
 8006164:	3001      	adds	r0, #1
 8006166:	d14a      	bne.n	80061fe <_printf_i+0x1f2>
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	b004      	add	sp, #16
 800616e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	f043 0320 	orr.w	r3, r3, #32
 8006178:	6023      	str	r3, [r4, #0]
 800617a:	4833      	ldr	r0, [pc, #204]	@ (8006248 <_printf_i+0x23c>)
 800617c:	2778      	movs	r7, #120	@ 0x78
 800617e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006182:	6823      	ldr	r3, [r4, #0]
 8006184:	6831      	ldr	r1, [r6, #0]
 8006186:	061f      	lsls	r7, r3, #24
 8006188:	f851 5b04 	ldr.w	r5, [r1], #4
 800618c:	d402      	bmi.n	8006194 <_printf_i+0x188>
 800618e:	065f      	lsls	r7, r3, #25
 8006190:	bf48      	it	mi
 8006192:	b2ad      	uxthmi	r5, r5
 8006194:	6031      	str	r1, [r6, #0]
 8006196:	07d9      	lsls	r1, r3, #31
 8006198:	bf44      	itt	mi
 800619a:	f043 0320 	orrmi.w	r3, r3, #32
 800619e:	6023      	strmi	r3, [r4, #0]
 80061a0:	b11d      	cbz	r5, 80061aa <_printf_i+0x19e>
 80061a2:	2310      	movs	r3, #16
 80061a4:	e7ac      	b.n	8006100 <_printf_i+0xf4>
 80061a6:	4827      	ldr	r0, [pc, #156]	@ (8006244 <_printf_i+0x238>)
 80061a8:	e7e9      	b.n	800617e <_printf_i+0x172>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	f023 0320 	bic.w	r3, r3, #32
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	e7f6      	b.n	80061a2 <_printf_i+0x196>
 80061b4:	4616      	mov	r6, r2
 80061b6:	e7bd      	b.n	8006134 <_printf_i+0x128>
 80061b8:	6833      	ldr	r3, [r6, #0]
 80061ba:	6825      	ldr	r5, [r4, #0]
 80061bc:	6961      	ldr	r1, [r4, #20]
 80061be:	1d18      	adds	r0, r3, #4
 80061c0:	6030      	str	r0, [r6, #0]
 80061c2:	062e      	lsls	r6, r5, #24
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	d501      	bpl.n	80061cc <_printf_i+0x1c0>
 80061c8:	6019      	str	r1, [r3, #0]
 80061ca:	e002      	b.n	80061d2 <_printf_i+0x1c6>
 80061cc:	0668      	lsls	r0, r5, #25
 80061ce:	d5fb      	bpl.n	80061c8 <_printf_i+0x1bc>
 80061d0:	8019      	strh	r1, [r3, #0]
 80061d2:	2300      	movs	r3, #0
 80061d4:	6123      	str	r3, [r4, #16]
 80061d6:	4616      	mov	r6, r2
 80061d8:	e7bc      	b.n	8006154 <_printf_i+0x148>
 80061da:	6833      	ldr	r3, [r6, #0]
 80061dc:	1d1a      	adds	r2, r3, #4
 80061de:	6032      	str	r2, [r6, #0]
 80061e0:	681e      	ldr	r6, [r3, #0]
 80061e2:	6862      	ldr	r2, [r4, #4]
 80061e4:	2100      	movs	r1, #0
 80061e6:	4630      	mov	r0, r6
 80061e8:	f7fa f892 	bl	8000310 <memchr>
 80061ec:	b108      	cbz	r0, 80061f2 <_printf_i+0x1e6>
 80061ee:	1b80      	subs	r0, r0, r6
 80061f0:	6060      	str	r0, [r4, #4]
 80061f2:	6863      	ldr	r3, [r4, #4]
 80061f4:	6123      	str	r3, [r4, #16]
 80061f6:	2300      	movs	r3, #0
 80061f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061fc:	e7aa      	b.n	8006154 <_printf_i+0x148>
 80061fe:	6923      	ldr	r3, [r4, #16]
 8006200:	4632      	mov	r2, r6
 8006202:	4649      	mov	r1, r9
 8006204:	4640      	mov	r0, r8
 8006206:	47d0      	blx	sl
 8006208:	3001      	adds	r0, #1
 800620a:	d0ad      	beq.n	8006168 <_printf_i+0x15c>
 800620c:	6823      	ldr	r3, [r4, #0]
 800620e:	079b      	lsls	r3, r3, #30
 8006210:	d413      	bmi.n	800623a <_printf_i+0x22e>
 8006212:	68e0      	ldr	r0, [r4, #12]
 8006214:	9b03      	ldr	r3, [sp, #12]
 8006216:	4298      	cmp	r0, r3
 8006218:	bfb8      	it	lt
 800621a:	4618      	movlt	r0, r3
 800621c:	e7a6      	b.n	800616c <_printf_i+0x160>
 800621e:	2301      	movs	r3, #1
 8006220:	4632      	mov	r2, r6
 8006222:	4649      	mov	r1, r9
 8006224:	4640      	mov	r0, r8
 8006226:	47d0      	blx	sl
 8006228:	3001      	adds	r0, #1
 800622a:	d09d      	beq.n	8006168 <_printf_i+0x15c>
 800622c:	3501      	adds	r5, #1
 800622e:	68e3      	ldr	r3, [r4, #12]
 8006230:	9903      	ldr	r1, [sp, #12]
 8006232:	1a5b      	subs	r3, r3, r1
 8006234:	42ab      	cmp	r3, r5
 8006236:	dcf2      	bgt.n	800621e <_printf_i+0x212>
 8006238:	e7eb      	b.n	8006212 <_printf_i+0x206>
 800623a:	2500      	movs	r5, #0
 800623c:	f104 0619 	add.w	r6, r4, #25
 8006240:	e7f5      	b.n	800622e <_printf_i+0x222>
 8006242:	bf00      	nop
 8006244:	08006715 	.word	0x08006715
 8006248:	08006726 	.word	0x08006726

0800624c <__sflush_r>:
 800624c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006254:	0716      	lsls	r6, r2, #28
 8006256:	4605      	mov	r5, r0
 8006258:	460c      	mov	r4, r1
 800625a:	d454      	bmi.n	8006306 <__sflush_r+0xba>
 800625c:	684b      	ldr	r3, [r1, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	dc02      	bgt.n	8006268 <__sflush_r+0x1c>
 8006262:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006264:	2b00      	cmp	r3, #0
 8006266:	dd48      	ble.n	80062fa <__sflush_r+0xae>
 8006268:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800626a:	2e00      	cmp	r6, #0
 800626c:	d045      	beq.n	80062fa <__sflush_r+0xae>
 800626e:	2300      	movs	r3, #0
 8006270:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006274:	682f      	ldr	r7, [r5, #0]
 8006276:	6a21      	ldr	r1, [r4, #32]
 8006278:	602b      	str	r3, [r5, #0]
 800627a:	d030      	beq.n	80062de <__sflush_r+0x92>
 800627c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800627e:	89a3      	ldrh	r3, [r4, #12]
 8006280:	0759      	lsls	r1, r3, #29
 8006282:	d505      	bpl.n	8006290 <__sflush_r+0x44>
 8006284:	6863      	ldr	r3, [r4, #4]
 8006286:	1ad2      	subs	r2, r2, r3
 8006288:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800628a:	b10b      	cbz	r3, 8006290 <__sflush_r+0x44>
 800628c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	2300      	movs	r3, #0
 8006292:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006294:	6a21      	ldr	r1, [r4, #32]
 8006296:	4628      	mov	r0, r5
 8006298:	47b0      	blx	r6
 800629a:	1c43      	adds	r3, r0, #1
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	d106      	bne.n	80062ae <__sflush_r+0x62>
 80062a0:	6829      	ldr	r1, [r5, #0]
 80062a2:	291d      	cmp	r1, #29
 80062a4:	d82b      	bhi.n	80062fe <__sflush_r+0xb2>
 80062a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006350 <__sflush_r+0x104>)
 80062a8:	410a      	asrs	r2, r1
 80062aa:	07d6      	lsls	r6, r2, #31
 80062ac:	d427      	bmi.n	80062fe <__sflush_r+0xb2>
 80062ae:	2200      	movs	r2, #0
 80062b0:	6062      	str	r2, [r4, #4]
 80062b2:	04d9      	lsls	r1, r3, #19
 80062b4:	6922      	ldr	r2, [r4, #16]
 80062b6:	6022      	str	r2, [r4, #0]
 80062b8:	d504      	bpl.n	80062c4 <__sflush_r+0x78>
 80062ba:	1c42      	adds	r2, r0, #1
 80062bc:	d101      	bne.n	80062c2 <__sflush_r+0x76>
 80062be:	682b      	ldr	r3, [r5, #0]
 80062c0:	b903      	cbnz	r3, 80062c4 <__sflush_r+0x78>
 80062c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80062c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062c6:	602f      	str	r7, [r5, #0]
 80062c8:	b1b9      	cbz	r1, 80062fa <__sflush_r+0xae>
 80062ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062ce:	4299      	cmp	r1, r3
 80062d0:	d002      	beq.n	80062d8 <__sflush_r+0x8c>
 80062d2:	4628      	mov	r0, r5
 80062d4:	f7ff fbf2 	bl	8005abc <_free_r>
 80062d8:	2300      	movs	r3, #0
 80062da:	6363      	str	r3, [r4, #52]	@ 0x34
 80062dc:	e00d      	b.n	80062fa <__sflush_r+0xae>
 80062de:	2301      	movs	r3, #1
 80062e0:	4628      	mov	r0, r5
 80062e2:	47b0      	blx	r6
 80062e4:	4602      	mov	r2, r0
 80062e6:	1c50      	adds	r0, r2, #1
 80062e8:	d1c9      	bne.n	800627e <__sflush_r+0x32>
 80062ea:	682b      	ldr	r3, [r5, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0c6      	beq.n	800627e <__sflush_r+0x32>
 80062f0:	2b1d      	cmp	r3, #29
 80062f2:	d001      	beq.n	80062f8 <__sflush_r+0xac>
 80062f4:	2b16      	cmp	r3, #22
 80062f6:	d11e      	bne.n	8006336 <__sflush_r+0xea>
 80062f8:	602f      	str	r7, [r5, #0]
 80062fa:	2000      	movs	r0, #0
 80062fc:	e022      	b.n	8006344 <__sflush_r+0xf8>
 80062fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006302:	b21b      	sxth	r3, r3
 8006304:	e01b      	b.n	800633e <__sflush_r+0xf2>
 8006306:	690f      	ldr	r7, [r1, #16]
 8006308:	2f00      	cmp	r7, #0
 800630a:	d0f6      	beq.n	80062fa <__sflush_r+0xae>
 800630c:	0793      	lsls	r3, r2, #30
 800630e:	680e      	ldr	r6, [r1, #0]
 8006310:	bf08      	it	eq
 8006312:	694b      	ldreq	r3, [r1, #20]
 8006314:	600f      	str	r7, [r1, #0]
 8006316:	bf18      	it	ne
 8006318:	2300      	movne	r3, #0
 800631a:	eba6 0807 	sub.w	r8, r6, r7
 800631e:	608b      	str	r3, [r1, #8]
 8006320:	f1b8 0f00 	cmp.w	r8, #0
 8006324:	dde9      	ble.n	80062fa <__sflush_r+0xae>
 8006326:	6a21      	ldr	r1, [r4, #32]
 8006328:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800632a:	4643      	mov	r3, r8
 800632c:	463a      	mov	r2, r7
 800632e:	4628      	mov	r0, r5
 8006330:	47b0      	blx	r6
 8006332:	2800      	cmp	r0, #0
 8006334:	dc08      	bgt.n	8006348 <__sflush_r+0xfc>
 8006336:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800633a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800633e:	81a3      	strh	r3, [r4, #12]
 8006340:	f04f 30ff 	mov.w	r0, #4294967295
 8006344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006348:	4407      	add	r7, r0
 800634a:	eba8 0800 	sub.w	r8, r8, r0
 800634e:	e7e7      	b.n	8006320 <__sflush_r+0xd4>
 8006350:	dfbffffe 	.word	0xdfbffffe

08006354 <_fflush_r>:
 8006354:	b538      	push	{r3, r4, r5, lr}
 8006356:	690b      	ldr	r3, [r1, #16]
 8006358:	4605      	mov	r5, r0
 800635a:	460c      	mov	r4, r1
 800635c:	b913      	cbnz	r3, 8006364 <_fflush_r+0x10>
 800635e:	2500      	movs	r5, #0
 8006360:	4628      	mov	r0, r5
 8006362:	bd38      	pop	{r3, r4, r5, pc}
 8006364:	b118      	cbz	r0, 800636e <_fflush_r+0x1a>
 8006366:	6a03      	ldr	r3, [r0, #32]
 8006368:	b90b      	cbnz	r3, 800636e <_fflush_r+0x1a>
 800636a:	f7ff fa9f 	bl	80058ac <__sinit>
 800636e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d0f3      	beq.n	800635e <_fflush_r+0xa>
 8006376:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006378:	07d0      	lsls	r0, r2, #31
 800637a:	d404      	bmi.n	8006386 <_fflush_r+0x32>
 800637c:	0599      	lsls	r1, r3, #22
 800637e:	d402      	bmi.n	8006386 <_fflush_r+0x32>
 8006380:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006382:	f7ff fb98 	bl	8005ab6 <__retarget_lock_acquire_recursive>
 8006386:	4628      	mov	r0, r5
 8006388:	4621      	mov	r1, r4
 800638a:	f7ff ff5f 	bl	800624c <__sflush_r>
 800638e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006390:	07da      	lsls	r2, r3, #31
 8006392:	4605      	mov	r5, r0
 8006394:	d4e4      	bmi.n	8006360 <_fflush_r+0xc>
 8006396:	89a3      	ldrh	r3, [r4, #12]
 8006398:	059b      	lsls	r3, r3, #22
 800639a:	d4e1      	bmi.n	8006360 <_fflush_r+0xc>
 800639c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800639e:	f7ff fb8b 	bl	8005ab8 <__retarget_lock_release_recursive>
 80063a2:	e7dd      	b.n	8006360 <_fflush_r+0xc>

080063a4 <__swbuf_r>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	460e      	mov	r6, r1
 80063a8:	4614      	mov	r4, r2
 80063aa:	4605      	mov	r5, r0
 80063ac:	b118      	cbz	r0, 80063b6 <__swbuf_r+0x12>
 80063ae:	6a03      	ldr	r3, [r0, #32]
 80063b0:	b90b      	cbnz	r3, 80063b6 <__swbuf_r+0x12>
 80063b2:	f7ff fa7b 	bl	80058ac <__sinit>
 80063b6:	69a3      	ldr	r3, [r4, #24]
 80063b8:	60a3      	str	r3, [r4, #8]
 80063ba:	89a3      	ldrh	r3, [r4, #12]
 80063bc:	071a      	lsls	r2, r3, #28
 80063be:	d501      	bpl.n	80063c4 <__swbuf_r+0x20>
 80063c0:	6923      	ldr	r3, [r4, #16]
 80063c2:	b943      	cbnz	r3, 80063d6 <__swbuf_r+0x32>
 80063c4:	4621      	mov	r1, r4
 80063c6:	4628      	mov	r0, r5
 80063c8:	f000 f82a 	bl	8006420 <__swsetup_r>
 80063cc:	b118      	cbz	r0, 80063d6 <__swbuf_r+0x32>
 80063ce:	f04f 37ff 	mov.w	r7, #4294967295
 80063d2:	4638      	mov	r0, r7
 80063d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063d6:	6823      	ldr	r3, [r4, #0]
 80063d8:	6922      	ldr	r2, [r4, #16]
 80063da:	1a98      	subs	r0, r3, r2
 80063dc:	6963      	ldr	r3, [r4, #20]
 80063de:	b2f6      	uxtb	r6, r6
 80063e0:	4283      	cmp	r3, r0
 80063e2:	4637      	mov	r7, r6
 80063e4:	dc05      	bgt.n	80063f2 <__swbuf_r+0x4e>
 80063e6:	4621      	mov	r1, r4
 80063e8:	4628      	mov	r0, r5
 80063ea:	f7ff ffb3 	bl	8006354 <_fflush_r>
 80063ee:	2800      	cmp	r0, #0
 80063f0:	d1ed      	bne.n	80063ce <__swbuf_r+0x2a>
 80063f2:	68a3      	ldr	r3, [r4, #8]
 80063f4:	3b01      	subs	r3, #1
 80063f6:	60a3      	str	r3, [r4, #8]
 80063f8:	6823      	ldr	r3, [r4, #0]
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	6022      	str	r2, [r4, #0]
 80063fe:	701e      	strb	r6, [r3, #0]
 8006400:	6962      	ldr	r2, [r4, #20]
 8006402:	1c43      	adds	r3, r0, #1
 8006404:	429a      	cmp	r2, r3
 8006406:	d004      	beq.n	8006412 <__swbuf_r+0x6e>
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	07db      	lsls	r3, r3, #31
 800640c:	d5e1      	bpl.n	80063d2 <__swbuf_r+0x2e>
 800640e:	2e0a      	cmp	r6, #10
 8006410:	d1df      	bne.n	80063d2 <__swbuf_r+0x2e>
 8006412:	4621      	mov	r1, r4
 8006414:	4628      	mov	r0, r5
 8006416:	f7ff ff9d 	bl	8006354 <_fflush_r>
 800641a:	2800      	cmp	r0, #0
 800641c:	d0d9      	beq.n	80063d2 <__swbuf_r+0x2e>
 800641e:	e7d6      	b.n	80063ce <__swbuf_r+0x2a>

08006420 <__swsetup_r>:
 8006420:	b538      	push	{r3, r4, r5, lr}
 8006422:	4b29      	ldr	r3, [pc, #164]	@ (80064c8 <__swsetup_r+0xa8>)
 8006424:	4605      	mov	r5, r0
 8006426:	6818      	ldr	r0, [r3, #0]
 8006428:	460c      	mov	r4, r1
 800642a:	b118      	cbz	r0, 8006434 <__swsetup_r+0x14>
 800642c:	6a03      	ldr	r3, [r0, #32]
 800642e:	b90b      	cbnz	r3, 8006434 <__swsetup_r+0x14>
 8006430:	f7ff fa3c 	bl	80058ac <__sinit>
 8006434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006438:	0719      	lsls	r1, r3, #28
 800643a:	d422      	bmi.n	8006482 <__swsetup_r+0x62>
 800643c:	06da      	lsls	r2, r3, #27
 800643e:	d407      	bmi.n	8006450 <__swsetup_r+0x30>
 8006440:	2209      	movs	r2, #9
 8006442:	602a      	str	r2, [r5, #0]
 8006444:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006448:	81a3      	strh	r3, [r4, #12]
 800644a:	f04f 30ff 	mov.w	r0, #4294967295
 800644e:	e033      	b.n	80064b8 <__swsetup_r+0x98>
 8006450:	0758      	lsls	r0, r3, #29
 8006452:	d512      	bpl.n	800647a <__swsetup_r+0x5a>
 8006454:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006456:	b141      	cbz	r1, 800646a <__swsetup_r+0x4a>
 8006458:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800645c:	4299      	cmp	r1, r3
 800645e:	d002      	beq.n	8006466 <__swsetup_r+0x46>
 8006460:	4628      	mov	r0, r5
 8006462:	f7ff fb2b 	bl	8005abc <_free_r>
 8006466:	2300      	movs	r3, #0
 8006468:	6363      	str	r3, [r4, #52]	@ 0x34
 800646a:	89a3      	ldrh	r3, [r4, #12]
 800646c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006470:	81a3      	strh	r3, [r4, #12]
 8006472:	2300      	movs	r3, #0
 8006474:	6063      	str	r3, [r4, #4]
 8006476:	6923      	ldr	r3, [r4, #16]
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	89a3      	ldrh	r3, [r4, #12]
 800647c:	f043 0308 	orr.w	r3, r3, #8
 8006480:	81a3      	strh	r3, [r4, #12]
 8006482:	6923      	ldr	r3, [r4, #16]
 8006484:	b94b      	cbnz	r3, 800649a <__swsetup_r+0x7a>
 8006486:	89a3      	ldrh	r3, [r4, #12]
 8006488:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800648c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006490:	d003      	beq.n	800649a <__swsetup_r+0x7a>
 8006492:	4621      	mov	r1, r4
 8006494:	4628      	mov	r0, r5
 8006496:	f000 f84f 	bl	8006538 <__smakebuf_r>
 800649a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800649e:	f013 0201 	ands.w	r2, r3, #1
 80064a2:	d00a      	beq.n	80064ba <__swsetup_r+0x9a>
 80064a4:	2200      	movs	r2, #0
 80064a6:	60a2      	str	r2, [r4, #8]
 80064a8:	6962      	ldr	r2, [r4, #20]
 80064aa:	4252      	negs	r2, r2
 80064ac:	61a2      	str	r2, [r4, #24]
 80064ae:	6922      	ldr	r2, [r4, #16]
 80064b0:	b942      	cbnz	r2, 80064c4 <__swsetup_r+0xa4>
 80064b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80064b6:	d1c5      	bne.n	8006444 <__swsetup_r+0x24>
 80064b8:	bd38      	pop	{r3, r4, r5, pc}
 80064ba:	0799      	lsls	r1, r3, #30
 80064bc:	bf58      	it	pl
 80064be:	6962      	ldrpl	r2, [r4, #20]
 80064c0:	60a2      	str	r2, [r4, #8]
 80064c2:	e7f4      	b.n	80064ae <__swsetup_r+0x8e>
 80064c4:	2000      	movs	r0, #0
 80064c6:	e7f7      	b.n	80064b8 <__swsetup_r+0x98>
 80064c8:	2400003c 	.word	0x2400003c

080064cc <_sbrk_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	4d06      	ldr	r5, [pc, #24]	@ (80064e8 <_sbrk_r+0x1c>)
 80064d0:	2300      	movs	r3, #0
 80064d2:	4604      	mov	r4, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	602b      	str	r3, [r5, #0]
 80064d8:	f7fa fb7a 	bl	8000bd0 <_sbrk>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_sbrk_r+0x1a>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_sbrk_r+0x1a>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	24004250 	.word	0x24004250

080064ec <__swhatbuf_r>:
 80064ec:	b570      	push	{r4, r5, r6, lr}
 80064ee:	460c      	mov	r4, r1
 80064f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f4:	2900      	cmp	r1, #0
 80064f6:	b096      	sub	sp, #88	@ 0x58
 80064f8:	4615      	mov	r5, r2
 80064fa:	461e      	mov	r6, r3
 80064fc:	da0d      	bge.n	800651a <__swhatbuf_r+0x2e>
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006504:	f04f 0100 	mov.w	r1, #0
 8006508:	bf14      	ite	ne
 800650a:	2340      	movne	r3, #64	@ 0x40
 800650c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006510:	2000      	movs	r0, #0
 8006512:	6031      	str	r1, [r6, #0]
 8006514:	602b      	str	r3, [r5, #0]
 8006516:	b016      	add	sp, #88	@ 0x58
 8006518:	bd70      	pop	{r4, r5, r6, pc}
 800651a:	466a      	mov	r2, sp
 800651c:	f000 f848 	bl	80065b0 <_fstat_r>
 8006520:	2800      	cmp	r0, #0
 8006522:	dbec      	blt.n	80064fe <__swhatbuf_r+0x12>
 8006524:	9901      	ldr	r1, [sp, #4]
 8006526:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800652a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800652e:	4259      	negs	r1, r3
 8006530:	4159      	adcs	r1, r3
 8006532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006536:	e7eb      	b.n	8006510 <__swhatbuf_r+0x24>

08006538 <__smakebuf_r>:
 8006538:	898b      	ldrh	r3, [r1, #12]
 800653a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800653c:	079d      	lsls	r5, r3, #30
 800653e:	4606      	mov	r6, r0
 8006540:	460c      	mov	r4, r1
 8006542:	d507      	bpl.n	8006554 <__smakebuf_r+0x1c>
 8006544:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006548:	6023      	str	r3, [r4, #0]
 800654a:	6123      	str	r3, [r4, #16]
 800654c:	2301      	movs	r3, #1
 800654e:	6163      	str	r3, [r4, #20]
 8006550:	b003      	add	sp, #12
 8006552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006554:	ab01      	add	r3, sp, #4
 8006556:	466a      	mov	r2, sp
 8006558:	f7ff ffc8 	bl	80064ec <__swhatbuf_r>
 800655c:	9f00      	ldr	r7, [sp, #0]
 800655e:	4605      	mov	r5, r0
 8006560:	4639      	mov	r1, r7
 8006562:	4630      	mov	r0, r6
 8006564:	f7ff fb16 	bl	8005b94 <_malloc_r>
 8006568:	b948      	cbnz	r0, 800657e <__smakebuf_r+0x46>
 800656a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800656e:	059a      	lsls	r2, r3, #22
 8006570:	d4ee      	bmi.n	8006550 <__smakebuf_r+0x18>
 8006572:	f023 0303 	bic.w	r3, r3, #3
 8006576:	f043 0302 	orr.w	r3, r3, #2
 800657a:	81a3      	strh	r3, [r4, #12]
 800657c:	e7e2      	b.n	8006544 <__smakebuf_r+0xc>
 800657e:	89a3      	ldrh	r3, [r4, #12]
 8006580:	6020      	str	r0, [r4, #0]
 8006582:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006586:	81a3      	strh	r3, [r4, #12]
 8006588:	9b01      	ldr	r3, [sp, #4]
 800658a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800658e:	b15b      	cbz	r3, 80065a8 <__smakebuf_r+0x70>
 8006590:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006594:	4630      	mov	r0, r6
 8006596:	f000 f81d 	bl	80065d4 <_isatty_r>
 800659a:	b128      	cbz	r0, 80065a8 <__smakebuf_r+0x70>
 800659c:	89a3      	ldrh	r3, [r4, #12]
 800659e:	f023 0303 	bic.w	r3, r3, #3
 80065a2:	f043 0301 	orr.w	r3, r3, #1
 80065a6:	81a3      	strh	r3, [r4, #12]
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	431d      	orrs	r5, r3
 80065ac:	81a5      	strh	r5, [r4, #12]
 80065ae:	e7cf      	b.n	8006550 <__smakebuf_r+0x18>

080065b0 <_fstat_r>:
 80065b0:	b538      	push	{r3, r4, r5, lr}
 80065b2:	4d07      	ldr	r5, [pc, #28]	@ (80065d0 <_fstat_r+0x20>)
 80065b4:	2300      	movs	r3, #0
 80065b6:	4604      	mov	r4, r0
 80065b8:	4608      	mov	r0, r1
 80065ba:	4611      	mov	r1, r2
 80065bc:	602b      	str	r3, [r5, #0]
 80065be:	f7fa fadf 	bl	8000b80 <_fstat>
 80065c2:	1c43      	adds	r3, r0, #1
 80065c4:	d102      	bne.n	80065cc <_fstat_r+0x1c>
 80065c6:	682b      	ldr	r3, [r5, #0]
 80065c8:	b103      	cbz	r3, 80065cc <_fstat_r+0x1c>
 80065ca:	6023      	str	r3, [r4, #0]
 80065cc:	bd38      	pop	{r3, r4, r5, pc}
 80065ce:	bf00      	nop
 80065d0:	24004250 	.word	0x24004250

080065d4 <_isatty_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	4d06      	ldr	r5, [pc, #24]	@ (80065f0 <_isatty_r+0x1c>)
 80065d8:	2300      	movs	r3, #0
 80065da:	4604      	mov	r4, r0
 80065dc:	4608      	mov	r0, r1
 80065de:	602b      	str	r3, [r5, #0]
 80065e0:	f7fa fade 	bl	8000ba0 <_isatty>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d102      	bne.n	80065ee <_isatty_r+0x1a>
 80065e8:	682b      	ldr	r3, [r5, #0]
 80065ea:	b103      	cbz	r3, 80065ee <_isatty_r+0x1a>
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	bd38      	pop	{r3, r4, r5, pc}
 80065f0:	24004250 	.word	0x24004250

080065f4 <_init>:
 80065f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f6:	bf00      	nop
 80065f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065fa:	bc08      	pop	{r3}
 80065fc:	469e      	mov	lr, r3
 80065fe:	4770      	bx	lr

08006600 <_fini>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	bf00      	nop
 8006604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006606:	bc08      	pop	{r3}
 8006608:	469e      	mov	lr, r3
 800660a:	4770      	bx	lr
